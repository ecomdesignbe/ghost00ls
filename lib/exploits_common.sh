#!/bin/bash
# lib/exploits_common.sh - Fonctions communes pour tous les exploits
# Source: ~/ghost00ls/lib/exploits_common.sh

# ==========================
# Utilities partagées
# ==========================

# Détection IP locale (priorité IPv4 privé)
get_host_ip() {
    local ip
    ip=$(hostname -I 2>/dev/null | awk '{for(i=1;i<=NF;i++) if ($i ~ /^(192\.168\.|10\.|172\.(1[6-9]|2[0-9]|3[01])\.)[0-9]{1,3}\.[0-9]{1,3}$/) { print $i; exit }}')
    echo "${ip:-127.0.0.1}"
}

# URL encoding (portable)
urlenc() {
    local raw="$1"
    if command -v python3 >/dev/null 2>&1; then
        python3 -c "import urllib.parse,sys; print(urllib.parse.quote(sys.argv[1]))" "$raw"
    elif command -v jq >/dev/null 2>&1; then
        printf '%s' "$raw" | jq -s -R -r @uri
    else
        # Fallback basique (pas complet RFC)
        echo -n "$raw" | sed -e 's/ /%20/g' -e 's/</%3C/g' -e 's/>/%3E/g' \
            -e 's/"/%22/g' -e "s/'/%27/g" -e 's/|/%7C/g' -e 's/&/%26/g'
    fi
}

# HTML escape pour rapports
html_escape() {
    local s="$1"
    s="${s//&/&amp;}"
    s="${s//</&lt;}"
    s="${s//>/&gt;}"
    s="${s//\"/&quot;}"
    s="${s//\'/&#39;}"
    printf '%s' "$s"
}

# ==========================
# Gestion des outils
# ==========================

declare -A ATTACK_TOOLS=(
    [hydra]="hydra"
    [sqlmap]="sqlmap"
    [dirb]="dirb"
    [gobuster]="gobuster"
    [wfuzz]="wfuzz"
    [ffuf]="ffuf"
    [curl]="curl"
    [jq]="jq"
    [nmap]="nmap"
    [nikto]="nikto"
)

install_tool() {
    local tool="$1"
    case "$tool" in
        hydra|sqlmap|dirb|gobuster|wfuzz|ffuf|curl|jq|nmap|nikto)
            echo -e "${YELLOW}Installation de $tool...${NC}"
            sudo apt update && sudo apt install -y "$tool"
            ;;
        *)
            echo -e "${RED}Outil inconnu : $tool${NC}"
            return 1
            ;;
    esac
}

check_tools() {
    local missing=0
    for tool in "$@"; do
        if ! command -v "$tool" &>/dev/null; then
            echo -e "${YELLOW}⚠️ $tool manquant → installation...${NC}"
            install_tool "$tool"
            missing=$((missing+1))
        else
            echo -e "${GREEN}✔️ $tool OK${NC}"
        fi
    done
    [[ $missing -eq 0 ]] && echo -e "${GREEN}✅ Tous les outils prêts${NC}\n"
}

# ==========================
# Baseline & metrics
# ==========================

# Mesure baseline (3 requêtes GET)
baseline_measure() {
    local url="$1"
    local cookie="$2"
    local tmpfile="/tmp/ghost_baseline_$$"
    local sum_status=0 sum_size=0 sum_time=0 count=0
    
    for i in 1 2 3; do
        local result
        if [ -n "$cookie" ]; then
            result=$(curl -s -L -k --max-time 10 -H "Cookie: $cookie" \
                -w "%{http_code} %{size_download} %{time_total}" \
                -o "$tmpfile" "$url" 2>/dev/null || echo "000 0 0")
        else
            result=$(curl -s -L -k --max-time 10 \
                -w "%{http_code} %{size_download} %{time_total}" \
                -o "$tmpfile" "$url" 2>/dev/null || echo "000 0 0")
        fi
        
        local st sz tm
        st=$(echo "$result" | awk '{print $1}')
        sz=$(echo "$result" | awk '{print $2}')
        tm=$(echo "$result" | awk '{print $3}')
        
        sum_status=$((sum_status + st))
        sum_size=$((sum_size + sz))
        sum_time=$(awk -v a="$sum_time" -v b="$tm" 'BEGIN{printf "%.6f", a+b}')
        count=$((count + 1))
    done
    
    rm -f "$tmpfile"
    
    # Moyennes
    local avg_status=$((sum_status / count))
    local avg_size=$((sum_size / count))
    local avg_time=$(awk -v t="$sum_time" -v c="$count" 'BEGIN{printf "%.6f", t/c}')
    
    echo "$avg_status $avg_size $avg_time"
}

# ==========================
# Génération de rapports
# ==========================

# CSV générique
create_csv_header() {
    local file="$1"
    shift
    local IFS=','
    echo "$*" > "$file"
}

# HTML simple
create_html_report() {
    local file="$1"
    local title="$2"
    local target="$3"
    
    cat > "$file" <<EOF
<!doctype html>
<html lang="fr">
<head>
    <meta charset="utf-8">
    <title>$title</title>
    <style>
        body { font-family: monospace; background: #0d1117; color: #c9d1d9; padding: 20px; }
        h1, h2 { color: #58a6ff; }
        table { border-collapse: collapse; width: 100%; margin: 20px 0; }
        th, td { border: 1px solid #30363d; padding: 8px; text-align: left; }
        th { background: #161b22; color: #58a6ff; }
        .hit { background: #238636; color: #fff; }
        .warn { background: #d29922; color: #000; }
        .miss { background: #da3633; color: #fff; }
        pre { background: #161b22; padding: 10px; overflow: auto; }
        code { color: #f85149; }
    </style>
</head>
<body>
    <h1>$title</h1>
    <p><strong>Cible :</strong> $target</p>
    <p><strong>Date :</strong> $(date)</p>
EOF
}

close_html_report() {
    local file="$1"
    echo "</body></html>" >> "$file"
}

# ==========================
# Logging standardisé
# ==========================

log_exploit() {
    local logfile="$1"
    local level="$2"
    shift 2
    local msg="$*"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $msg" | tee -a "$logfile"
}
